<svg width="63.492mm" height="23.253mm" version="1.1" viewBox="0 0 63.492 23.253" xmlns="http://www.w3.org/2000/svg" xmlns:ns1="https://launchpad.net/jessyink">
 <g transform="translate(-164.9 -51.846)">
  <path d="m208.3 61.082q-0.0634 0.05237-0.14194 0.07855-0.0779 0.02549-0.1881 0.02549h-0.14951l-0.0889 0.38447h-0.1378l0.23702-1.0259h0.2701q0.0937 0 0.15503 0.01654 0.0613 0.01654 0.10059 0.04754 0.0406 0.03101 0.062 0.07579 0.0214 0.0441 0.0214 0.1068 0 0.08406-0.0365 0.15985-0.0365 0.0751-0.10336 0.13091zm-6e-3 -0.26734q0-0.03514-0.0117-0.06546t-0.0365-0.04961q-0.0296-0.02274-0.0703-0.03238-0.04-0.01033-0.10473-0.01033h-0.12747l-0.0971 0.41823h0.12264q0.0827 0 0.13712-0.01516 0.0551-0.01516 0.0951-0.04823 0.0469-0.03927 0.0696-0.08819 0.0234-0.04892 0.0234-0.10886zm0.61116 0.77446q-0.19499 0-0.30592-0.1006-0.11094-0.10129-0.11094-0.28663 0-0.14194 0.0427-0.26458t0.12265-0.21497q0.0792-0.09095 0.19499-0.14332 0.11576-0.05306 0.25838-0.05306 0.0889 0 0.16812 0.02205 0.0792 0.02136 0.16261 0.06821l-0.031 0.15434h-0.0103q-0.0227-0.02274-0.0462-0.04203-0.0227-0.01998-0.0689-0.04341-0.0379-0.01998-0.0903-0.03307-0.0524-0.01378-0.11575-0.01378-0.0965 0-0.17708 0.04065-0.0806 0.03996-0.13987 0.11231-0.0579 0.07028-0.091 0.17088t-0.0331 0.21428q0 0.14194 0.0737 0.22118 0.0737 0.07855 0.21291 0.07855 0.0655 0 0.12402-0.01447 0.0593-0.01516 0.10749-0.0379 0.0448-0.02136 0.0806-0.04479t0.0613-0.04341h0.01l-0.0324 0.15847q-0.0724 0.03652-0.16674 0.06615-0.0937 0.02894-0.19982 0.02894zm1.2216-0.10129q-0.0668 0.04479-0.13987 0.06408-0.073 0.0186-0.17983 0.0186h-0.3769l0.23634-1.0259h0.2949q0.11231 0 0.16674 0.0076 0.0551 0.0076 0.1006 0.03514 0.0379 0.02343 0.0565 0.05994 0.0193 0.03583 0.0193 0.07993 0 0.08888-0.0503 0.1571-0.0503 0.06821-0.13918 0.10542v0.0055q0.0827 0.0186 0.12609 0.06959 0.0441 0.05099 0.0441 0.13091 0 0.08751-0.0441 0.16605-0.0434 0.07786-0.11438 0.12609zm0.0296-0.72278q0-0.02894-0.01-0.04754-0.01-0.01929-0.0276-0.0317-0.0289-0.01929-0.0724-0.02411-0.0434-0.0055-0.11231-0.0055h-0.15571l-0.0703 0.30455h0.17914q0.0593 0 0.10335-0.0083 0.0441-9e-3 0.0772-0.02756 0.0427-0.02481 0.0655-0.07028 0.0227-0.04616 0.0227-0.08957zm-0.0152 0.44028q0-0.03858-0.0131-0.06201-0.0131-0.02412-0.0469-0.04479-0.0276-0.01723-0.071-0.02274-0.0427-0.0055-0.1192-0.0055h-0.2074l-0.0903 0.38861h0.1881q0.0916 0 0.14883-0.0096 0.0579-0.01034 0.0999-0.03583 0.0544-0.03238 0.0827-0.08819 0.0283-0.0565 0.0283-0.11989zm1.3202-0.40445-0.0234 0.10473h-0.26734l-0.0827 0.35484q-7e-3 0.02687-0.0124 0.06201-6e-3 0.03445-6e-3 0.05512 0 0.0503 0.0255 0.0751 0.0255 0.02412 0.0944 0.02412 0.0282 0 0.0668-0.0096 0.0393-0.0096 0.0531-0.01516h7e-3l-0.0241 0.11162q-0.0386 0.0096-0.0827 0.01585-0.0434 0.0062-0.0772 0.0062-0.0951 0-0.14745-0.04134-0.0517-0.04203-0.0517-0.13229 0-0.02205 3e-3 -0.04341 3e-3 -0.02205 9e-3 -0.04961l0.0958-0.41341h-0.0875l0.0234-0.10473h0.0875l0.0517-0.22118h0.12954l-0.0517 0.22118zm0.60013 0.13642h-7e-3q-0.0276-0.0069-0.0517-0.0096-0.0234-0.0034-0.0572-0.0034-0.0648 0-0.12885 0.02963-0.0634 0.02894-0.12195 0.07028l-0.12403 0.54639h-0.13089l0.1757-0.76963h0.13091l-0.0262 0.11369q0.0916-0.06408 0.15503-0.08888 0.0641-0.0248 0.12265-0.0248 0.0338 0 0.0489 0.0021 0.0152 0.0014 0.0441 0.0062zm0.54433 0.22738q-0.10611 0.0041-0.18879 0.01654-0.082 0.01171-0.13574 0.03445-0.0558 0.02274-0.0847 0.06201-0.0289 0.03859-0.0289 0.09646 0 0.04961 0.0338 0.07579t0.10473 0.02618q0.0627 0 0.12746-0.02756 0.0655-0.02825 0.12196-0.06752zm-0.0751 0.32384q-0.0186 0.01102-0.051 0.03169-0.0317 0.01998-0.0648 0.03445-0.0351 0.01585-0.0785 0.02618-0.0434 0.01102-0.0999 0.01102-0.0916 0-0.14883-0.05306-0.0572-0.05374-0.0572-0.13987 0-0.09164 0.04-0.15434 0.0406-0.06339 0.11989-0.10335 0.0779-0.03927 0.18741-0.0565 0.11025-0.01791 0.25081-0.02205 4e-3 -0.01929 7e-3 -0.03307 3e-3 -0.01447 3e-3 -0.02963 0-0.03307-0.0131-0.05374t-0.0372-0.03307-0.0565-0.01654q-0.0317-0.0048-0.0703-0.0048-0.0586 0-0.13367 0.01929-0.0751 0.0186-0.12196 0.03721h-7e-3l0.0255-0.12954q0.0393-0.01033 0.11507-0.02343 0.0758-0.01309 0.14538-0.01309 0.14332 0 0.21498 0.04479 0.0717 0.04479 0.0717 0.14194 0 0.0186-3e-3 0.03996-3e-3 0.02067-7e-3 0.03927l-0.12058 0.52228h-0.12885zm0.69246 0.09922q-0.073 0-0.12954-0.01723-0.0558-0.01722-0.0978-0.05443-0.0406-0.03583-0.0627-0.09026t-0.0221-0.12678q0-0.10818 0.0338-0.20188 0.0338-0.09371 0.0958-0.16468 0.0599-0.0689 0.14814-0.10886 0.0882-0.04065 0.19017-0.04065 0.0675 0 0.12678 0.0186 0.0599 0.0186 0.10542 0.0441l-0.0283 0.13987h-8e-3q-0.0138-0.0124-0.0344-0.02894-0.0207-0.01654-0.0489-0.03101-0.0282-0.01516-0.0627-0.02481-0.0344-0.01034-0.0785-0.01034-0.13367 0-0.21842 0.113-0.0841 0.113-0.0841 0.27492 0 0.09715 0.0496 0.14952 0.0503 0.05237 0.14263 0.05237 0.0434 0 0.0868-0.0124t0.0737-0.02687q0.0338-0.01585 0.0627-0.03376 0.0289-0.01792 0.042-0.02687h8e-3l-0.0276 0.14125q-0.0599 0.02687-0.12678 0.04685-0.0668 0.01929-0.13574 0.01929zm1.0246-0.48576q3e-3 -0.01998 5e-3 -0.03376 1e-3 -0.01378 1e-3 -0.03032 0-0.07373-0.0406-0.11507-0.04-0.04134-0.12885-0.04134-0.0978 0-0.17363 0.06063-0.0758 0.06063-0.10266 0.15985zm-0.25907 0.48645q-0.15985 0-0.2508-0.0751-0.0909-0.0751-0.0909-0.2198 0-0.21153 0.13367-0.36242 0.13367-0.15158 0.33073-0.15158 0.13091 0 0.2005 0.06546 0.0696 0.06477 0.0696 0.18259 0 0.02067-6e-3 0.06546t-0.0186 0.10404h-0.56707q-4e-3 0.01998-6e-3 0.03927-1e-3 0.01929-1e-3 0.03583 0 0.09715 0.0593 0.15296 0.0593 0.05512 0.16812 0.05512 0.0758 0 0.15572-0.02963 0.0806-0.02963 0.13505-0.06683h8e-3l-0.0282 0.13987q-0.0345 0.0124-0.062 0.02274-0.0276 0.01034-0.0703 0.02067t-0.0758 0.01585q-0.0331 0.0055-0.0827 0.0055z" stroke-linecap="round" stroke-linejoin="round" stroke-width=".19844" style="paint-order:markers stroke fill" aria-label="PCB trace"/>
  <path d="m219.87 62.836a0.099218 0.099218 0 0 0-0.0977 0.09961l0.0254 2.6914a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.10156l-0.0273-2.6914a0.099218 0.099218 0 0 0-0.0996-0.09766z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <g transform="translate(153.31 -26.729)">
   <title>Ground</title>
   <g transform="matrix(-.44713 0 0 .44713 95.722 52.45)" stroke-width=".4438">
    <title>GND</title>
    <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
     <g transform="translate(33.547 3.5594)" stroke-linecap="round">
      <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
      <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
      <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
      <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
     </g>
    </g>
    <title>GND</title>
   </g>
   <title>Ground</title>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".19844" style="paint-order:markers stroke fill" aria-label="RL">
   <path d="m221.96 67.573q0-0.03652-0.011-0.06132-0.011-0.02549-0.0338-0.04341-0.0262-0.02136-0.0641-0.02963-0.0379-0.0083-0.093-0.0083h-0.15434l-0.0916 0.3955h0.14469q0.0675 0 0.11714-0.0124 0.0496-0.0124 0.0903-0.04341 0.0455-0.03445 0.0703-0.08613 0.0255-0.05237 0.0255-0.11093zm0.15297 0.77101h-0.16055l-0.27009-0.40997h-0.19499l-0.0944 0.40997h-0.1378l0.23633-1.0259h0.27974q0.0937 0 0.15227 0.0124 0.0586 0.01171 0.10198 0.04341 0.0386 0.02825 0.0606 0.06821 0.0221 0.03996 0.0221 0.09991 0 0.12816-0.0806 0.22531-0.0799 0.09646-0.21015 0.13436z"/>
   <path d="m222.64 68.626h-0.42233l0.15406-0.66687h0.0896l-0.1366 0.59118h0.33276z" baseline-shift="sub"/>
  </g>
  <path d="m224.88 62.859a0.099218 0.099218 0 0 0-0.0996 0.09961l0.0273 2.6914a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0976-0.10156l-0.0254-2.6914a0.099218 0.099218 0 0 0-0.0996-0.09766z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <g transform="translate(158.32 -26.705)">
   <title>Ground</title>
   <g transform="matrix(-.44713 0 0 .44713 95.722 52.45)" stroke-width=".4438">
    <title>GND</title>
    <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
     <g transform="translate(33.547 3.5594)" stroke-linecap="round">
      <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
      <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
      <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
      <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
     </g>
    </g>
    <title>GND</title>
   </g>
   <title>Ground</title>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".19844" style="paint-order:markers stroke fill" aria-label="CL">
   <path d="m227.44 68.387q-0.19499 0-0.30592-0.1006-0.11094-0.10128-0.11094-0.28663 0-0.14194 0.0427-0.26458 0.0427-0.12264 0.12265-0.21497 0.0792-0.09095 0.19499-0.14332 0.11576-0.05306 0.25838-0.05306 0.0889 0 0.16812 0.02205 0.0792 0.02136 0.16261 0.06821l-0.031 0.15434h-0.0103q-0.0227-0.02274-0.0462-0.04203-0.0227-0.01998-0.0689-0.04341-0.0379-0.01998-0.0903-0.03307-0.0524-0.01378-0.11575-0.01378-0.0965 0-0.17708 0.04065-0.0806 0.03996-0.13987 0.11231-0.0579 0.07028-0.0909 0.17088-0.0331 0.1006-0.0331 0.21428 0 0.14194 0.0737 0.22118 0.0737 0.07855 0.21291 0.07855 0.0654 0 0.12402-0.01447 0.0593-0.01516 0.10749-0.0379 0.0448-0.02136 0.0806-0.04479t0.0613-0.04341h0.01l-0.0324 0.15847q-0.0724 0.03652-0.16674 0.06615-0.0937 0.02894-0.19982 0.02894z"/>
   <path d="m228.38 68.65h-0.42233l0.15407-0.66687h0.0896l-0.1366 0.59118h0.33276z" baseline-shift="sub"/>
  </g>
  <path d="m221.64 61.623h-0.64975l0.23703-1.0259h0.1378l-0.21015 0.9095h0.51194zm0.88263-0.49747q0 0.10335-0.0317 0.19844-0.0317 0.09508-0.0896 0.16536-0.0599 0.07304-0.13849 0.11438-0.0785 0.04065-0.18328 0.04065-0.13711 0-0.21428-0.07786-0.0765-0.07855-0.0765-0.21635 0-0.10335 0.031-0.19706 0.0317-0.09371 0.0909-0.16674 0.0572-0.07028 0.13987-0.11231 0.0834-0.04203 0.1819-0.04203 0.13299 0 0.21153 0.07579 0.0785 0.07579 0.0785 0.21773zm-0.21084 0.29077q0.0372-0.05512 0.0565-0.12747 0.02-0.07235 0.02-0.15296 0-0.09646-0.0462-0.14607-0.0462-0.04961-0.13023-0.04961-0.0668 0-0.11988 0.03238-0.0531 0.03169-0.0916 0.08751-0.0372 0.05443-0.0572 0.12747-0.02 0.07304-0.02 0.15158 0 0.09508 0.0462 0.14607 0.0462 0.05099 0.13091 0.05099 0.0662 0 0.11989-0.03169 0.0538-0.03169 0.0916-0.08819zm0.87437-0.19913q-0.10611 0.0041-0.18879 0.01654-0.082 0.01171-0.13574 0.03445-0.0558 0.02274-0.0847 0.06201-0.0289 0.03858-0.0289 0.09646 0 0.04961 0.0338 0.07579t0.10473 0.02618q0.0627 0 0.12747-0.02756 0.0655-0.02825 0.12196-0.06752zm-0.0751 0.32384q-0.0186 0.01102-0.051 0.03169-0.0317 0.01998-0.0648 0.03445-0.0351 0.01585-0.0785 0.02618-0.0434 0.01102-0.0999 0.01102-0.0916 0-0.14883-0.05305-0.0572-0.05374-0.0572-0.13987 0-0.09164 0.04-0.15434 0.0406-0.06339 0.11989-0.10335 0.0779-0.03927 0.18741-0.0565 0.11024-0.01791 0.2508-0.02205 4e-3 -0.01929 7e-3 -0.03307 3e-3 -0.01447 3e-3 -0.02963 0-0.03307-0.0131-0.05374t-0.0372-0.03307-0.0565-0.01654q-0.0317-0.0048-0.0703-0.0048-0.0586 0-0.13367 0.01929-0.0751 0.0186-0.12195 0.03721h-7e-3l0.0255-0.12954q0.0393-0.01033 0.11507-0.02343 0.0758-0.01309 0.14538-0.01309 0.14332 0 0.21497 0.04479 0.0717 0.04479 0.0717 0.14194 0 0.0186-3e-3 0.03996-3e-3 0.02067-7e-3 0.03927l-0.12058 0.52228h-0.12885zm1.2313-0.99012-0.24805 1.0721h-0.12953l0.0186-0.08062q-0.0875 0.05994-0.14125 0.08062-0.053 0.02136-0.11575 0.02136-0.10887 0-0.17295-0.0689-0.0634-0.0689-0.0634-0.2005 0-0.11093 0.0344-0.20946 0.0345-0.09922 0.0937-0.17363 0.0586-0.07373 0.13849-0.11644 0.0799-0.04341 0.1695-0.04341 0.0613 0 0.113 0.01309t0.0965 0.03927l0.0772-0.33348zm-0.23151 0.44097q-0.0462-0.02412-0.0909-0.03514-0.0441-0.01171-0.0944-0.01171-0.0716 0-0.12815 0.03445-0.0558 0.03445-0.0958 0.0944-0.0365 0.05443-0.0565 0.13091-0.0193 0.07648-0.0193 0.14814 0 0.08406 0.0358 0.12885 0.0365 0.0441 0.11782 0.0441 0.0579 0 0.11782-0.02894 0.0606-0.02894 0.11163-0.06339z" stroke-linecap="round" stroke-linejoin="round" stroke-width=".19844" style="paint-order:markers stroke fill" aria-label="Load"/>
  <g transform="translate(133.24 104.26)" stroke-width=".19844">
   <title>Resistor_US</title>
   <path d="m86.65-34.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-34.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.688-37.721a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-35.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-35.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-36.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-36.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-37.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.65-38.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <title>Resistor_US</title>
  </g>
  <path d="m223.59 67.684a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09766h2.6309a0.099218 0.099218 0 0 0 0.0996-0.09766 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m224.9 65.551a0.099218 0.099218 0 0 0-0.0996 0.09961v2a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0976-0.09961v-2a0.099218 0.099218 0 0 0-0.0976-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m224.9 68.551a0.099218 0.099218 0 0 0-0.0996 0.09961v2a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0976-0.09961v-2a0.099218 0.099218 0 0 0-0.0976-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m223.59 68.418a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h2.6309a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <g stroke-linecap="round" stroke-linejoin="round">
   <path d="m165 51.945h34.988v23.055h-34.988z" fill="#e1e1e1" stop-color="#000000"/>
   <path d="m165 51.846a0.099228 0.099228 0 0 0-0.0996 0.09961v23.055a0.099228 0.099228 0 0 0 0.0996 0.099609h34.988a0.099228 0.099228 0 0 0 0.09961-0.099609v-23.055a0.099228 0.099228 0 0 0-0.0996-0.09961zm0.0996 0.19922h34.789v22.855h-34.789z" fill="#4b4b4b" stop-color="#000000"/>
   <path d="m166.99 54h22v19h-22z" fill="#c7c7c7" stop-color="#000000"/>
   <path d="m166.99 53.9a0.099228 0.099228 0 0 0-0.09961 0.099609v19a0.099228 0.099228 0 0 0 0.0996 0.09961h22a0.099228 0.099228 0 0 0 0.09962-0.09961v-19a0.099228 0.099228 0 0 0-0.0996-0.09961zm0.0996 0.19922h21.801v18.801h-21.801z" fill="#4b4b4b" stop-color="#000000"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".19844" aria-label="I/O
pad">
   <path d="m186.23 65.683h-0.40653l0.0227-0.09991h0.13436l0.19155-0.82613h-0.13436l0.0227-0.09991h0.40652l-0.0227 0.09991h-0.13436l-0.19155 0.82613h0.13436zm0.90054-1.0721-0.72278 1.2816h-0.12333l0.72071-1.2816zm0.99977 0.40928q0 0.13367-0.0406 0.25769-0.04 0.12402-0.11645 0.21842-0.0786 0.09715-0.18879 0.15296-0.11024 0.05512-0.24873 0.05512-0.18328 0-0.28664-0.09991-0.10335-0.1006-0.10335-0.28525 0-0.14056 0.0413-0.26252t0.1192-0.21773q0.0758-0.09233 0.18742-0.14745 0.11231-0.05581 0.24598-0.05581 0.18259 0 0.28663 0.09991 0.10404 0.09922 0.10404 0.28456zm-0.26114 0.4079q0.0579-0.07855 0.0875-0.17501 0.0296-0.09715 0.0296-0.2136 0-0.14056-0.071-0.21566-0.0703-0.07579-0.19706-0.07579-0.0985 0-0.17777 0.04547-0.0792 0.04479-0.13643 0.12196-0.0551 0.07579-0.0848 0.17639-0.0296 0.09991-0.0296 0.20602 0 0.14194 0.0703 0.21842 0.071 0.07579 0.19843 0.07579 0.0972 0 0.17639-0.04479 0.0799-0.04479 0.13436-0.1192z"/>
   <path d="m186.51 67.273q0 0.11438-0.0358 0.21497-0.0351 0.1006-0.0937 0.17088-0.0592 0.07235-0.1378 0.11438-0.0786 0.04134-0.16743 0.04134-0.062 0-0.11438-0.01447-0.0517-0.01378-0.0944-0.04065l-0.0744 0.32384h-0.12953l0.24322-1.0535h0.12953l-0.0186 0.08061q0.0641-0.04479 0.12609-0.07304 0.062-0.02894 0.13712-0.02894 0.11231 0 0.17087 0.06959 0.0593 0.06959 0.0593 0.19499zm-0.13574 0.0248q0-0.08199-0.0358-0.12609-0.0358-0.04479-0.11437-0.04479-0.0572 0-0.11852 0.02825-0.0613 0.02825-0.11437 0.06408l-0.1006 0.43615q0.0448 0.02412 0.0854 0.03583t0.0985 0.01171q0.071 0 0.12747-0.03445 0.0572-0.03445 0.0944-0.08957 0.0393-0.05788 0.0586-0.12885 0.0193-0.07097 0.0193-0.15227zm0.79651 0.09577q-0.10611 0.0041-0.18879 0.01654-0.082 0.01171-0.13574 0.03445-0.0558 0.02274-0.0847 0.06201-0.0289 0.03859-0.0289 0.09646 0 0.04961 0.0338 0.07579t0.10473 0.02618q0.0627 0 0.12747-0.02756 0.0655-0.02825 0.12196-0.06752zm-0.0751 0.32384q-0.0186 0.01102-0.051 0.03169-0.0317 0.01998-0.0648 0.03445-0.0351 0.01585-0.0785 0.02618-0.0434 0.01102-0.0999 0.01102-0.0916 0-0.14882-0.05305-0.0572-0.05374-0.0572-0.13987 0-0.09164 0.04-0.15434 0.0406-0.06339 0.11989-0.10335 0.0779-0.03927 0.18741-0.0565 0.11024-0.01792 0.2508-0.02205 4e-3 -0.01929 7e-3 -0.03307 3e-3 -0.01447 3e-3 -0.02963 0-0.03307-0.0131-0.05374t-0.0372-0.03307-0.0565-0.01654q-0.0317-0.0048-0.0703-0.0048-0.0586 0-0.13367 0.01929-0.0751 0.0186-0.12195 0.03721h-7e-3l0.0255-0.12954q0.0393-0.01034 0.11507-0.02343 0.0758-0.01309 0.14538-0.01309 0.14332 0 0.21497 0.04479 0.0717 0.04479 0.0717 0.14194 0 0.0186-3e-3 0.03996-3e-3 0.02067-7e-3 0.03927l-0.12058 0.52228h-0.12885zm1.2313-0.99012-0.24805 1.0721h-0.12953l0.0186-0.08061q-0.0875 0.05994-0.14125 0.08061-0.053 0.02136-0.11575 0.02136-0.10887 0-0.17295-0.0689-0.0634-0.0689-0.0634-0.2005 0-0.11093 0.0345-0.20946 0.0344-0.09922 0.0937-0.17363 0.0586-0.07372 0.13849-0.11644 0.0799-0.04341 0.1695-0.04341 0.0613 0 0.113 0.01309t0.0965 0.03927l0.0772-0.33348zm-0.23151 0.44097q-0.0462-0.02412-0.0909-0.03514-0.0441-0.01171-0.0944-0.01171-0.0717 0-0.12815 0.03445-0.0558 0.03445-0.0958 0.09439-0.0365 0.05443-0.0565 0.13091-0.0193 0.07648-0.0193 0.14814 0 0.08406 0.0358 0.12885 0.0365 0.0441 0.11782 0.0441 0.0579 0 0.11782-0.02894 0.0606-0.02894 0.11163-0.06339z"/>
  </g>
  <path d="m180.99 62.9a0.099218 0.099218 0 0 0-0.09961 0.099609 0.099218 0.099218 0 0 0 0.0996 0.09961h6a0.099218 0.099218 0 0 0 0.09962-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m168.33 55.979h-0.60083v-0.1819h0.16812v-0.66215h-0.16812v-0.1819h0.60083v0.1819h-0.16812v0.66215h0.16812zm0.67937 0.01998q-0.11438 0-0.21153-0.03376-0.0965-0.03376-0.16605-0.1006-0.0696-0.06684-0.10818-0.16674-0.0379-0.09991-0.0379-0.23082 0-0.12196 0.0365-0.22118 0.0365-0.09922 0.10611-0.17019 0.0668-0.06821 0.16537-0.10542 0.0992-0.03721 0.21635-0.03721 0.0648 0 0.11644 0.0076 0.0524 0.0069 0.0965 0.0186 0.0462 0.01309 0.0834 0.02963 0.0379 0.01585 0.0661 0.02963v0.24874h-0.0303q-0.0193-0.01654-0.0489-0.03927-0.0289-0.02274-0.0661-0.04479-0.0379-0.02205-0.082-0.03721t-0.0944-0.01516q-0.0558 0-0.10611 0.01791-0.0503 0.01723-0.093 0.05788-0.0407 0.03927-0.0661 0.10404-0.0248 0.06477-0.0248 0.1571 0 0.09646 0.0269 0.16123 0.0276 0.06477 0.0689 0.10198 0.042 0.0379 0.0937 0.05443 0.0517 0.01585 0.10198 0.01585 0.0482 0 0.0951-0.01447 0.0476-0.01447 0.0875-0.03927 0.0338-0.01998 0.0627-0.04272t0.0475-0.03927h0.0276v0.24529q-0.0386 0.01723-0.0737 0.03238-0.0351 0.01516-0.0737 0.02618-0.0503 0.01447-0.0944 0.02205-0.0441 0.0076-0.12127 0.0076zm1.7784-0.01998h-0.24805v-0.08062q-0.0641 0.05237-0.11989 0.07717-0.0558 0.0248-0.12885 0.0248-0.14124 0-0.22599-0.10886-0.0847-0.10886-0.0847-0.29352 0-0.09853 0.0282-0.17432 0.0289-0.07648 0.0786-0.13091 0.0469-0.05168 0.11368-0.07993 0.0668-0.02894 0.13367-0.02894 0.0696 0 0.11369 0.01516 0.0448 0.01447 0.0916 0.03721v-0.32935h0.24805zm-0.24805-0.2136v-0.37965q-0.0262-0.01102-0.0551-0.01585-0.0289-0.0048-0.0531-0.0048-0.0978 0-0.14676 0.06132-0.0489 0.06063-0.0489 0.16881 0 0.11369 0.0393 0.16536 0.0393 0.05099 0.12609 0.05099 0.0338 0 0.0717-0.0124 0.0379-0.01309 0.0668-0.03376zm0.73036 0.2136h-0.24805v-0.77377h0.24805zm7e-3 -0.88401h-0.26183v-0.1881h0.26183zm0.98943 0.54295h-0.56775q6e-3 0.09095 0.0689 0.13918 0.0641 0.04823 0.1881 0.04823 0.0785 0 0.15228-0.02825 0.0737-0.02825 0.11644-0.06063h0.0276v0.19913q-0.0841 0.03376-0.15847 0.04892-0.0744 0.01516-0.16468 0.01516-0.23289 0-0.35691-0.10473-0.12402-0.10473-0.12402-0.29834 0-0.19155 0.11713-0.30317 0.11782-0.11231 0.32246-0.11231 0.18879 0 0.28388 0.09577 0.0951 0.09508 0.0951 0.27423zm-0.24667-0.14538q-2e-3 -0.07786-0.0386-0.11713-0.0365-0.03927-0.11369-0.03927-0.0717 0-0.11782 0.03721-0.0462 0.03721-0.0517 0.1192z" stroke-linecap="round" stroke-linejoin="round" stroke-width=".19844" aria-label="IC die"/>
  <path d="m166.66 52.712q0 0.0689-0.0241 0.13505-0.0241 0.06546-0.0689 0.11024-0.0613 0.06063-0.13712 0.09164-0.0751 0.03101-0.18741 0.03101h-0.16468v0.33417h-0.26458v-1.0259h0.43546q0.0978 0 0.16467 0.01723 0.0675 0.01654 0.1192 0.0503 0.062 0.04065 0.0944 0.10404 0.0331 0.06339 0.0331 0.15227zm-0.27354 0.0062q0-0.04341-0.0234-0.07441-0.0234-0.03169-0.0544-0.0441-0.0413-0.01654-0.0806-0.01791-0.0393-0.0021-0.10473-0.0021h-0.0455v0.3073h0.0758q0.0675 0 0.11094-0.0083 0.0441-0.0083 0.0737-0.03307 0.0255-0.02205 0.0365-0.05237 0.0117-0.03101 0.0117-0.0751zm0.91571 0.49403v-0.16123q-0.0503 0.0041-0.10887 0.01171-0.0586 0.0069-0.0889 0.01654-0.0372 0.01171-0.0572 0.03445-0.0193 0.02205-0.0193 0.05857 0 0.02412 4e-3 0.03927 4e-3 0.01516 0.0207 0.02894 0.0159 0.01378 0.0379 0.02067 0.0221 0.0062 0.0689 0.0062 0.0372 0 0.0751-0.01516 0.0386-0.01516 0.0675-0.03996zm0 0.11989q-0.02 0.01516-0.0496 0.03652t-0.0558 0.03376q-0.0365 0.01654-0.0758 0.02412-0.0393 0.0083-0.0861 0.0083-0.11024 0-0.18466-0.06821-0.0744-0.06821-0.0744-0.17432 0-0.08475 0.0379-0.13849 0.0379-0.05374 0.10749-0.08475 0.0689-0.03101 0.17088-0.0441 0.10197-0.01309 0.21153-0.01929v-0.0041q0-0.06408-0.0524-0.08819-0.0524-0.02481-0.15434-0.02481-0.0613 0-0.13091 0.02205-0.0696 0.02136-0.0999 0.03307h-0.0227v-0.18672q0.0393-0.01034 0.12747-0.02412 0.0889-0.01447 0.17777-0.01447 0.21153 0 0.30523 0.06546 0.0944 0.06477 0.0944 0.20395v0.52641h-0.24598zm0.87712 0.10266q-0.10129 0-0.18535-0.02412-0.0834-0.02412-0.14538-0.07441-0.0613-0.0503-0.0951-0.12678t-0.0338-0.17914q0-0.10818 0.0358-0.18672 0.0365-0.07855 0.10129-0.13022 0.0627-0.04892 0.14469-0.07166 0.082-0.02274 0.17019-0.02274 0.0792 0 0.14607 0.01723 0.0668 0.01722 0.12471 0.04479v0.21153h-0.0351q-0.0145-0.0124-0.0351-0.02894-0.02-0.01654-0.0496-0.03238-0.0282-0.01516-0.062-0.0248-0.0338-0.01034-0.0785-0.01034-0.0992 0-0.15297 0.06339-0.053 0.0627-0.053 0.17088 0 0.11162 0.0544 0.1695 0.0551 0.05788 0.15572 0.05788 0.0469 0 0.0841-0.01034 0.0379-0.01102 0.0627-0.02549 0.0234-0.01378 0.0413-0.02894t0.0331-0.02963h0.0351v0.21153q-0.0586 0.02756-0.12264 0.04341-0.0634 0.01654-0.14056 0.01654zm1.2485-0.02067h-0.2887l-0.21704-0.33693-0.0675 0.08199v0.25494h-0.24805v-1.0721h0.24805v0.6401l0.26734-0.34175h0.28594l-0.27836 0.33348zm0.59394-0.20188v-0.16123q-0.0503 0.0041-0.10887 0.01171-0.0586 0.0069-0.0889 0.01654-0.0372 0.01171-0.0572 0.03445-0.0193 0.02205-0.0193 0.05857 0 0.02412 4e-3 0.03927 4e-3 0.01516 0.0207 0.02894 0.0159 0.01378 0.0379 0.02067 0.022 0.0062 0.0689 0.0062 0.0372 0 0.0751-0.01516 0.0386-0.01516 0.0675-0.03996zm0 0.11989q-0.02 0.01516-0.0496 0.03652t-0.0558 0.03376q-0.0365 0.01654-0.0758 0.02412-0.0393 0.0083-0.0861 0.0083-0.11025 0-0.18466-0.06821-0.0744-0.06821-0.0744-0.17432 0-0.08475 0.0379-0.13849 0.0379-0.05374 0.10749-0.08475 0.0689-0.03101 0.17087-0.0441 0.10198-0.01309 0.21153-0.01929v-0.0041q0-0.06408-0.0524-0.08819-0.0524-0.02481-0.15434-0.02481-0.0613 0-0.13092 0.02205-0.0696 0.02136-0.0999 0.03307h-0.0227v-0.18672q0.0393-0.01034 0.12747-0.02412 0.0889-0.01447 0.17776-0.01447 0.21153 0 0.30524 0.06546 0.0944 0.06477 0.0944 0.20395v0.52641h-0.24597zm1.2264-0.0069q0 0.10886-0.031 0.18328-0.031 0.07441-0.0868 0.11644-0.0558 0.04272-0.13505 0.06132-0.0786 0.01929-0.17777 0.01929-0.0806 0-0.15916-0.0096-0.0779-0.0096-0.13505-0.02343v-0.19364h0.0303q0.0455 0.01791 0.11093 0.03238 0.0655 0.01516 0.11713 0.01516 0.0689 0 0.11162-0.01309 0.0434-0.0124 0.0661-0.03583 0.0214-0.02205 0.031-0.0565 0.01-0.03445 0.01-0.08268v-0.01447q-0.0448 0.03652-0.0992 0.05788t-0.12126 0.02136q-0.16261 0-0.25081-0.09784t-0.0882-0.29766q0-0.09577 0.0269-0.16536 0.0269-0.06959 0.0758-0.12127 0.0455-0.04823 0.11162-0.0751 0.0668-0.02687 0.13643-0.02687 0.0627 0 0.11369 0.01516 0.0517 0.01447 0.0937 0.04065l9e-3 -0.03445h0.24047zm-0.24805-0.15503v-0.35071q-0.0214-9e-3 -0.0524-0.01378-0.031-0.0055-0.0558-0.0055-0.0978 0-0.14677 0.0565-0.0489 0.05581-0.0489 0.15641 0 0.11162 0.0413 0.15572 0.042 0.0441 0.12402 0.0441 0.0372 0 0.073-0.01171t0.0655-0.03101zm1.2444-0.09715h-0.56775q6e-3 0.09095 0.0689 0.13918 0.0641 0.04823 0.1881 0.04823 0.0786 0 0.15227-0.02825 0.0737-0.02825 0.11645-0.06063h0.0276v0.19913q-0.0841 0.03376-0.15847 0.04892-0.0744 0.01516-0.16468 0.01516-0.23289 0-0.35691-0.10473t-0.12402-0.29834q0-0.19155 0.11713-0.30317 0.11782-0.11231 0.32246-0.11231 0.18879 0 0.28387 0.09577 0.0951 0.09508 0.0951 0.27423zm-0.24667-0.14538q-2e-3 -0.07786-0.0386-0.11713-0.0365-0.03927-0.11369-0.03927-0.0717 0-0.11782 0.03721-0.0462 0.03721-0.0517 0.1192z" stroke-linecap="round" stroke-linejoin="round" stroke-width=".19844" aria-label="Package"/>
  <g stroke-linecap="round" stroke-linejoin="round">
   <path d="m186.99 62h2v2h-2z" fill="#fff" stop-color="#000000"/>
   <path d="m186.99 61.9a0.099228 0.099228 0 0 0-0.09961 0.099609v2a0.099228 0.099228 0 0 0 0.0996 0.09961h2a0.099228 0.099228 0 0 0 0.09962-0.09961v-2a0.099228 0.099228 0 0 0-0.0996-0.09961zm0.0996 0.19922h1.8008v1.8008h-1.8008z" stop-color="#000000"/>
  </g>
  <path d="m197.99 61.9a0.099228 0.099228 0 0 0-0.09961 0.099609v2a0.099228 0.099228 0 0 0 0.0996 0.09961h2a0.099228 0.099228 0 0 0 0.09962-0.09961v-2a0.099228 0.099228 0 0 0-0.0996-0.09961zm0.0996 0.19922h1.8008v1.8008h-1.8008z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m193.49 60.652c-2.0254-0.0014-4.0508 0.75786-5.5703 2.2773a0.099218 0.099218 0 0 0 0 0.14062 0.099218 0.099218 0 0 0 0.14062 0c2.961-2.961 7.8983-2.962 10.859 0.0098a0.099218 0.099218 0 0 0 0.14062 2e-3 0.099218 0.099218 0 0 0 0-0.14062c-1.5194-1.5249-3.5449-2.2877-5.5703-2.2891z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m191.66 59.917q-0.0668 0.04479-0.13987 0.06408-0.073 0.0186-0.17983 0.0186h-0.37689l0.23633-1.0259h0.2949q0.11231 0 0.16674 0.0076 0.0551 0.0076 0.1006 0.03514 0.0379 0.02343 0.0565 0.05994 0.0193 0.03583 0.0193 0.07993 0 0.08888-0.0503 0.1571-0.0503 0.06821-0.13918 0.10542v0.0055q0.0827 0.0186 0.12609 0.06959 0.0441 0.05099 0.0441 0.13091 0 0.08751-0.0441 0.16605-0.0434 0.07786-0.11438 0.12609zm0.0296-0.72278q0-0.02894-0.01-0.04754-0.01-0.01929-0.0276-0.03169-0.0289-0.01929-0.0723-0.02412-0.0434-0.0055-0.11231-0.0055h-0.15572l-0.0703 0.30455h0.17914q0.0593 0 0.10336-0.0083 0.0441-9e-3 0.0772-0.02756 0.0427-0.02481 0.0654-0.07028 0.0227-0.04616 0.0227-0.08957zm-0.0152 0.44028q0-0.03858-0.0131-0.06201-0.0131-0.02412-0.0469-0.04479-0.0276-0.01723-0.071-0.02274-0.0427-0.0055-0.1192-0.0055h-0.20739l-0.0903 0.38861h0.18811q0.0916 0 0.14882-0.0096 0.0579-0.01033 0.0999-0.03583 0.0544-0.03238 0.0827-0.08819 0.0283-0.0565 0.0283-0.11989zm1.0032-0.13229q0 0.10335-0.0317 0.19844-0.0317 0.09509-0.0896 0.16536-0.06 0.07304-0.1385 0.11438-0.0785 0.04065-0.18327 0.04065-0.13712 0-0.21429-0.07786-0.0765-0.07855-0.0765-0.21635 0-0.10335 0.031-0.19706 0.0317-0.09371 0.091-0.16674 0.0572-0.07028 0.13987-0.11231 0.0834-0.04203 0.1819-0.04203 0.13298 0 0.21153 0.07579 0.0785 0.07579 0.0785 0.21773zm-0.21084 0.29077q0.0372-0.05512 0.0565-0.12747 0.02-0.07235 0.02-0.15296 0-0.09646-0.0462-0.14607-0.0462-0.04961-0.13022-0.04961-0.0668 0-0.11989 0.03238-0.0531 0.03169-0.0916 0.0875-0.0372 0.05443-0.0572 0.12747-0.02 0.07304-0.02 0.15158 0 0.09508 0.0462 0.14607 0.0462 0.05099 0.13092 0.05099 0.0661 0 0.11989-0.03169 0.0537-0.03169 0.0916-0.08819zm1.0818-0.38723q0 0.01654-3e-3 0.04479t-8e-3 0.04961l-0.11575 0.49954h-0.12954l0.10129-0.43822q8e-3 -0.03652 0.0124-0.06339 5e-3 -0.02756 5e-3 -0.05443 0-0.05788-0.0289-0.08682-0.0282-0.02963-0.10266-0.02963-0.0524 0-0.11576 0.02894-0.0627 0.02894-0.12264 0.0689l-0.13298 0.57464h-0.12954l0.17777-0.76963h0.12953l-0.02 0.08544q0.0737-0.05168 0.13781-0.07924 0.0648-0.02756 0.13298-0.02756 0.10059 0 0.1564 0.05099 0.0565 0.0503 0.0565 0.14607zm0.99426-0.47818-0.24805 1.0721h-0.12953l0.0186-0.08062q-0.0875 0.05994-0.14125 0.08062-0.0531 0.02136-0.11575 0.02136-0.10887 0-0.17295-0.0689-0.0634-0.0689-0.0634-0.2005 0-0.11093 0.0344-0.20946 0.0345-0.09922 0.0937-0.17363 0.0586-0.07373 0.13849-0.11644 0.0799-0.04341 0.1695-0.04341 0.0613 0 0.113 0.01309t0.0965 0.03927l0.0772-0.33348zm-0.23151 0.44097q-0.0462-0.02412-0.0909-0.03514-0.0441-0.01171-0.0944-0.01171-0.0717 0-0.12816 0.03445-0.0558 0.03445-0.0958 0.09439-0.0365 0.05443-0.0565 0.13091-0.0193 0.07648-0.0193 0.14814 0 0.08406 0.0358 0.12885 0.0365 0.0441 0.11782 0.0441 0.0579 0 0.11782-0.02894 0.0606-0.02894 0.11162-0.06339zm1.3746-0.13849-0.3576 0.76963h-0.12127l-0.0772-0.59462-0.31764 0.59462h-0.11989l-0.0482-0.76963h0.13229l0.02 0.59531 0.31419-0.59531h0.10817l0.0751 0.59531 0.25631-0.59531zm0.39619-0.2632-0.031 0.13436h-0.14607l0.031-0.13436zm-0.0689 0.2632-0.17776 0.76963h-0.12954l0.17777-0.76963zm0.70005 0.13643h-7e-3q-0.0276-0.0069-0.0517-0.0096-0.0234-0.0034-0.0572-0.0034-0.0648 0-0.12885 0.02963-0.0634 0.02894-0.12195 0.07028l-0.12403 0.54639h-0.13091l0.1757-0.76963h0.13091l-0.0262 0.11369q0.0916-0.06408 0.15503-0.08888 0.0641-0.02481 0.12265-0.02481 0.0338 0 0.0489 0.0021 0.0152 0.0014 0.0441 0.0062zm0.60358 0.16468q3e-3 -0.01998 5e-3 -0.03376 1e-3 -0.01378 1e-3 -0.03032 0-0.07373-0.0406-0.11507-0.04-0.04134-0.12885-0.04134-0.0978 0-0.17363 0.06063-0.0758 0.06063-0.10267 0.15985zm-0.25907 0.48645q-0.15986 0-0.25081-0.0751-0.091-0.0751-0.091-0.2198 0-0.21153 0.13367-0.36242 0.13367-0.15158 0.33073-0.15158 0.13091 0 0.20051 0.06546 0.0696 0.06477 0.0696 0.18259 0 0.02067-6e-3 0.06546t-0.0186 0.10404h-0.56706q-4e-3 0.01998-6e-3 0.03927-1e-3 0.01929-1e-3 0.03583 0 0.09715 0.0593 0.15296 0.0593 0.05512 0.16812 0.05512 0.0758 0 0.15571-0.02963 0.0806-0.02963 0.13505-0.06684h8e-3l-0.0283 0.13987q-0.0344 0.0124-0.062 0.02274-0.0276 0.01033-0.0703 0.02067t-0.0758 0.01585q-0.0331 0.0055-0.0827 0.0055z" stroke-linecap="round" stroke-linejoin="round" stroke-width=".19844" style="paint-order:markers stroke fill" aria-label="Bondwire"/>
  <g stroke-linecap="round" stroke-linejoin="round">
   <path d="m173.09 61h7.8016v4h-7.8016z" fill="#fff" stop-color="#000000"/>
   <path d="m173.09 60.9a0.099228 0.099228 0 0 0-0.09961 0.099609v4a0.099228 0.099228 0 0 0 0.0996 0.09961h7.8008a0.099228 0.099228 0 0 0 0.09962-0.09961v-4a0.099228 0.099228 0 0 0-0.0996-0.09961zm0.0996 0.19922h7.6016v3.8008h-7.6016z" stop-color="#000000"/>
  </g>
  <path d="m176.25 63.513h-0.64906v-1.0259h0.13643v0.90468h0.51263zm1.0032-0.51194q0 0.13987-0.0613 0.25356-0.0606 0.11369-0.16192 0.17639-0.0703 0.04341-0.1571 0.0627-0.0861 0.01929-0.22738 0.01929h-0.25907v-1.0259h0.25632q0.1502 0 0.2384 0.02205 0.0889 0.02136 0.1502 0.05926 0.10474 0.06546 0.1633 0.17432 0.0586 0.10886 0.0586 0.25838zm-0.14263-0.0021q0-0.12058-0.042-0.20326-0.042-0.08268-0.1254-0.13022-0.0606-0.03445-0.12885-0.04754-0.0682-0.01378-0.16329-0.01378h-0.12816v0.79168h0.12816q0.0985 0 0.17156-0.01447 0.0737-0.01447 0.13505-0.05374 0.0765-0.04892 0.11438-0.12885 0.0386-0.07993 0.0386-0.19982zm1.1279-0.39412q0.0627 0.0689 0.0958 0.16881 0.0338 0.09991 0.0338 0.22669 0 0.12678-0.0344 0.22738-0.0338 0.09991-0.0951 0.16674-0.0634 0.06959-0.15021 0.10473-0.0861 0.03514-0.19706 0.03514-0.10818 0-0.19706-0.03583-0.0882-0.03583-0.15021-0.10404-0.062-0.06821-0.0958-0.16743-0.0331-0.09922-0.0331-0.22669 0-0.1254 0.0331-0.22462 0.0331-0.09991 0.0965-0.17088 0.0606-0.06752 0.15021-0.10335 0.0903-0.03583 0.19637-0.03583 0.11024 0 0.19775 0.03652 0.0882 0.03583 0.14952 0.10266zm-0.0124 0.3955q0-0.19982-0.0896-0.30799-0.0896-0.10886-0.2446-0.10886-0.15641 0-0.24598 0.10886-0.0889 0.10818-0.0889 0.30799 0 0.20188 0.0909 0.30937 0.091 0.1068 0.24391 0.1068 0.15296 0 0.24322-0.1068 0.0909-0.10749 0.0909-0.30937z" stroke-linecap="round" stroke-linejoin="round" stroke-width=".19844" aria-label="LDO"/>
  <g stroke-linecap="round" stroke-linejoin="round">
   <path d="m199.99 62.445h24.894v1h-24.894z" fill="#e1e1e1" stop-color="#000000"/>
   <path d="m199.99 62.346a0.09901 0.09901 0 0 0-0.0996 0.09961v1a0.09901 0.09901 0 0 0 0.0996 0.09961h24.895a0.09901 0.09901 0 0 0 0.0977-0.09961v-1a0.09901 0.09901 0 0 0-0.0977-0.09961zm0.0996 0.19922h24.695v0.80078h-24.695z" stop-color="#000000"/>
  </g>
 </g>
 <script id="JessyInk" ns1:version="1.5.5">// Copyright 2008, 2009 Hannes Hochreiner
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.

// Set onload event handler.
window.onload = jessyInkInit;

// Creating a namespace dictionary. The standard Inkscape namespaces are taken from inkex.py.
var NSS = new Object();
NSS['sodipodi']='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd';
NSS['cc']='http://web.resource.org/cc/';
NSS['svg']='http://www.w3.org/2000/svg';
NSS['dc']='http://purl.org/dc/elements/1.1/';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['inkscape']='http://www.inkscape.org/namespaces/inkscape';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['jessyink']='https://launchpad.net/jessyink';

// Keycodes.
var LEFT_KEY = 37; // cursor left keycode
var UP_KEY = 38; // cursor up keycode
var RIGHT_KEY = 39; // cursor right keycode
var DOWN_KEY = 40; // cursor down keycode
var PAGE_UP_KEY = 33; // page up keycode
var PAGE_DOWN_KEY = 34; // page down keycode
var HOME_KEY = 36; // home keycode
var END_KEY = 35; // end keycode
var ENTER_KEY = 13; // next slide
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

// Presentation modes.
var SLIDE_MODE = 1;
var INDEX_MODE = 2;
var DRAWING_MODE = 3;

// Mouse handler actions.
var MOUSE_UP = 1;
var MOUSE_DOWN = 2;
var MOUSE_MOVE = 3;
var MOUSE_WHEEL = 4;

// Parameters.
var ROOT_NODE = document.getElementsByTagNameNS(NSS["svg"], "svg")[0];
var HEIGHT = 0;
var WIDTH = 0;
var INDEX_COLUMNS_DEFAULT = 4;
var INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
var INDEX_OFFSET = 0;
var STATE_START = -1;
var STATE_END = -2;
var BACKGROUND_COLOR = null;
var slides = new Array();

// Initialisation.
var currentMode = SLIDE_MODE;
var masterSlide = null;
var activeSlide = 0;
var activeEffect = 0;
var timeStep = 30; // 40 ms equal 25 frames per second.
var lastFrameTime = null;
var processingEffect = false;
var transCounter = 0;
var effectArray = 0;
var defaultTransitionInDict = new Object();
defaultTransitionInDict["name"] = "appear";
var defaultTransitionOutDict = new Object();
defaultTransitionOutDict["name"] = "appear";
var jessyInkInitialised = false;

// Initialise char and key code dictionaries.
var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

// Initialise mouse handler dictionary.
var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();

var progress_bar_visible = false;
var timer_elapsed = 0;
var timer_start = timer_elapsed;
var timer_duration = 15; // 15 minutes

var history_counter = 0;
var history_original_elements = new Array();
var history_presentation_elements = new Array();

var mouse_original_path = null;
var mouse_presentation_path = null;
var mouse_last_x = -1;
var mouse_last_y = -1;
var mouse_min_dist_sqr = 3 * 3;
var path_colour = "red";
var path_width_default = 3;
var path_width = path_width_default;
var path_paint_width = path_width;

var number_of_added_slides = 0;

/** Initialisation function.
 *  The whole presentation is set-up in this function.
 */
function jessyInkInit()
{
    // Make sure we only execute this code once. Double execution can occur if the onload event handler is set
    // in the main svg tag as well (as was recommended in earlier versions). Executing this function twice does
    // not lead to any problems, but it takes more time.
    if (jessyInkInitialised)
        return;

    // Making the presentation scalable.
    var VIEWBOX = ROOT_NODE.getAttribute("viewBox");

    if (VIEWBOX)
    {
        WIDTH = ROOT_NODE.viewBox.animVal.width;
        HEIGHT = ROOT_NODE.viewBox.animVal.height;
    }
    else
    {
        HEIGHT = parseFloat(ROOT_NODE.getAttribute("height"));
        WIDTH = parseFloat(ROOT_NODE.getAttribute("width"));
        ROOT_NODE.setAttribute("viewBox", "0 0 " + WIDTH + " " + HEIGHT);
    }

    ROOT_NODE.setAttribute("width", "100%");
    ROOT_NODE.setAttribute("height", "100%");

    // Setting the background color.
    var namedViews = document.getElementsByTagNameNS(NSS["sodipodi"], "namedview");

    for (var counter = 0; counter &lt; namedViews.length; counter++)
    {
        if (namedViews[counter].hasAttribute("id") &amp;&amp; namedViews[counter].hasAttribute("pagecolor"))
        {
            if (namedViews[counter].getAttribute("id") == "base")
            {
                BACKGROUND_COLOR = namedViews[counter].getAttribute("pagecolor");
                var newAttribute = "background-color:" + BACKGROUND_COLOR + ";";

                if (ROOT_NODE.hasAttribute("style"))
                    newAttribute += ROOT_NODE.getAttribute("style");

                ROOT_NODE.setAttribute("style", newAttribute);
            }
        }
    }

    // Defining clip-path.
    var defsNodes = document.getElementsByTagNameNS(NSS["svg"], "defs");

    if (defsNodes.length &gt; 0)
    {
        var existingClipPath = document.getElementById("jessyInkSlideClipPath");

        if (!existingClipPath)
        {
            var rectNode = document.createElementNS(NSS["svg"], "rect");
            var clipPath = document.createElementNS(NSS["svg"], "clipPath");

            rectNode.setAttribute("x", 0);
            rectNode.setAttribute("y", 0);
            rectNode.setAttribute("width", WIDTH);
            rectNode.setAttribute("height", HEIGHT);

            clipPath.setAttribute("id", "jessyInkSlideClipPath");
            clipPath.setAttribute("clipPathUnits", "userSpaceOnUse");

            clipPath.appendChild(rectNode);
            defsNodes[0].appendChild(clipPath);
        }
    }

    // Making a list of the slide and finding the master slide.
    var nodes = document.getElementsByTagNameNS(NSS["svg"], "g");
    var tempSlides = new Array();
    var existingJessyInkPresentationLayer = null;

    for (var counter = 0; counter &lt; nodes.length; counter++)
    {
        if (nodes[counter].getAttributeNS(NSS["inkscape"], "groupmode") &amp;&amp; (nodes[counter].getAttributeNS(NSS["inkscape"], "groupmode") == "layer"))
        {
            if (nodes[counter].getAttributeNS(NSS["inkscape"], "label") &amp;&amp; nodes[counter].getAttributeNS(NSS["jessyink"], "masterSlide") == "masterSlide")
                masterSlide = nodes[counter];
            else if (nodes[counter].getAttributeNS(NSS["inkscape"], "label") &amp;&amp; nodes[counter].getAttributeNS(NSS["jessyink"], "presentationLayer") == "presentationLayer")
                existingJessyInkPresentationLayer = nodes[counter];
            else
                tempSlides.push(nodes[counter].getAttribute("id"));
        }
        else if (nodes[counter].getAttributeNS(NSS['jessyink'], 'element'))
        {
            handleElement(nodes[counter]);
        }
    }

    // Hide master slide set default transitions.
    if (masterSlide)
    {
        masterSlide.style.display = "none";

        if (masterSlide.hasAttributeNS(NSS["jessyink"], "transitionIn"))
            defaultTransitionInDict = propStrToDict(masterSlide.getAttributeNS(NSS["jessyink"], "transitionIn"));

        if (masterSlide.hasAttributeNS(NSS["jessyink"], "transitionOut"))
            defaultTransitionOutDict = propStrToDict(masterSlide.getAttributeNS(NSS["jessyink"], "transitionOut"));
    }

    if (existingJessyInkPresentationLayer != null)
    {
        existingJessyInkPresentationLayer.parentNode.removeChild(existingJessyInkPresentationLayer);
    }

    // Set start slide.
    var hashObj = new LocationHash(window.location.hash);

    activeSlide = hashObj.slideNumber;
    activeEffect = hashObj.effectNumber;

    if (activeSlide &lt; 0)
        activeSlide = 0;
    else if (activeSlide &gt;= tempSlides.length)
        activeSlide = tempSlides.length - 1;

    var originalNode = document.getElementById(tempSlides[counter]);

    var JessyInkPresentationLayer = document.createElementNS(NSS["svg"], "g");
    JessyInkPresentationLayer.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
    JessyInkPresentationLayer.setAttributeNS(NSS["inkscape"], "label", "JessyInk Presentation Layer");
    JessyInkPresentationLayer.setAttributeNS(NSS["jessyink"], "presentationLayer", "presentationLayer");
    JessyInkPresentationLayer.setAttribute("id", "jessyink_presentation_layer");
    JessyInkPresentationLayer.style.display = "inherit";
    ROOT_NODE.appendChild(JessyInkPresentationLayer);

    // Gathering all the information about the transitions and effects of the slides, set the background
    // from the master slide and substitute the auto-texts.
    for (var counter = 0; counter &lt; tempSlides.length; counter++)
    {
        var originalNode = document.getElementById(tempSlides[counter]);
        originalNode.style.display = "none";
        var node = suffixNodeIds(originalNode.cloneNode(true), "_" + counter);
        JessyInkPresentationLayer.appendChild(node);
        slides[counter] = new Object();
        slides[counter]["original_element"] = originalNode;
        slides[counter]["element"] = node;

        // Set build in transition.
        slides[counter]["transitionIn"] = new Object();

        var dict;

        if (node.hasAttributeNS(NSS["jessyink"], "transitionIn"))
            dict = propStrToDict(node.getAttributeNS(NSS["jessyink"], "transitionIn"));
        else
            dict = defaultTransitionInDict;

        slides[counter]["transitionIn"]["name"] = dict["name"];
        slides[counter]["transitionIn"]["options"] = new Object();

        for (key in dict)
            if (key != "name")
                slides[counter]["transitionIn"]["options"][key] = dict[key];

        // Set build out transition.
        slides[counter]["transitionOut"] = new Object();

        if (node.hasAttributeNS(NSS["jessyink"], "transitionOut"))
            dict = propStrToDict(node.getAttributeNS(NSS["jessyink"], "transitionOut"));
        else
            dict = defaultTransitionOutDict;

        slides[counter]["transitionOut"]["name"] = dict["name"];
        slides[counter]["transitionOut"]["options"] = new Object();

        for (key in dict)
            if (key != "name")
                slides[counter]["transitionOut"]["options"][key] = dict[key];

        // Copy master slide content.
        if (masterSlide)
        {
            var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), "_" + counter);
            clonedNode.removeAttributeNS(NSS["inkscape"], "groupmode");
            clonedNode.removeAttributeNS(NSS["inkscape"], "label");
            clonedNode.style.display = "inherit";

            node.insertBefore(clonedNode, node.firstChild);
        }

        // Setting clip path.
        node.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");

        // Substitute auto texts.
        substituteAutoTexts(node, node.getAttributeNS(NSS["inkscape"], "label"), counter + 1, tempSlides.length);

        node.removeAttributeNS(NSS["inkscape"], "groupmode");
        node.removeAttributeNS(NSS["inkscape"], "label");

        // Set effects.
        var tempEffects = new Array();
        var groups = new Object();

        for (var IOCounter = 0; IOCounter &lt;= 1; IOCounter++)
        {
            var propName = "";
            var dir = 0;

            if (IOCounter == 0)
            {
                propName = "effectIn";
                dir = 1;
            }
            else if (IOCounter == 1)
            {
                propName = "effectOut";
                dir = -1;
            }

            var effects = getElementsByPropertyNS(node, NSS["jessyink"], propName);

            for (var effectCounter = 0; effectCounter &lt; effects.length; effectCounter++)
            {
                var element = document.getElementById(effects[effectCounter]);
                var dict = propStrToDict(element.getAttributeNS(NSS["jessyink"], propName));

                // Put every element that has an effect associated with it, into its own group.
                // Unless of course, we already put it into its own group.
                if (!(groups[element.id]))
                {
                    var newGroup = document.createElementNS(NSS["svg"], "g");

                    element.parentNode.insertBefore(newGroup, element);
                    newGroup.appendChild(element.parentNode.removeChild(element));
                    groups[element.id] = newGroup;
                }

                var effectDict = new Object();

                effectDict["effect"] = dict["name"];
                effectDict["dir"] = dir;
                effectDict["element"] = groups[element.id];

                for (var option in dict)
                {
                    if ((option != "name") &amp;&amp; (option != "order"))
                    {
                        if (!effectDict["options"])
                            effectDict["options"] = new Object();

                        effectDict["options"][option] = dict[option];
                    }
                }

                if (!tempEffects[dict["order"]])
                    tempEffects[dict["order"]] = new Array();

                tempEffects[dict["order"]][tempEffects[dict["order"]].length] = effectDict;
            }
        }

        // Make invisible, but keep in rendering tree to ensure that bounding box can be calculated.
        node.setAttribute("opacity",0);
        node.style.display = "inherit";

        // Create a transform group.
        var transformGroup = document.createElementNS(NSS["svg"], "g");

        // Add content to transform group.
        while (node.firstChild)
            transformGroup.appendChild(node.firstChild);

        // Transfer the transform attribute from the node to the transform group.
        if (node.getAttribute("transform"))
        {
            transformGroup.setAttribute("transform", node.getAttribute("transform"));
            node.removeAttribute("transform");
        }

        // Create a view group.
        var viewGroup = document.createElementNS(NSS["svg"], "g");

        viewGroup.appendChild(transformGroup);
        slides[counter]["viewGroup"] = node.appendChild(viewGroup);

        // Insert background.
        if (BACKGROUND_COLOR != null)
        {
            var rectNode = document.createElementNS(NSS["svg"], "rect");

            rectNode.setAttribute("x", 0);
            rectNode.setAttribute("y", 0);
            rectNode.setAttribute("width", WIDTH);
            rectNode.setAttribute("height", HEIGHT);
            rectNode.setAttribute("id", "jessyInkBackground" + counter);
            rectNode.setAttribute("fill", BACKGROUND_COLOR);

            slides[counter]["viewGroup"].insertBefore(rectNode, slides[counter]["viewGroup"].firstChild);
        }

        // Set views.
        var tempViews = new Array();
        var views = getElementsByPropertyNS(node, NSS["jessyink"], "view");
        var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

        // Set initial view even if there are no other views.
        slides[counter]["viewGroup"].setAttribute("transform", matrixOld.toAttribute());
        slides[counter].initialView = matrixOld.toAttribute();

        for (var viewCounter = 0; viewCounter &lt; views.length; viewCounter++)
        {
            var element = document.getElementById(views[viewCounter]);
            var dict = propStrToDict(element.getAttributeNS(NSS["jessyink"], "view"));

            if (dict["order"] == 0)
            {
                matrixOld = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());
                slides[counter].initialView = matrixOld.toAttribute();
            }
            else
            {
                var effectDict = new Object();

                effectDict["effect"] = dict["name"];
                effectDict["dir"] = 1;
                effectDict["element"] = slides[counter]["viewGroup"];
                effectDict["order"] = dict["order"];

                for (var option in dict)
                {
                    if ((option != "name") &amp;&amp; (option != "order"))
                    {
                        if (!effectDict["options"])
                            effectDict["options"] = new Object();

                        effectDict["options"][option] = dict[option];
                    }
                }

                effectDict["options"]["matrixNew"] = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());

                tempViews[dict["order"]] = effectDict;
            }

            // Remove element.
            element.parentNode.removeChild(element);
        }

        // Consolidate view array and append it to the effect array.
        if (tempViews.length &gt; 0)
        {
            for (var viewCounter = 0; viewCounter &lt; tempViews.length; viewCounter++)
            {
                if (tempViews[viewCounter])
                {
                    tempViews[viewCounter]["options"]["matrixOld"] = matrixOld;
                    matrixOld = tempViews[viewCounter]["options"]["matrixNew"];

                    if (!tempEffects[tempViews[viewCounter]["order"]])
                        tempEffects[tempViews[viewCounter]["order"]] = new Array();

                    tempEffects[tempViews[viewCounter]["order"]][tempEffects[tempViews[viewCounter]["order"]].length] = tempViews[viewCounter];
                }
            }
        }

        // Set consolidated effect array.
        if (tempEffects.length &gt; 0)
        {
            slides[counter]["effects"] = new Array();

            for (var effectCounter = 0; effectCounter &lt; tempEffects.length; effectCounter++)
            {
                if (tempEffects[effectCounter])
                    slides[counter]["effects"][slides[counter]["effects"].length] = tempEffects[effectCounter];
            }
        }

        node.setAttribute("onmouseover", "if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != " + counter + ")) { indexSetActiveSlide(" + counter + "); };");

        // Set visibility for initial state.
        if (counter == activeSlide)
        {
            node.style.display = "inherit";
            node.setAttribute("opacity",1);
        }
        else
        {
            node.style.display = "none";
            node.setAttribute("opacity",0);
        }
    }

    // Set key handler.
    var jessyInkObjects = document.getElementsByTagNameNS(NSS["svg"], "g");

    for (var counter = 0; counter &lt; jessyInkObjects.length; counter++)
    {
        var elem = jessyInkObjects[counter];

        if (elem.getAttributeNS(NSS["jessyink"], "customKeyBindings"))
        {
            if (elem.getCustomKeyBindings != undefined)
                keyCodeDictionary = elem.getCustomKeyBindings();

            if (elem.getCustomCharBindings != undefined)
                charCodeDictionary = elem.getCustomCharBindings();
        }
    }

    // Set mouse handler.
    var jessyInkMouseHandler = document.getElementsByTagNameNS(NSS["jessyink"], "mousehandler");

    for (var counter = 0; counter &lt; jessyInkMouseHandler.length; counter++)
    {
        var elem = jessyInkMouseHandler[counter];

        if (elem.getMouseHandler != undefined)
        {
            var tempDict = elem.getMouseHandler();

            for (mode in tempDict)
            {
                if (!mouseHandlerDictionary[mode])
                    mouseHandlerDictionary[mode] = new Object();

                for (handler in tempDict[mode])
                    mouseHandlerDictionary[mode][handler] = tempDict[mode][handler];
            }
        }
    }

    // Check effect number.
    if ((activeEffect &lt; 0) || (!slides[activeSlide].effects))
    {
        activeEffect = 0;
    }
    else if (activeEffect &gt; slides[activeSlide].effects.length)
    {
        activeEffect = slides[activeSlide].effects.length;
    }

    createProgressBar(JessyInkPresentationLayer);
    hideProgressBar();
    setProgressBarValue(activeSlide);
    setTimeIndicatorValue(0);
    setInterval("updateTimer()", 1000);
    setSlideToState(activeSlide, activeEffect);
    jessyInkInitialised = true;
}

/** Function to substitute the auto-texts.
 *
 *  @param node the node
 *  @param slideName name of the slide the node is on
 *  @param slideNumber number of the slide the node is on
 *  @param numberOfSlides number of slides in the presentation
 */
function substituteAutoTexts(node, slideName, slideNumber, numberOfSlides)
{
    var texts = node.getElementsByTagNameNS(NSS["svg"], "tspan");

    for (var textCounter = 0; textCounter &lt; texts.length; textCounter++)
    {
        if (texts[textCounter].getAttributeNS(NSS["jessyink"], "autoText") == "slideNumber")
            texts[textCounter].firstChild.nodeValue = slideNumber;
        else if (texts[textCounter].getAttributeNS(NSS["jessyink"], "autoText") == "numberOfSlides")
            texts[textCounter].firstChild.nodeValue = numberOfSlides;
        else if (texts[textCounter].getAttributeNS(NSS["jessyink"], "autoText") == "slideTitle")
            texts[textCounter].firstChild.nodeValue = slideName;
    }
}

/** Convenience function to get an element depending on whether it has a property with a particular name.
 *    This function emulates some dearly missed XPath functionality.
 *
 *  @param node the node
 *  @param namespace namespace of the attribute
 *  @param name attribute name
 */
function getElementsByPropertyNS(node, namespace, name)
{
    var elems = new Array();

    if (node.getAttributeNS(namespace, name))
        elems.push(node.getAttribute("id"));

    for (var counter = 0; counter &lt; node.childNodes.length; counter++)
    {
        if (node.childNodes[counter].nodeType == 1)
            elems = elems.concat(getElementsByPropertyNS(node.childNodes[counter], namespace, name));
    }

    return elems;
}

/** Function to dispatch the next effect, if there is none left, change the slide.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function dispatchEffects(dir)
{
    if (slides[activeSlide]["effects"] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide]["effects"].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (dir == 1)
        {
            effectArray = slides[activeSlide]["effects"][activeEffect];
            activeEffect += dir;
        }
        else if (dir == -1)
        {
            activeEffect += dir;
            effectArray = slides[activeSlide]["effects"][activeEffect];
        }

        transCounter = 0;
        startTime = (new Date()).getTime();
        lastFrameTime = null;
        effect(dir);
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to skip effects and directly either put the slide into start or end state or change slides.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function skipEffects(dir)
{
    if (slides[activeSlide]["effects"] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide]["effects"].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (slides[activeSlide]["effects"] &amp;&amp; (dir == 1))
            activeEffect = slides[activeSlide]["effects"].length;
        else
            activeEffect = 0;

        if (dir == 1)
            setSlideToState(activeSlide, STATE_END);
        else
            setSlideToState(activeSlide, STATE_START);

        processingEffect = false;
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to change between slides.
 *
 *  @param dir direction (1 = forwards, -1 = backwards)
 */
function changeSlide(dir)
{
    processingEffect = true;
    effectArray = new Array();

    effectArray[0] = new Object();
    if (dir == 1)
    {
        effectArray[0]["effect"] = slides[activeSlide]["transitionOut"]["name"];
        effectArray[0]["options"] = slides[activeSlide]["transitionOut"]["options"];
        effectArray[0]["dir"] = -1;
    }
    else if (dir == -1)
    {
        effectArray[0]["effect"] = slides[activeSlide]["transitionIn"]["name"];
        effectArray[0]["options"] = slides[activeSlide]["transitionIn"]["options"];
        effectArray[0]["dir"] = 1;
    }
    effectArray[0]["element"] = slides[activeSlide]["element"];

    activeSlide += dir;
    setProgressBarValue(activeSlide);

    effectArray[1] = new Object();

    if (dir == 1)
    {
        effectArray[1]["effect"] = slides[activeSlide]["transitionIn"]["name"];
        effectArray[1]["options"] = slides[activeSlide]["transitionIn"]["options"];
        effectArray[1]["dir"] = 1;
    }
    else if (dir == -1)
    {
        effectArray[1]["effect"] = slides[activeSlide]["transitionOut"]["name"];
        effectArray[1]["options"] = slides[activeSlide]["transitionOut"]["options"];
        effectArray[1]["dir"] = -1;
    }

    effectArray[1]["element"] = slides[activeSlide]["element"];

    if (slides[activeSlide]["effects"] &amp;&amp; (dir == -1))
        activeEffect = slides[activeSlide]["effects"].length;
    else
        activeEffect = 0;

    if (dir == -1)
        setSlideToState(activeSlide, STATE_END);
    else
        setSlideToState(activeSlide, STATE_START);

    transCounter = 0;
    startTime = (new Date()).getTime();
    lastFrameTime = null;
    effect(dir);
}

/** Function to toggle between index and slide mode.
*/
function toggleSlideIndex()
{
    var suspendHandle = ROOT_NODE.suspendRedraw(500);

    if (currentMode == SLIDE_MODE)
    {
        hideProgressBar();
        INDEX_OFFSET = -1;
        indexSetPageSlide(activeSlide);
        currentMode = INDEX_MODE;
    }
    else if (currentMode == INDEX_MODE)
    {
        for (var counter = 0; counter &lt; slides.length; counter++)
        {
            slides[counter]["element"].setAttribute("transform","scale(1)");

            if (counter == activeSlide)
            {
                slides[counter]["element"].style.display = "inherit";
                slides[counter]["element"].setAttribute("opacity",1);
                activeEffect = 0;
            }
            else
            {
                slides[counter]["element"].setAttribute("opacity",0);
                slides[counter]["element"].style.display = "none";
            }
        }
        currentMode = SLIDE_MODE;
        setSlideToState(activeSlide, STATE_START);
        setProgressBarValue(activeSlide);

        if (progress_bar_visible)
        {
            showProgressBar();
        }
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to run an effect.
 *
 *  @param dir direction in which to play the effect (1 = forwards, -1 = backwards)
 */
function effect(dir)
{
    var done = true;

    var suspendHandle = ROOT_NODE.suspendRedraw(200);

    for (var counter = 0; counter &lt; effectArray.length; counter++)
    {
        if (effectArray[counter]["effect"] == "fade")
            done &amp;= fade(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
        else if (effectArray[counter]["effect"] == "appear")
            done &amp;= appear(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
        else if (effectArray[counter]["effect"] == "pop")
            done &amp;= pop(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
        else if (effectArray[counter]["effect"] == "view")
            done &amp;= view(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();

    if (!done)
    {
        var currentTime = (new Date()).getTime();
        var timeDiff = 1;

        transCounter = currentTime - startTime;

        if (lastFrameTime != null)
        {
            timeDiff = timeStep - (currentTime - lastFrameTime);

            if (timeDiff &lt;= 0)
                timeDiff = 1;
        }

        lastFrameTime = currentTime;

        window.setTimeout("effect(" + dir + ")", timeDiff);
    }
    else
    {
        window.location.hash = (activeSlide + 1) + '_' + activeEffect;
        processingEffect = false;
    }
}

/** Function to display the index sheet.
 *
 *  @param offsetNumber offset number
 */
function displayIndex(offsetNumber)
{
    var offsetX = 0;
    var offsetY = 0;

    if (offsetNumber &lt; 0)
        offsetNumber = 0;
    else if (offsetNumber &gt;= slides.length)
        offsetNumber = slides.length - 1;

    for (var counter = 0; counter &lt; slides.length; counter++)
    {
        if ((counter &lt; offsetNumber) || (counter &gt; offsetNumber + INDEX_COLUMNS * INDEX_COLUMNS - 1))
        {
            slides[counter]["element"].setAttribute("opacity",0);
            slides[counter]["element"].style.display = "none";
        }
        else
        {
            offsetX = ((counter - offsetNumber) % INDEX_COLUMNS) * WIDTH;
            offsetY = Math.floor((counter - offsetNumber) / INDEX_COLUMNS) * HEIGHT;

            slides[counter]["element"].setAttribute("transform","scale("+1/INDEX_COLUMNS+") translate("+offsetX+","+offsetY+")");
            slides[counter]["element"].style.display = "inherit";
            slides[counter]["element"].setAttribute("opacity",0.5);
        }

        setSlideToState(counter, STATE_END);
    }

    //do we need to save the current offset?
    if (INDEX_OFFSET != offsetNumber)
        INDEX_OFFSET = offsetNumber;
}

/** Function to set the active slide in the slide view.
 *
 *  @param nbr index of the active slide
 */
function slideSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide]["element"].setAttribute("opacity",0);
    slides[activeSlide]["element"].style.display = "none";

    activeSlide = parseInt(nbr);

    setSlideToState(activeSlide, STATE_START);
    slides[activeSlide]["element"].style.display = "inherit";
    slides[activeSlide]["element"].setAttribute("opacity",1);

    activeEffect = 0;
    setProgressBarValue(nbr);
}

/** Function to set the active slide in the index view.
 *
 *  @param nbr index of the active slide
 */
function indexSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide]["element"].setAttribute("opacity",0.5);

    activeSlide = parseInt(nbr);
    window.location.hash = (activeSlide + 1) + '_0';

    slides[activeSlide]["element"].setAttribute("opacity",1);
}

/** Function to set the page and active slide in index view.
 *
 *  @param nbr index of the active slide
 *
 *  NOTE: To force a redraw,
 *  set INDEX_OFFSET to -1 before calling indexSetPageSlide().
 *
 *  This is necessary for zooming (otherwise the index might not
 *  get redrawn) and when switching to index mode.
 *
 *  INDEX_OFFSET = -1
 *  indexSetPageSlide(activeSlide);
 */
function indexSetPageSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    //calculate the offset
    var offset = nbr - nbr % (INDEX_COLUMNS * INDEX_COLUMNS);

    if (offset &lt; 0)
        offset = 0;

    //if different from kept offset, then record and change the page
    if (offset != INDEX_OFFSET)
    {
        INDEX_OFFSET = offset;
        displayIndex(INDEX_OFFSET);
    }

    //set the active slide
    indexSetActiveSlide(nbr);
}

/** Event handler for key press.
 *
 *  @param e the event
 */
function keydown(e)
{
    if (!e)
        e = window.event;

    code = e.keyCode || e.charCode;

    if (!processingEffect &amp;&amp; keyCodeDictionary[currentMode] &amp;&amp; keyCodeDictionary[currentMode][code])
        return keyCodeDictionary[currentMode][code]();
    else
        document.onkeypress = keypress;
}
// Set event handler for key down.
document.onkeydown = keydown;

/** Event handler for key press.
 *
 *  @param e the event
 */
function keypress(e)
{
    document.onkeypress = null;

    if (!e)
        e = window.event;

    str = String.fromCharCode(e.keyCode || e.charCode);

    if (!processingEffect &amp;&amp; charCodeDictionary[currentMode] &amp;&amp; charCodeDictionary[currentMode][str])
        return charCodeDictionary[currentMode][str]();
}

/** Function to supply the default char code dictionary.
 *
 * @returns default char code dictionary
 */
function getDefaultCharCodeDictionary()
{
    var charCodeDict = new Object();

    charCodeDict[SLIDE_MODE] = new Object();
    charCodeDict[INDEX_MODE] = new Object();
    charCodeDict[DRAWING_MODE] = new Object();

    charCodeDict[SLIDE_MODE]["i"] = function () { return toggleSlideIndex(); };
    charCodeDict[SLIDE_MODE]["d"] = function () { return slideSwitchToDrawingMode(); };
    charCodeDict[SLIDE_MODE]["D"] = function () { return slideQueryDuration(); };
    charCodeDict[SLIDE_MODE]["n"] = function () { return slideAddSlide(activeSlide); };
    charCodeDict[SLIDE_MODE]["p"] = function () { return slideToggleProgressBarVisibility(); };
    charCodeDict[SLIDE_MODE]["t"] = function () { return slideResetTimer(); };
    charCodeDict[SLIDE_MODE]["e"] = function () { return slideUpdateExportLayer(); };

    charCodeDict[DRAWING_MODE]["d"] = function () { return drawingSwitchToSlideMode(); };
    charCodeDict[DRAWING_MODE]["0"] = function () { return drawingResetPathWidth(); };
    charCodeDict[DRAWING_MODE]["1"] = function () { return drawingSetPathWidth(1.0); };
    charCodeDict[DRAWING_MODE]["3"] = function () { return drawingSetPathWidth(3.0); };
    charCodeDict[DRAWING_MODE]["5"] = function () { return drawingSetPathWidth(5.0); };
    charCodeDict[DRAWING_MODE]["7"] = function () { return drawingSetPathWidth(7.0); };
    charCodeDict[DRAWING_MODE]["9"] = function () { return drawingSetPathWidth(9.0); };
    charCodeDict[DRAWING_MODE]["b"] = function () { return drawingSetPathColour("blue"); };
    charCodeDict[DRAWING_MODE]["c"] = function () { return drawingSetPathColour("cyan"); };
    charCodeDict[DRAWING_MODE]["g"] = function () { return drawingSetPathColour("green"); };
    charCodeDict[DRAWING_MODE]["k"] = function () { return drawingSetPathColour("black"); };
    charCodeDict[DRAWING_MODE]["m"] = function () { return drawingSetPathColour("magenta"); };
    charCodeDict[DRAWING_MODE]["o"] = function () { return drawingSetPathColour("orange"); };
    charCodeDict[DRAWING_MODE]["r"] = function () { return drawingSetPathColour("red"); };
    charCodeDict[DRAWING_MODE]["w"] = function () { return drawingSetPathColour("white"); };
    charCodeDict[DRAWING_MODE]["y"] = function () { return drawingSetPathColour("yellow"); };
    charCodeDict[DRAWING_MODE]["z"] = function () { return drawingUndo(); };

    charCodeDict[INDEX_MODE]["i"] = function () { return toggleSlideIndex(); };
    charCodeDict[INDEX_MODE]["-"] = function () { return indexDecreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE]["="] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE]["+"] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE]["0"] = function () { return indexResetNumberOfColumns(); };

    return charCodeDict;
}

/** Function to supply the default key code dictionary.
 *
 * @returns default key code dictionary
 */
function getDefaultKeyCodeDictionary()
{
    var keyCodeDict = new Object();

    keyCodeDict[SLIDE_MODE] = new Object();
    keyCodeDict[INDEX_MODE] = new Object();
    keyCodeDict[DRAWING_MODE] = new Object();

    keyCodeDict[SLIDE_MODE][LEFT_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][RIGHT_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][UP_KEY] = function() { return skipEffects(-1); };
    keyCodeDict[SLIDE_MODE][DOWN_KEY] = function() { return skipEffects(1); };
    keyCodeDict[SLIDE_MODE][PAGE_UP_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][HOME_KEY] = function() { return slideSetActiveSlide(0); };
    keyCodeDict[SLIDE_MODE][END_KEY] = function() { return slideSetActiveSlide(slides.length - 1); };
    keyCodeDict[SLIDE_MODE][SPACE_KEY] = function() { return dispatchEffects(1); };

    keyCodeDict[INDEX_MODE][LEFT_KEY] = function() { return indexSetPageSlide(activeSlide - 1); };
    keyCodeDict[INDEX_MODE][RIGHT_KEY] = function() { return indexSetPageSlide(activeSlide + 1); };
    keyCodeDict[INDEX_MODE][UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][HOME_KEY] = function() { return indexSetPageSlide(0); };
    keyCodeDict[INDEX_MODE][END_KEY] = function() { return indexSetPageSlide(slides.length - 1); };
    keyCodeDict[INDEX_MODE][ENTER_KEY] = function() { return toggleSlideIndex(); };

    keyCodeDict[DRAWING_MODE][ESCAPE_KEY] = function () { return drawingSwitchToSlideMode(); };

    return keyCodeDict;
}

/** Function to handle all mouse events.
 *
 *    @param    evnt    event
 *    @param    action    type of event (e.g. mouse up, mouse wheel)
 */
function mouseHandlerDispatch(evnt, action)
{
    if (!evnt)
        evnt = window.event;

    var retVal = true;

    if (!processingEffect &amp;&amp; mouseHandlerDictionary[currentMode] &amp;&amp; mouseHandlerDictionary[currentMode][action])
    {
        var subRetVal = mouseHandlerDictionary[currentMode][action](evnt);

        if (subRetVal != null &amp;&amp; subRetVal != undefined)
            retVal = subRetVal;
    }

    if (evnt.preventDefault &amp;&amp; !retVal)
        evnt.preventDefault();

    evnt.returnValue = retVal;

    return retVal;
}

// Set mouse event handler.
document.onmousedown = function(e) { return mouseHandlerDispatch(e, MOUSE_DOWN); };
document.onmouseup = function(e) { return mouseHandlerDispatch(e, MOUSE_UP); };
document.onmousemove = function(e) { return mouseHandlerDispatch(e, MOUSE_MOVE); };

// Moz
if (window.addEventListener)
{
    window.addEventListener('DOMMouseScroll', function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); }, false);
}

// Opera Safari OK - may not work in IE
window.onmousewheel = function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); };

/** Function to supply the default mouse handler dictionary.
 *
 * @returns default mouse handler dictionary
 */
function getDefaultMouseHandlerDictionary()
{
    var mouseHandlerDict = new Object();

    mouseHandlerDict[SLIDE_MODE] = new Object();
    mouseHandlerDict[INDEX_MODE] = new Object();
    mouseHandlerDict[DRAWING_MODE] = new Object();

    mouseHandlerDict[SLIDE_MODE][MOUSE_DOWN] = function(evnt) { return dispatchEffects(1); };
    mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL] = function(evnt) { return slideMousewheel(evnt); };

    mouseHandlerDict[INDEX_MODE][MOUSE_DOWN] = function(evnt) { return toggleSlideIndex(); };

    mouseHandlerDict[DRAWING_MODE][MOUSE_DOWN] = function(evnt) { return drawingMousedown(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_UP] = function(evnt) { return drawingMouseup(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_MOVE] = function(evnt) { return drawingMousemove(evnt); };

    return mouseHandlerDict;
}

/** Function to switch from slide mode to drawing mode.
*/
function slideSwitchToDrawingMode()
{
    currentMode = DRAWING_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute("style"))
        tempDict = propStrToDict(ROOT_NODE.getAttribute("style"));
    else
        tempDict = new Object();

    tempDict["cursor"] = "crosshair";
    ROOT_NODE.setAttribute("style", dictToPropStr(tempDict));
}

/** Function to switch from drawing mode to slide mode.
*/
function drawingSwitchToSlideMode()
{
    currentMode = SLIDE_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute("style"))
        tempDict = propStrToDict(ROOT_NODE.getAttribute("style"));
    else
        tempDict = new Object();

    tempDict["cursor"] = "auto";
    ROOT_NODE.setAttribute("style", dictToPropStr(tempDict));
}

/** Function to decrease the number of columns in index mode.
*/
function indexDecreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &gt;= 3)
    {
        INDEX_COLUMNS -= 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to increase the number of columns in index mode.
*/
function indexIncreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &lt; 7)
    {
        INDEX_COLUMNS += 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset the number of columns in index mode.
*/
function indexResetNumberOfColumns()
{
    if (INDEX_COLUMNS != INDEX_COLUMNS_DEFAULT)
    {
        INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset path width in drawing mode.
*/
function drawingResetPathWidth()
{
    path_width = path_width_default;
    set_path_paint_width();
}

/** Function to set path width in drawing mode.
 *
 * @param width new path width
 */
function drawingSetPathWidth(width)
{
    path_width = width;
    set_path_paint_width();
}

/** Function to set path colour in drawing mode.
 *
 * @param colour new path colour
 */
function drawingSetPathColour(colour)
{
    path_colour = colour;
}

/** Function to query the duration of the presentation from the user in slide mode.
*/
function slideQueryDuration()
{
    var new_duration = prompt("Length of presentation in minutes?", timer_duration);

    if ((new_duration != null) &amp;&amp; (new_duration != ''))
    {
        timer_duration = new_duration;
    }

    updateTimer();
}

/** Function to add new slide in slide mode.
 *
 * @param afterSlide after which slide to insert the new one
 */
function slideAddSlide(afterSlide)
{
    addSlide(afterSlide);
    slideSetActiveSlide(afterSlide + 1);
    updateTimer();
}

/** Function to toggle the visibility of the progress bar in slide mode.
*/
function slideToggleProgressBarVisibility()
{
    if (progress_bar_visible)
    {
        progress_bar_visible = false;
        hideProgressBar();
    }
    else
    {
        progress_bar_visible = true;
        showProgressBar();
    }
}

/** Function to reset the timer in slide mode.
*/
function slideResetTimer()
{
    timer_start = timer_elapsed;
    updateTimer();
}

/** Convenience function to pad a string with zero in front up to a certain length.
 */
function padString(str, len)
{
    var outStr = str;

    while (outStr.length &lt; len)
    {
        outStr = '0' + outStr;
    }

    return outStr;
}

/** Function to update the export layer.
 */
function slideUpdateExportLayer()
{
    // Suspend redraw since we are going to mess with the slides.
    var suspendHandle = ROOT_NODE.suspendRedraw(2000);

    var tmpActiveSlide = activeSlide;
    var tmpActiveEffect = activeEffect;
    var exportedLayers = new Array();

    for (var counterSlides = 0; counterSlides &lt; slides.length; counterSlides++)
    {
        var exportNode;

        setSlideToState(counterSlides, STATE_START);

        var maxEffect = 0;

        if (slides[counterSlides].effects)
        {
            maxEffect = slides[counterSlides].effects.length;
        }

        exportNode = slides[counterSlides].element.cloneNode(true);
        exportNode.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
        exportNode.setAttributeNS(NSS["inkscape"], "label", "slide_" + padString((counterSlides + 1).toString(), slides.length.toString().length) + "_effect_" + padString("0", maxEffect.toString().length));

        exportedLayers.push(exportNode);

        if (slides[counterSlides]["effects"])
        {
            for (var counter = 0; counter &lt; slides[counterSlides]["effects"].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[counterSlides]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[counterSlides]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                }

                var layerName = "slide_" + padString((counterSlides + 1).toString(), slides.length.toString().length) + "_effect_" + padString((counter + 1).toString(), maxEffect.toString().length);
                exportNode = slides[counterSlides].element.cloneNode(true);
                exportNode.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
                exportNode.setAttributeNS(NSS["inkscape"], "label", layerName);
                exportNode.setAttribute("id", layerName);

                exportedLayers.push(exportNode);
            }
        }
    }

    activeSlide = tmpActiveSlide;
    activeEffect = tmpActiveEffect;
    setSlideToState(activeSlide, activeEffect);

    // Copy image.
    var newDoc = document.documentElement.cloneNode(true);

    // Delete viewbox form new imag and set width and height.
    newDoc.removeAttribute('viewbox');
    newDoc.setAttribute('width', WIDTH);
    newDoc.setAttribute('height', HEIGHT);

    // Delete all layers and script elements.
    var nodesToBeRemoved = new Array();

    for (var childCounter = 0; childCounter &lt;  newDoc.childNodes.length; childCounter++)
    {
        var child = newDoc.childNodes[childCounter];

        if (child.nodeType == 1)
        {
            if ((child.nodeName.toUpperCase() == 'G') || (child.nodeName.toUpperCase() == 'SCRIPT'))
            {
                nodesToBeRemoved.push(child);
            }
        }
    }

    for (var ndCounter = 0; ndCounter &lt; nodesToBeRemoved.length; ndCounter++)
    {
        var nd = nodesToBeRemoved[ndCounter];

        // Before removing the node, check whether it contains any definitions.
        var defs = nd.getElementsByTagNameNS(NSS["svg"], "defs");

        for (var defsCounter = 0; defsCounter &lt; defs.length; defsCounter++)
        {
            if (defs[defsCounter].id)
            {
                newDoc.appendChild(defs[defsCounter].cloneNode(true));
            }
        }

        // Remove node.
        nd.parentNode.removeChild(nd);
    }

    // Set current layer.
    if (exportedLayers[0])
    {
        var namedView;

        for (var nodeCounter = 0; nodeCounter &lt; newDoc.childNodes.length; nodeCounter++)
        {
            if ((newDoc.childNodes[nodeCounter].nodeType == 1) &amp;&amp; (newDoc.childNodes[nodeCounter].getAttribute('id') == 'base'))
            {
                namedView = newDoc.childNodes[nodeCounter];
            }
        }

        if (namedView)
        {
            namedView.setAttributeNS(NSS['inkscape'], 'current-layer', exportedLayers[0].getAttributeNS(NSS['inkscape'], 'label'));
        }
    }

    // Add exported layers.
    while (exportedLayers.length &gt; 0)
    {
        var nd = exportedLayers.pop();

        nd.setAttribute("opacity",1);
        nd.style.display = "inherit";

        newDoc.appendChild(nd);
    }

    // Serialise the new document.
  window.location = 'data:application/svg+xml;base64;charset=utf-8,' + window.btoa(unescape(encodeURIComponent((new XMLSerializer()).serializeToString(newDoc))));

    // Unsuspend redraw.
    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to undo last drawing operation.
*/
function drawingUndo()
{
    mouse_presentation_path = null;
    mouse_original_path = null;

    if (history_presentation_elements.length &gt; 0)
    {
        var p = history_presentation_elements.pop();
        var parent = p.parentNode.removeChild(p);

        p = history_original_elements.pop();
        parent = p.parentNode.removeChild(p);
    }
}

/** Event handler for mouse down in drawing mode.
 *
 *  @param e the event
 */
function drawingMousedown(e)
{
    var value = 0;

    if (e.button)
        value = e.button;
    else if (e.which)
        value = e.which;

    if (value == 1)
    {
        history_counter++;

        var p = calcCoord(e);

        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
        mouse_original_path = document.createElementNS(NSS["svg"], "path");
        mouse_original_path.setAttribute("stroke", path_colour);
        mouse_original_path.setAttribute("stroke-width", path_paint_width);
        mouse_original_path.setAttribute("fill", "none");
        mouse_original_path.setAttribute("id", "path " + Date());
        mouse_original_path.setAttribute("d", "M" + p.x + "," + p.y);
        slides[activeSlide]["original_element"].appendChild(mouse_original_path);
        history_original_elements.push(mouse_original_path);

        mouse_presentation_path = document.createElementNS(NSS["svg"], "path");
        mouse_presentation_path.setAttribute("stroke", path_colour);
        mouse_presentation_path.setAttribute("stroke-width", path_paint_width);
        mouse_presentation_path.setAttribute("fill", "none");
        mouse_presentation_path.setAttribute("id", "path " + Date() + " presentation copy");
        mouse_presentation_path.setAttribute("d", "M" + p.x + "," + p.y);

        if (slides[activeSlide]["viewGroup"])
            slides[activeSlide]["viewGroup"].appendChild(mouse_presentation_path);
        else
            slides[activeSlide]["element"].appendChild(mouse_presentation_path);

        history_presentation_elements.push(mouse_presentation_path);

        return false;
    }

    return true;
}

/** Event handler for mouse up in drawing mode.
 *
 *  @param e the event
 */
function drawingMouseup(e)
{
    if(!e)
        e = window.event;

    if (mouse_presentation_path != null)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute("d");
        d += " L" + p.x + "," + p.y;
        mouse_presentation_path.setAttribute("d", d);
        mouse_presentation_path = null;
        mouse_original_path.setAttribute("d", d);
        mouse_original_path = null;

        return false;
    }

    return true;
}

/** Event handler for mouse move in drawing mode.
 *
 *  @param e the event
 */
function drawingMousemove(e)
{
    if(!e)
        e = window.event;

    var dist = (mouse_last_x - e.clientX) * (mouse_last_x - e.clientX) + (mouse_last_y - e.clientY) * (mouse_last_y - e.clientY);

    if (mouse_presentation_path == null)
    {
        return true;
    }

    if (dist &gt;= mouse_min_dist_sqr)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute("d");
        d += " L" + p.x + "," + p.y;
        mouse_presentation_path.setAttribute("d", d);
        mouse_original_path.setAttribute("d", d);
        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
    }

    return false;
}

/** Event handler for mouse wheel events in slide mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function slideMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        skipEffects(-1);
    else if (delta &lt; 0)
        skipEffects(1);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Event handler for mouse wheel events in index mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function indexMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS);
    else if (delta &lt; 0)
        indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Function to set the path paint width.
*/
function set_path_paint_width()
{
    var svgPoint1 = document.documentElement.createSVGPoint();
    var svgPoint2 = document.documentElement.createSVGPoint();

    svgPoint1.x = 0.0;
    svgPoint1.y = 0.0;
    svgPoint2.x = 1.0;
    svgPoint2.y = 0.0;

    var matrix = slides[activeSlide]["element"].getTransformToElement(ROOT_NODE);

    if (slides[activeSlide]["viewGroup"])
        matrix = slides[activeSlide]["viewGroup"].getTransformToElement(ROOT_NODE);

    svgPoint1 = svgPoint1.matrixTransform(matrix);
    svgPoint2 = svgPoint2.matrixTransform(matrix);

    path_paint_width = path_width / Math.sqrt((svgPoint2.x - svgPoint1.x) * (svgPoint2.x - svgPoint1.x) + (svgPoint2.y - svgPoint1.y) * (svgPoint2.y - svgPoint1.y));
}

/** The view effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect); for the view effect the options need to contain the old and the new matrix.
 */
function view(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if (!options["matrixInitial"])
    {
        var tempString = slides[activeSlide]["viewGroup"].getAttribute("transform");

        if (tempString)
            options["matrixInitial"] = (new matrixSVG()).fromAttribute(tempString);
        else
            options["matrixInitial"] = (new matrixSVG()).fromSVGElements(1, 0, 0, 1, 0, 0);
    }

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options["length"])
            length = options["length"];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("transform", options["matrixInitial"].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("transform", options["matrixNew"].toAttribute());

            set_path_paint_width();

            options["matrixInitial"] = null;
            return true;
        }
        else
        {
            element.setAttribute("transform", options["matrixInitial"].mix(options["matrixNew"], fraction).toAttribute());
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("transform", options["matrixInitial"].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("transform", options["matrixOld"].toAttribute());
            set_path_paint_width();

            options["matrixInitial"] = null;
            return true;
        }
        else
        {
            element.setAttribute("transform", options["matrixInitial"].mix(options["matrixOld"], fraction).toAttribute());
        }
    }

    return false;
}

/** The fade effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function fade(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options["length"])
            length = options["length"];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = "none";
            element.setAttribute("opacity", 0);
        }
        else if (fraction &gt;= 1)
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", 1);
            return true;
        }
        else
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", fraction);
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", 1);
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("opacity", 0);
            element.style.display = "none";
            return true;
        }
        else
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", 1 - fraction);
        }
    }
    return false;
}

/** The appear effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function appear(dir, element, time, options)
{
    if (dir == 1)
    {
        element.style.display = "inherit";
        element.setAttribute("opacity",1);
    }
    else if (dir == -1)
    {
        element.style.display = "none";
        element.setAttribute("opacity",0);
    }
    return true;
}

/** The pop effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function pop(dir, element, time, options)
{
    var length = 500;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options["length"])
            length = options["length"];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("opacity", 0);
            element.setAttribute("transform", "scale(0)");
            element.style.display = "none";
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("opacity", 1);
            element.removeAttribute("transform");
            element.style.display = "inherit";
            return true;
        }
        else
        {
            element.style.display = "inherit";
            var opacityFraction = fraction * 3;
            if (opacityFraction &gt; 1)
                opacityFraction = 1;
            element.setAttribute("opacity", opacityFraction);
            var offsetX = WIDTH * (1.0 - fraction) / 2.0;
            var offsetY = HEIGHT * (1.0 - fraction) / 2.0;
            element.setAttribute("transform", "translate(" + offsetX + "," + offsetY + ") scale(" + fraction + ")");
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("opacity", 1);
            element.setAttribute("transform", "scale(1)");
            element.style.display = "inherit";
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("opacity", 0);
            element.removeAttribute("transform");
            element.style.display = "none";
            return true;
        }
        else
        {
            element.setAttribute("opacity", 1 - fraction);
            element.setAttribute("transform", "scale(" + 1 - fraction + ")");
            element.style.display = "inherit";
        }
    }
    return false;
}

/** Function to set a slide either to the start or the end state.
 *
 *  @param slide the slide to use
 *  @param state the state into which the slide should be set
 */
function setSlideToState(slide, state)
{
    slides[slide]["viewGroup"].setAttribute("transform", slides[slide].initialView);

    if (slides[slide]["effects"])
    {
        if (state == STATE_END)
        {
            for (var counter = 0; counter &lt; slides[slide]["effects"].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[slide]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(effect["dir"], effect["element"], STATE_END, effect["options"]);
                }
            }
        }
        else if (state == STATE_START)
        {
            for (var counter = slides[slide]["effects"].length - 1; counter &gt;= 0; counter--)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[slide]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                }
            }
        }
        else
        {
            setSlideToState(slide, STATE_START);

            for (var counter = 0; counter &lt; slides[slide]["effects"].length &amp;&amp; counter &lt; state; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[slide]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(effect["dir"], effect["element"], STATE_END, effect["options"]);
                }
            }
        }
    }

    window.location.hash = (activeSlide + 1) + '_' + activeEffect;
}

/** Convenience function to translate a attribute string into a dictionary.
 *
 *    @param str the attribute string
 *  @return a dictionary
 *  @see dictToPropStr
 */
function propStrToDict(str)
{
    var list = str.split(";");
    var obj = new Object();

    for (var counter = 0; counter &lt; list.length; counter++)
    {
        var subStr = list[counter];
        var subList = subStr.split(":");
        if (subList.length == 2)
        {
            obj[subList[0]] = subList[1];
        }
    }

    return obj;
}

/** Convenience function to translate a dictionary into a string that can be used as an attribute.
 *
 *  @param dict the dictionary to convert
 *  @return a string that can be used as an attribute
 *  @see propStrToDict
 */
function dictToPropStr(dict)
{
    var str = "";

    for (var key in dict)
    {
        str += key + ":" + dict[key] + ";";
    }

    return str;
}

/** Sub-function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *    @param replace dictionary of replaced ids
 *  @see suffixNodeIds
 */
function suffixNoneIds_sub(node, suffix, replace)
{
    if (node.nodeType == 1)
    {
        if (node.getAttribute("id"))
        {
            var id = node.getAttribute("id")
                replace["#" + id] = id + suffix;
            node.setAttribute("id", id + suffix);
        }

        if ((node.nodeName == "use") &amp;&amp; (node.getAttributeNS(NSS["xlink"], "href")) &amp;&amp; (replace[node.getAttribute(NSS["xlink"], "href")]))
            node.setAttribute(NSS["xlink"], "href", node.getAttribute(NSS["xlink"], "href") + suffix);

        if (node.childNodes)
        {
            for (var counter = 0; counter &lt; node.childNodes.length; counter++)
                suffixNoneIds_sub(node.childNodes[counter], suffix, replace);
        }
    }
}

/** Function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *  @return the changed node
 *  @see suffixNodeIds_sub
 */
function suffixNodeIds(node, suffix)
{
    var replace = new Object();

    suffixNoneIds_sub(node, suffix, replace);

    return node;
}

/** Function to build a progress bar.
 *
 *  @param parent node to attach the progress bar to
 */
function createProgressBar(parent_node)
{
    var g = document.createElementNS(NSS["svg"], "g");
    g.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");
    g.setAttribute("id", "layer_progress_bar");
    g.setAttribute("style", "display: none;");

    var rect_progress_bar = document.createElementNS(NSS["svg"], "rect");
    rect_progress_bar.setAttribute("style", "marker: none; fill: rgb(128, 128, 128); stroke: none;");
    rect_progress_bar.setAttribute("id", "rect_progress_bar");
    rect_progress_bar.setAttribute("x", 0);
    rect_progress_bar.setAttribute("y", 0.99 * HEIGHT);
    rect_progress_bar.setAttribute("width", 0);
    rect_progress_bar.setAttribute("height", 0.01 * HEIGHT);
    g.appendChild(rect_progress_bar);

    var circle_timer_indicator = document.createElementNS(NSS["svg"], "circle");
    circle_timer_indicator.setAttribute("style", "marker: none; fill: rgb(255, 0, 0); stroke: none;");
    circle_timer_indicator.setAttribute("id", "circle_timer_indicator");
    circle_timer_indicator.setAttribute("cx", 0.005 * HEIGHT);
    circle_timer_indicator.setAttribute("cy", 0.995 * HEIGHT);
    circle_timer_indicator.setAttribute("r", 0.005 * HEIGHT);
    g.appendChild(circle_timer_indicator);

    parent_node.appendChild(g);
}

/** Function to hide the progress bar.
 *
 */
function hideProgressBar()
{
    var progress_bar = document.getElementById("layer_progress_bar");

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute("style", "display: none;");
}

/** Function to show the progress bar.
 *
 */
function showProgressBar()
{
    var progress_bar = document.getElementById("layer_progress_bar");

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute("style", "display: inherit;");
}

/** Set progress bar value.
 *
 *    @param value the current slide number
 *
 */
function setProgressBarValue(value)
{
    var rect_progress_bar = document.getElementById("rect_progress_bar");

    if (!rect_progress_bar)
    {
        return;
    }

    if (value &lt; 1)
    {
        // First slide, assumed to be the title of the presentation
        var x = 0;
        var w = 0.01 * HEIGHT;
    }
    else if (value &gt;= slides.length - 1)
    {
        // Last slide, assumed to be the end of the presentation
        var x = WIDTH - 0.01 * HEIGHT;
        var w = 0.01 * HEIGHT;
    }
    else
    {
        value -= 1;
        value /= (slides.length - 2);

        var x = WIDTH * value;
        var w = WIDTH / (slides.length - 2);
    }

    rect_progress_bar.setAttribute("x", x);
    rect_progress_bar.setAttribute("width", w);
}

/** Set time indicator.
 *
 *    @param value the percentage of time elapse so far between 0.0 and 1.0
 *
 */
function setTimeIndicatorValue(value)
{
    var circle_timer_indicator = document.getElementById("circle_timer_indicator");

    if (!circle_timer_indicator)
    {
        return;
    }

    if (value &lt; 0.0)
    {
        value = 0.0;
    }

    if (value &gt; 1.0)
    {
        value = 1.0;
    }

    var cx = (WIDTH - 0.01 * HEIGHT) * value + 0.005 * HEIGHT;
    circle_timer_indicator.setAttribute("cx", cx);
}

/** Update timer.
 *
 */
function updateTimer()
{
    timer_elapsed += 1;
    setTimeIndicatorValue((timer_elapsed - timer_start) / (60 * timer_duration));
}

/** Convert screen coordinates to document coordinates.
 *
 *  @param e event with screen coordinates
 *
 *  @return coordinates in SVG file coordinate system
 */
function calcCoord(e)
{
    var svgPoint = document.documentElement.createSVGPoint();
    svgPoint.x = e.clientX + window.pageXOffset;
    svgPoint.y = e.clientY + window.pageYOffset;

    var matrix = slides[activeSlide]["element"].getScreenCTM();

    if (slides[activeSlide]["viewGroup"])
        matrix = slides[activeSlide]["viewGroup"].getScreenCTM();

    svgPoint = svgPoint.matrixTransform(matrix.inverse());
    return svgPoint;
}

/** Add slide.
 *
 *    @param after_slide after which slide the new slide should be inserted into the presentation
 */
function addSlide(after_slide)
{
    number_of_added_slides++;

    var g = document.createElementNS(NSS["svg"], "g");
    g.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");
    g.setAttribute("id", "Whiteboard " + Date() + " presentation copy");
    g.setAttribute("style", "display: none;");

    var new_slide = new Object();
    new_slide["element"] = g;

    // Set build in transition.
    new_slide["transitionIn"] = new Object();
    var dict = defaultTransitionInDict;
    new_slide["transitionIn"]["name"] = dict["name"];
    new_slide["transitionIn"]["options"] = new Object();

    for (key in dict)
        if (key != "name")
            new_slide["transitionIn"]["options"][key] = dict[key];

    // Set build out transition.
    new_slide["transitionOut"] = new Object();
    dict = defaultTransitionOutDict;
    new_slide["transitionOut"]["name"] = dict["name"];
    new_slide["transitionOut"]["options"] = new Object();

    for (key in dict)
        if (key != "name")
            new_slide["transitionOut"]["options"][key] = dict[key];

    // Copy master slide content.
    if (masterSlide)
    {
        var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), "_" + Date() + " presentation_copy");
        clonedNode.removeAttributeNS(NSS["inkscape"], "groupmode");
        clonedNode.removeAttributeNS(NSS["inkscape"], "label");
        clonedNode.style.display = "inherit";

        g.appendChild(clonedNode);
    }

    // Substitute auto texts.
    substituteAutoTexts(g, "Whiteboard " + number_of_added_slides, "W" + number_of_added_slides, slides.length);

    g.setAttribute("onmouseover", "if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != " + (after_slide + 1) + ")) { indexSetActiveSlide(" + (after_slide + 1) + "); };");

    // Create a transform group.
    var transformGroup = document.createElementNS(NSS["svg"], "g");

    // Add content to transform group.
    while (g.firstChild)
        transformGroup.appendChild(g.firstChild);

    // Transfer the transform attribute from the node to the transform group.
    if (g.getAttribute("transform"))
    {
        transformGroup.setAttribute("transform", g.getAttribute("transform"));
        g.removeAttribute("transform");
    }

    // Create a view group.
    var viewGroup = document.createElementNS(NSS["svg"], "g");

    viewGroup.appendChild(transformGroup);
    new_slide["viewGroup"] = g.appendChild(viewGroup);

    // Insert background.
    if (BACKGROUND_COLOR != null)
    {
        var rectNode = document.createElementNS(NSS["svg"], "rect");

        rectNode.setAttribute("x", 0);
        rectNode.setAttribute("y", 0);
        rectNode.setAttribute("width", WIDTH);
        rectNode.setAttribute("height", HEIGHT);
        rectNode.setAttribute("id", "jessyInkBackground" + Date());
        rectNode.setAttribute("fill", BACKGROUND_COLOR);

        new_slide["viewGroup"].insertBefore(rectNode, new_slide["viewGroup"].firstChild);
    }

    // Set initial view even if there are no other views.
    var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

    new_slide["viewGroup"].setAttribute("transform", matrixOld.toAttribute());
    new_slide.initialView = matrixOld.toAttribute();

    // Insert slide
    var node = slides[after_slide]["element"];
    var next_node = node.nextSibling;
    var parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    g = document.createElementNS(NSS["svg"], "g");
    g.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
    g.setAttributeNS(NSS["inkscape"], "label", "Whiteboard " + number_of_added_slides);
    g.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");
    g.setAttribute("id", "Whiteboard " + Date());
    g.setAttribute("style", "display: none;");

    new_slide["original_element"] = g;

    node = slides[after_slide]["original_element"];
    next_node = node.nextSibling;
    parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    before_new_slide = slides.slice(0, after_slide + 1);
    after_new_slide = slides.slice(after_slide + 1);
    slides = before_new_slide.concat(new_slide, after_new_slide);

    //resetting the counter attributes on the slides that follow the new slide...
    for (var counter = after_slide+2; counter &lt; slides.length; counter++)
    {
        slides[counter]["element"].setAttribute("onmouseover", "if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != " + counter + ")) { indexSetActiveSlide(" + counter + "); };");
    }
}

/** Convenience function to obtain a transformation matrix from a point matrix.
 *
 *    @param mPoints Point matrix.
 *    @return A transformation matrix.
 */
function pointMatrixToTransformation(mPoints)
{
    mPointsOld = (new matrixSVG()).fromElements(0, WIDTH, WIDTH, 0, 0, HEIGHT, 1, 1, 1);

    return mPointsOld.mult(mPoints.inv());
}

/** Convenience function to obtain a matrix with three corners of a rectangle.
 *
 *    @param rect an svg rectangle
 *    @return a matrixSVG containing three corners of the rectangle
 */
function rectToMatrix(rect)
{
    rectWidth = rect.getBBox().width;
    rectHeight = rect.getBBox().height;
    rectX = rect.getBBox().x;
    rectY = rect.getBBox().y;
    rectXcorr = 0;
    rectYcorr = 0;

    scaleX = WIDTH / rectWidth;
    scaleY = HEIGHT / rectHeight;

    if (scaleX &gt; scaleY)
    {
        scaleX = scaleY;
        rectXcorr -= (WIDTH / scaleX - rectWidth) / 2;
        rectWidth = WIDTH / scaleX;
    }
    else
    {
        scaleY = scaleX;
        rectYcorr -= (HEIGHT / scaleY - rectHeight) / 2;
        rectHeight = HEIGHT / scaleY;
    }

    if (rect.transform.baseVal.numberOfItems &lt; 1)
    {
        mRectTrans = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);
    }
    else
    {
        mRectTrans = (new matrixSVG()).fromSVGMatrix(rect.transform.baseVal.consolidate().matrix);
    }

    newBasePoints = (new matrixSVG()).fromElements(rectX, rectX, rectX, rectY, rectY, rectY, 1, 1, 1);
    newVectors = (new matrixSVG()).fromElements(rectXcorr, rectXcorr + rectWidth, rectXcorr + rectWidth, rectYcorr, rectYcorr, rectYcorr + rectHeight, 0, 0, 0);

    return mRectTrans.mult(newBasePoints.add(newVectors));
}

/** Function to handle JessyInk elements.
 *
 *    @param    node    Element node.
 */
function handleElement(node)
{
    if (node.getAttributeNS(NSS['jessyink'], 'element') == 'core.video')
    {
        var url;
        var width;
        var height;
        var x;
        var y;
        var transform;

        var tspans = node.getElementsByTagNameNS("http://www.w3.org/2000/svg", "tspan");

        for (var tspanCounter = 0; tspanCounter &lt; tspans.length; tspanCounter++)
        {
            if (tspans[tspanCounter].getAttributeNS("https://launchpad.net/jessyink", "video") == "url")
            {
                url = tspans[tspanCounter].firstChild.nodeValue;
            }
        }

        var rects = node.getElementsByTagNameNS("http://www.w3.org/2000/svg", "rect");

        for (var rectCounter = 0; rectCounter &lt; rects.length; rectCounter++)
        {
            if (rects[rectCounter].getAttributeNS("https://launchpad.net/jessyink", "video") == "rect")
            {
                x = rects[rectCounter].getAttribute("x");
                y = rects[rectCounter].getAttribute("y");
                width = rects[rectCounter].getAttribute("width");
                height = rects[rectCounter].getAttribute("height");
                transform = rects[rectCounter].getAttribute("transform");
            }
        }

        for (var childCounter = 0; childCounter &lt; node.childNodes.length; childCounter++)
        {
            if (node.childNodes[childCounter].nodeType == 1)
            {
                if (node.childNodes[childCounter].style)
                {
                    node.childNodes[childCounter].style.display = 'none';
                }
                else
                {
                    node.childNodes[childCounter].setAttribute("style", "display: none;");
                }
            }
        }

        var foreignNode = document.createElementNS("http://www.w3.org/2000/svg", "foreignObject");
        foreignNode.setAttribute("x", x);
        foreignNode.setAttribute("y", y);
        foreignNode.setAttribute("width", width);
        foreignNode.setAttribute("height", height);
        foreignNode.setAttribute("transform", transform);

        var videoNode = document.createElementNS("http://www.w3.org/1999/xhtml", "video");
        videoNode.setAttribute("src", url);

        foreignNode.appendChild(videoNode);
        node.appendChild(foreignNode);
    }
}

/** Class processing the location hash.
 *
 *    @param str location hash
 */
function LocationHash(str)
{
    this.slideNumber = 0;
    this.effectNumber = 0;

    str = str.substr(1, str.length - 1);

    var parts = str.split('_');

    // Try to extract slide number.
    if (parts.length &gt;= 1)
    {
        try
        {
            var slideNumber = parseInt(parts[0]);

            if (!isNaN(slideNumber))
            {
                this.slideNumber = slideNumber - 1;
            }
        }
        catch (e)
        {
        }
    }

    // Try to extract effect number.
    if (parts.length &gt;= 2)
    {
        try
        {
            var effectNumber = parseInt(parts[1]);

            if (!isNaN(effectNumber))
            {
                this.effectNumber = effectNumber;
            }
        }
        catch (e)
        {
        }
    }
}

/** Class representing an svg matrix.
*/
function matrixSVG()
{
    this.e11 = 0; // a
    this.e12 = 0; // c
    this.e13 = 0; // e
    this.e21 = 0; // b
    this.e22 = 0; // d
    this.e23 = 0; // f
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 0;
}

/** Constructor function.
 *
 *    @param a element a (i.e. 1, 1) as described in the svg standard.
 *    @param b element b (i.e. 2, 1) as described in the svg standard.
 *    @param c element c (i.e. 1, 2) as described in the svg standard.
 *    @param d element d (i.e. 2, 2) as described in the svg standard.
 *    @param e element e (i.e. 1, 3) as described in the svg standard.
 *    @param f element f (i.e. 2, 3) as described in the svg standard.
 */
matrixSVG.prototype.fromSVGElements = function(a, b, c, d, e, f)
{
    this.e11 = a;
    this.e12 = c;
    this.e13 = e;
    this.e21 = b;
    this.e22 = d;
    this.e23 = f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param matrix an svg matrix as described in the svg standard.
 */
matrixSVG.prototype.fromSVGMatrix = function(m)
{
    this.e11 = m.a;
    this.e12 = m.c;
    this.e13 = m.e;
    this.e21 = m.b;
    this.e22 = m.d;
    this.e23 = m.f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param e11 element 1, 1 of the matrix.
 *    @param e12 element 1, 2 of the matrix.
 *    @param e13 element 1, 3 of the matrix.
 *    @param e21 element 2, 1 of the matrix.
 *    @param e22 element 2, 2 of the matrix.
 *    @param e23 element 2, 3 of the matrix.
 *    @param e31 element 3, 1 of the matrix.
 *    @param e32 element 3, 2 of the matrix.
 *    @param e33 element 3, 3 of the matrix.
 */
matrixSVG.prototype.fromElements = function(e11, e12, e13, e21, e22, e23, e31, e32, e33)
{
    this.e11 = e11;
    this.e12 = e12;
    this.e13 = e13;
    this.e21 = e21;
    this.e22 = e22;
    this.e23 = e23;
    this.e31 = e31;
    this.e32 = e32;
    this.e33 = e33;

    return this;
}

/** Constructor function.
 *
 *    @param attrString string value of the "transform" attribute (currently only "matrix" is accepted)
 */
matrixSVG.prototype.fromAttribute = function(attrString)
{
    str = attrString.substr(7, attrString.length - 8);

    str = str.trim();

    strArray = str.split(",");

    // Opera does not use commas to separate the values of the matrix, only spaces.
    if (strArray.length != 6)
        strArray = str.split(" ");

    this.e11 = parseFloat(strArray[0]);
    this.e21 = parseFloat(strArray[1]);
    this.e31 = 0;
    this.e12 = parseFloat(strArray[2]);
    this.e22 = parseFloat(strArray[3]);
    this.e32 = 0;
    this.e13 = parseFloat(strArray[4]);
    this.e23 = parseFloat(strArray[5]);
    this.e33 = 1;

    return this;
}

/** Output function
 *
 *    @return a string that can be used as the "transform" attribute.
 */
matrixSVG.prototype.toAttribute = function()
{
    return "matrix(" + this.e11 + ", " + this.e21 + ", " + this.e12 + ", " + this.e22 + ", " + this.e13 + ", " + this.e23 + ")";
}

/** Matrix nversion.
 *
 *    @return the inverse of the matrix
 */
matrixSVG.prototype.inv = function()
{
    out = new matrixSVG();

    det = this.e11 * (this.e33 * this.e22 - this.e32 * this.e23) - this.e21 * (this.e33 * this.e12 - this.e32 * this.e13) + this.e31 * (this.e23 * this.e12 - this.e22 * this.e13);

    out.e11 =  (this.e33 * this.e22 - this.e32 * this.e23) / det;
    out.e12 = -(this.e33 * this.e12 - this.e32 * this.e13) / det;
    out.e13 =  (this.e23 * this.e12 - this.e22 * this.e13) / det;
    out.e21 = -(this.e33 * this.e21 - this.e31 * this.e23) / det;
    out.e22 =  (this.e33 * this.e11 - this.e31 * this.e13) / det;
    out.e23 = -(this.e23 * this.e11 - this.e21 * this.e13) / det;
    out.e31 =  (this.e32 * this.e21 - this.e31 * this.e22) / det;
    out.e32 = -(this.e32 * this.e11 - this.e31 * this.e12) / det;
    out.e33 =  (this.e22 * this.e11 - this.e21 * this.e12) / det;

    return out;
}

/** Matrix multiplication.
 *
 *    @param op another svg matrix
 *    @return this * op
 */
matrixSVG.prototype.mult = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 * op.e11 + this.e12 * op.e21 + this.e13 * op.e31;
    out.e12 = this.e11 * op.e12 + this.e12 * op.e22 + this.e13 * op.e32;
    out.e13 = this.e11 * op.e13 + this.e12 * op.e23 + this.e13 * op.e33;
    out.e21 = this.e21 * op.e11 + this.e22 * op.e21 + this.e23 * op.e31;
    out.e22 = this.e21 * op.e12 + this.e22 * op.e22 + this.e23 * op.e32;
    out.e23 = this.e21 * op.e13 + this.e22 * op.e23 + this.e23 * op.e33;
    out.e31 = this.e31 * op.e11 + this.e32 * op.e21 + this.e33 * op.e31;
    out.e32 = this.e31 * op.e12 + this.e32 * op.e22 + this.e33 * op.e32;
    out.e33 = this.e31 * op.e13 + this.e32 * op.e23 + this.e33 * op.e33;

    return out;
}

/** Matrix addition.
 *
 *    @param op another svg matrix
 *    @return this + op
 */
matrixSVG.prototype.add = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 + op.e11;
    out.e12 = this.e12 + op.e12;
    out.e13 = this.e13 + op.e13;
    out.e21 = this.e21 + op.e21;
    out.e22 = this.e22 + op.e22;
    out.e23 = this.e23 + op.e23;
    out.e31 = this.e31 + op.e31;
    out.e32 = this.e32 + op.e32;
    out.e33 = this.e33 + op.e33;

    return out;
}

/** Matrix mixing.
 *
 *    @param op another svg matrix
 *    @parma contribOp contribution of the other matrix (0 &lt;= contribOp &lt;= 1)
 *    @return (1 - contribOp) * this + contribOp * op
 */
matrixSVG.prototype.mix = function(op, contribOp)
{
    contribThis = 1.0 - contribOp;
    out = new matrixSVG();

    out.e11 = contribThis * this.e11 + contribOp * op.e11;
    out.e12 = contribThis * this.e12 + contribOp * op.e12;
    out.e13 = contribThis * this.e13 + contribOp * op.e13;
    out.e21 = contribThis * this.e21 + contribOp * op.e21;
    out.e22 = contribThis * this.e22 + contribOp * op.e22;
    out.e23 = contribThis * this.e23 + contribOp * op.e23;
    out.e31 = contribThis * this.e31 + contribOp * op.e31;
    out.e32 = contribThis * this.e32 + contribOp * op.e32;
    out.e33 = contribThis * this.e33 + contribOp * op.e33;

    return out;
}

/** Trimming function for strings.
*/
String.prototype.trim = function()
{
    return this.replace(/^\s+|\s+$/g, '');
}

/** SVGElement.getTransformToElement polyfill */
SVGElement.prototype.getTransformToElement = SVGElement.prototype.getTransformToElement || function(elem) {
    return elem.getScreenCTM().inverse().multiply(this.getScreenCTM());
};</script>
</svg>
