<svg width="102.07mm" height="30.938mm" version="1.1" viewBox="0 0 102.07 30.938" xmlns="http://www.w3.org/2000/svg" xmlns:ns1="https://launchpad.net/jessyink">
 <g transform="translate(-142.28 -9.2035)">
  <path d="m150 17.025a0.099218 0.099218 0 0 0-0.0996 0.09961v8.9922a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.09961v-8.9922a0.099218 0.099218 0 0 0-0.0996-0.099609z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m157.95 21.531-8 4.5a0.099218 0.099218 0 0 0-0.0371 0.13477 0.099218 0.099218 0 0 0 0.13477 0.03711l8-4.5a0.099218 0.099218 0 0 0 0.0371-0.13477 0.099218 0.099218 0 0 0-0.13477-0.03711z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m150.05 17.039a0.099218 0.099218 0 0 0-0.13477 0.03711 0.099218 0.099218 0 0 0 0.0371 0.13476l8 4.4922a0.099218 0.099218 0 0 0 0.13477-0.03711 0.099218 0.099218 0 0 0-0.0371-0.13477z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m148.68 19.018a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h1.3223a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m150.72 19.051a0.066146 0.066146 0 0 0-0.0644 0.06641 0.066146 0.066146 0 0 0 0.0644 0.06641h1.3242a0.066146 0.066146 0 0 0 0.0664-0.06641 0.066146 0.066146 0 0 0-0.0664-0.06641z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m150.65 24.018a0.066146 0.066146 0 0 0-0.0664 0.06641 0.066146 0.066146 0 0 0 0.0664 0.06641h1.3223a0.066146 0.066146 0 0 0 0.0664-0.06641 0.066146 0.066146 0 0 0-0.0664-0.06641z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m151.31 23.357a0.066146 0.066146 0 0 0-0.0664 0.06445v1.3242a0.066146 0.066146 0 0 0 0.0664 0.06641 0.066146 0.066146 0 0 0 0.0664-0.06641v-1.3242a0.066146 0.066146 0 0 0-0.0664-0.06445z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m148.68 24.018a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h1.3223a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m157.98 21.51a0.099218 0.099218 0 0 0-0.0977 0.09961 0.099218 0.099218 0 0 0 0.0977 0.09961h4.0156a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m165 19.014a0.099218 0.099218 0 0 0-0.0996 0.09961v1.3613a0.099218 0.099218 0 0 0 0.0996 0.09766 0.099218 0.099218 0 0 0 0.0996-0.09766v-1.3613a0.099218 0.099218 0 0 0-0.0996-0.099609z" stop-color="#000000" stroke-linecap="round"/>
  <path d="m165 22.547a0.099218 0.099218 0 0 0-0.0996 0.09961v1.4668a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.09961v-1.4668a0.099218 0.099218 0 0 0-0.0996-0.099609z" stop-color="#000000" stroke-linecap="round"/>
  <path d="m163.48 19.9a0.099218 0.099218 0 0 0-0.09961 0.099609v3.2188a0.099218 0.099218 0 0 0 0.0996 0.09766 0.099218 0.099218 0 0 0 0.0977-0.09766v-3.2188a0.099218 0.099218 0 0 0-0.0977-0.09961z" stop-color="#000000" stroke-linecap="round"/>
  <path d="m162.99 19.9a0.099218 0.099218 0 0 0-0.09961 0.099609v3.2188a0.099218 0.099218 0 0 0 0.0996 0.09766 0.099218 0.099218 0 0 0 0.0996-0.09766v-3.2188a0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round"/>
  <path d="m162 21.51a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h0.97852a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round"/>
  <path d="m163.5 22.547a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09766h1.498a0.099218 0.099218 0 0 0 0.0996-0.09766 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round"/>
  <g>
   <path d="m164.25 20.375a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09766h0.69336a0.099218 0.099218 0 0 0 0.0996-0.09766 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
   <path d="m164.42 20.807-0.91678-0.33337 0.91678-0.33337c-0.16669 0.19419-0.16669 0.47172 0 0.66675z" fill-rule="evenodd" stop-color="#000000"/>
  </g>
  <path d="m180.68 28.658a0.099218 0.099218 0 0 0-0.0977 0.09961 0.099218 0.099218 0 0 0 0.0977 0.09766h2.6328a0.099218 0.099218 0 0 0 0.0977-0.09766 0.099218 0.099218 0 0 0-0.0977-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m182 26.525a0.099218 0.099218 0 0 0-0.0996 0.09961v2a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.09961v-2a0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m182 29.525a0.099218 0.099218 0 0 0-0.0996 0.09961v2a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.09961v-2a0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m180.68 29.395a0.099218 0.099218 0 0 0-0.0977 0.09766 0.099218 0.099218 0 0 0 0.0977 0.09961h2.6328a0.099218 0.099218 0 0 0 0.0977-0.09961 0.099218 0.099218 0 0 0-0.0977-0.09766z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <g transform="translate(88.349 65.254)" stroke-width=".19844">
   <title>Resistor_US</title>
   <path d="m86.65-34.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-34.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.688-37.721a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-35.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-35.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-36.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-36.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-37.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.65-38.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <title>Resistor_US</title>
  </g>
  <g transform="translate(132 -50.875)">
   <g transform="matrix(0 .83511 -.85711 0 51.549 43.532)" stroke-width=".23455">
    <path d="m32.299 43.129a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1348a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1348a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.102 44.264a0.11727 0.11727 0 0 0-0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719 0.11719h1.1973a0.11727 0.11727 0 0 0 0.11719-0.11719 0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.102 43.117a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1465a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1465a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.611 42.559-0.5918 0.59375a0.11727 0.11727 0 0 0 0 0.16406 0.11727 0.11727 0 0 0 0.16406 0l0.59375-0.5918a0.11727 0.11727 0 0 0 0-0.16602 0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.611 42.559a0.11727 0.11727 0 0 0 0 0.16602l0.60547 0.60352a0.11727 0.11727 0 0 0 0.16602 0 0.11727 0.11727 0 0 0 0-0.16406l-0.60547-0.60547a0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
   </g>
  </g>
  <g transform="translate(78.349 70.754)" stroke-width=".19844">
   <title>Resistor_US</title>
   <path d="m86.65-34.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-34.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.688-37.721a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-35.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-35.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-36.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-36.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-37.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.65-38.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <title>Resistor_US</title>
  </g>
  <g transform="translate(78.349 63.754)" stroke-width=".19844">
   <title>Resistor_US</title>
   <path d="m86.65-34.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-34.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.688-37.721a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-35.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-35.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-36.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-36.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-37.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.65-38.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <title>Resistor_US</title>
  </g>
  <g transform="matrix(-.44713 0 0 .44713 194.14 -6.8801)" stroke-width=".4438">
   <title>GND</title>
   <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
    <g transform="translate(33.547 3.5594)" stroke-linecap="round">
     <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
     <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
     <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
     <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
    </g>
   </g>
   <title>GND</title>
  </g>
  <g transform="translate(135 -21.875)">
   <g stroke-linecap="round" stroke-linejoin="round">
    <path d="m29.99 38.9a0.099218 0.099218 0 0 0-0.097656 0.099609l0.0078 1a0.099218 0.099218 0 0 0 0.099622 0.099609 0.099218 0.099218 0 0 0 0.099609-0.099609l-0.0078-1a0.099218 0.099218 0 0 0-0.10156-0.09961z" stop-color="#000000" style="paint-order:markers stroke fill"/>
    <path d="m30 40-8e-3 -1" fill="#fff" stop-color="#000000" style="paint-order:markers stroke fill"/>
    <path d="m29 38.9a0.099218 0.099218 0 0 0-0.099609 0.099609 0.099218 0.099218 0 0 0 0.099609 0.099609h2.0137a0.099218 0.099218 0 0 0 0.099609-0.099609 0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" style="paint-order:markers stroke fill"/>
    <path d="m29 39h2.0133" fill="#fff" stop-color="#000000" style="paint-order:markers stroke fill"/>
   </g>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round">
   <path d="m148.68 19.117h-1.6849" stop-color="#000000"/>
   <path d="m146.99 19.018a0.099 0.099 0 0 0-0.0996 0.09961 0.099 0.099 0 0 0 0.0996 0.09961h1.6855a0.099 0.099 0 0 0 0.0977-0.09961 0.099 0.099 0 0 0-0.0977-0.09961z" fill="#000005" stop-color="#000000"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vref">
   <path d="m142.66 19.331-0.37896-1.0266h0.13091l0.22186 0.61874q0.0179 0.0503 0.0455 0.13505 0.0282 0.08406 0.0703 0.21222h-0.0345q0.0406-0.12816 0.0689-0.21222 0.0282-0.08475 0.0455-0.13505l0.21635-0.61874h0.12953l-0.37482 1.0266z"/>
   <path d="m143.25 19.613v-0.47294h0.0726v0.07434h2e-3q0.013-0.03672 0.0412-0.05912 0.0282-0.02239 0.0726-0.02239 0.0103 0 0.0188 8.95e-4 9e-3 8.96e-4 0.0134 0.0018v0.07614q-4e-3 -0.0013-0.0175-0.0031-0.0125-0.0022-0.0291-0.0022-0.026 0-0.0484 0.01209t-0.0358 0.03762-0.0134 0.06583v0.29111zm0.4819 0.01075q-0.0694 0-0.11868-0.0318-0.0488-0.0318-0.0748-0.08733-0.026-0.05598-0.026-0.12719 0-0.07211 0.0273-0.12809 0.0273-0.05598 0.0757-0.08778 0.0484-0.03225 0.11107-0.03225 0.0493 0 0.0887 0.01791 0.0399 0.01792 0.0681 0.05106t0.043 0.07882q0.0152 0.04523 0.0152 0.10032v0.02105h-0.38874v-0.06539h0.3462l-0.0327 0.02284q0-0.04837-0.0175-0.08375-0.017-0.03583-0.0484-0.05509-0.0314-0.01971-0.0739-0.01971-0.0421 0-0.0735 0.01971-0.0309 0.01926-0.0484 0.05509-0.017 0.03538-0.017 0.08375v0.03225q0 0.04882 0.0166 0.08644 0.017 0.03762 0.0493 0.05912 0.0322 0.02105 0.0784 0.02105 0.0336 0 0.0591-0.0103 0.0255-0.01075 0.0421-0.02956 0.017-0.01881 0.0242-0.04344h0.0761q-9e-3 0.04523-0.0372 0.07972-0.0282 0.03404-0.0708 0.0533-0.0421 0.01926-0.0936 0.01926zm0.50295-0.48369v0.06539h-0.25617v-0.06539zm-0.17198 0.47294v-0.55714q0-0.03404 0.0152-0.05867t0.043-0.03807q0.0282-0.01344 0.0663-0.01344 0.0157 0 0.0296 0t0.0179 0v0.06539q-4e-3 0-0.0184 0-0.0139 0-0.0219 0-0.03 0-0.043 0.01299-0.0125 0.01299-0.0125 0.04344v0.5455z" baseline-shift="sub"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vdd">
   <path d="m164.37 16.331-0.37896-1.0266h0.13092l0.22186 0.61874q0.0179 0.0503 0.0455 0.13505 0.0282 0.08406 0.0703 0.21222h-0.0345q0.0407-0.12816 0.0689-0.21222 0.0283-0.08475 0.0455-0.13505l0.21635-0.61874h0.12954l-0.37483 1.0266z"/>
   <path d="m165.14 16.622q-0.0614 0-0.10794-0.0309-0.0461-0.03135-0.0717-0.08644-0.0255-0.05554-0.0255-0.12809 0-0.073 0.0255-0.12809 0.0255-0.05553 0.0717-0.08644 0.0466-0.0309 0.10794-0.0309 0.0309 0 0.0587 9e-3 0.0282 0.0085 0.0511 0.02598 0.0228 0.01747 0.0381 0.04389h9e-4v-0.26424h0.0761v0.66732h-0.0743v-0.07166h-9e-4q-0.017 0.02732-0.0403 0.04523t-0.051 0.02642q-0.0273 9e-3 -0.0582 9e-3zm0.0116-0.06852q0.0439 0 0.0761-0.02195 0.0322-0.02194 0.0497-0.0618t0.0175-0.09316q0-0.05374-0.0175-0.0936t-0.0497-0.0618q-0.0322-0.02195-0.0761-0.02195-0.0408 0-0.0726 0.02015-0.0314 0.02015-0.0493 0.05957-0.0179 0.03941-0.0179 0.09763 0 0.05777 0.0179 0.09719 0.0179 0.03941 0.0493 0.05956 0.0318 0.02015 0.0726 0.02015zm0.50698 0.06852q-0.0614 0-0.10793-0.0309-0.0461-0.03135-0.0717-0.08644-0.0255-0.05554-0.0255-0.12809 0-0.073 0.0255-0.12809 0.0255-0.05553 0.0717-0.08644 0.0466-0.0309 0.10793-0.0309 0.0309 0 0.0587 9e-3 0.0282 0.0085 0.0511 0.02598 0.0228 0.01747 0.0381 0.04389h9e-4v-0.26424h0.0761v0.66732h-0.0744v-0.07166h-8.9e-4q-0.017 0.02732-0.0403 0.04523t-0.0511 0.02642q-0.0273 9e-3 -0.0582 9e-3zm0.0116-0.06852q0.0439 0 0.0761-0.02195 0.0323-0.02194 0.0497-0.0618 0.0175-0.03986 0.0175-0.09316 0-0.05374-0.0175-0.0936t-0.0497-0.0618q-0.0322-0.02195-0.0761-0.02195-0.0408 0-0.0726 0.02015-0.0314 0.02015-0.0493 0.05957-0.0179 0.03941-0.0179 0.09763 0 0.05777 0.0179 0.09719 0.0179 0.03941 0.0493 0.05956 0.0318 0.02015 0.0726 0.02015z" baseline-shift="sub"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="R1">
   <path d="m167.19 28.051v-1.0266h0.38103q0.10749 0 0.18534 0.0379 0.0786 0.0379 0.12058 0.10818 0.0427 0.06959 0.0427 0.16536 0 0.09577-0.0455 0.16605-0.0448 0.07028-0.1254 0.10818-0.0806 0.0379-0.18742 0.0379h-0.30248v-0.11024h0.30937q0.071 0 0.12196-0.02412 0.0517-0.0248 0.0792-0.07028 0.0276-0.04547 0.0276-0.10749 0-0.0627-0.0282-0.10749-0.0276-0.04479-0.0792-0.0689-0.051-0.02481-0.12265-0.02481h-0.25287v0.9164zm0.59738 0-0.24805-0.46164h0.14056l0.25218 0.46164z"/>
   <path d="m168.25 27.666v0.66732h-0.0779v-0.58401h-4.5e-4l-0.16616 0.11017v-0.08241l0.16661-0.11107z" baseline-shift="sub"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="R2">
   <path d="m166.79 35.051v-1.0266h0.38103q0.10748 0 0.18534 0.0379 0.0786 0.0379 0.12058 0.10818 0.0427 0.06959 0.0427 0.16536 0 0.09577-0.0455 0.16605-0.0448 0.07028-0.12541 0.10818-0.0806 0.0379-0.18741 0.0379h-0.30248v-0.11024h0.30937q0.071 0 0.12196-0.02412 0.0517-0.0248 0.0792-0.07028 0.0276-0.04548 0.0276-0.10749 0-0.0627-0.0283-0.10749-0.0276-0.04479-0.0792-0.0689-0.051-0.02481-0.12265-0.02481h-0.25287v0.9164zm0.59738 0-0.24805-0.46164h0.14056l0.25218 0.46164z"/>
   <path d="m167.62 35.333v-0.06763l0.23737-0.21677q0.0426-0.03896 0.069-0.06852 0.0269-0.02956 0.0394-0.05777t0.0125-0.06225q0-0.0412-0.0166-0.07121t-0.047-0.04613q-0.0305-0.01612-0.073-0.01612-0.0457 0-0.0779 0.01926-0.0318 0.01881-0.0488 0.05374-0.017 0.03449-0.017 0.08196h-0.0752q0-0.06673 0.0269-0.11779 0.0273-0.05106 0.0766-0.07972 0.0493-0.02911 0.1151-0.02911 0.0627 0 0.11062 0.02598 0.0479 0.02553 0.0752 0.07121 0.0273 0.04523 0.0273 0.1048 0 0.043-0.0157 0.08106-0.0157 0.03762-0.0479 0.07569-0.0318 0.03807-0.0811 0.08285l-0.18049 0.16392v8.96e-4h0.32918v0.07166z" baseline-shift="sub"/>
  </g>
  <path d="m148.68 24.018-1.6758 0.007813a0.09901 0.09901 0 0 0-0.0996 0.09961v7a0.09901 0.09901 0 0 0 0.0996 0.099608h18a0.099 0.099 0 0 0 0.09961-0.099609 0.099 0.099 0 0 0-0.09961-0.099609h-17.9v-6.8008l1.5781-0.0078a0.099 0.099 0 0 0 0.0977-0.09961 0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m165 30.025a0.099 0.099 0 0 0-0.0996 0.09961v2a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-2a0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m165.3 31.125a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m165.3 31.125a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m165 24.025a0.099 0.099 0 0 0-0.0996 0.09961v0.95898a0.099 0.099 0 0 0 0.0996 0.09766 0.099 0.099 0 0 0 0.0996-0.09766v-0.95898a0.099 0.099 0 0 0-0.0996-0.099609z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m165 18.025a0.099 0.099 0 0 0-0.0996 0.09961v1a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-1a0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <g transform="translate(171.49 -45.401)">
   <g transform="matrix(0 .83511 -.85711 0 51.549 43.532)" stroke-width=".23455">
    <path d="m32.299 43.129a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1348a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1348a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.102 44.264a0.11727 0.11727 0 0 0-0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719 0.11719h1.1973a0.11727 0.11727 0 0 0 0.11719-0.11719 0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.102 43.117a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1465a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1465a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.611 42.559-0.5918 0.59375a0.11727 0.11727 0 0 0 0 0.16406 0.11727 0.11727 0 0 0 0.16406 0l0.59375-0.5918a0.11727 0.11727 0 0 0 0-0.16602 0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.611 42.559a0.11727 0.11727 0 0 0 0 0.16602l0.60547 0.60352a0.11727 0.11727 0 0 0 0.16602 0 0.11727 0.11727 0 0 0 0-0.16406l-0.60547-0.60547a0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
   </g>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vout">
   <path d="m187.36 25.151-0.37896-1.0266h0.13092l0.22186 0.61874q0.0179 0.0503 0.0455 0.13505 0.0283 0.08406 0.0703 0.21222h-0.0345q0.0407-0.12816 0.0689-0.21222 0.0282-0.08475 0.0455-0.13505l0.21635-0.61874h0.12954l-0.37483 1.0266z"/>
   <path d="m188.14 25.444q-0.0654 0-0.1151-0.03135-0.0493-0.0318-0.077-0.08733-0.0273-0.05554-0.0273-0.12764 0-0.07255 0.0273-0.12854 0.0278-0.05598 0.077-0.08778 0.0497-0.0318 0.1151-0.0318 0.0658 0 0.1151 0.0318t0.0766 0.08778q0.0278 0.05598 0.0278 0.12854 0 0.07211-0.0278 0.12764-0.0273 0.05553-0.0766 0.08733-0.0493 0.03135-0.1151 0.03135zm0-0.06897q0.0448 0 0.0766-0.02195t0.0488-0.0618q0.017-0.04031 0.017-0.0936 0-0.05419-0.017-0.09405-0.017-0.04031-0.0488-0.0627t-0.0766-0.02239q-0.0443 0-0.0766 0.02239-0.0318 0.02194-0.0488 0.06225t-0.017 0.0945q0 0.05374 0.017 0.0936t0.0488 0.0618q0.0318 0.02195 0.0766 0.02195zm0.4819 0.06718q-0.0475 0-0.0873-0.0206-0.0394-0.02105-0.0632-0.0627-0.0233-0.0421-0.0233-0.1048v-0.2938h0.0761v0.28842q0 0.06136 0.0296 0.09271 0.0296 0.0309 0.0824 0.0309 0.0345 0 0.0627-0.01388t0.0448-0.04389q0.017-0.03001 0.017-0.07748v-0.27678h0.0761v0.47294h-0.0743v-0.11465h0.0215q-0.0233 0.0636-0.0649 0.0936-0.0412 0.03001-0.0972 0.03001zm0.5343-0.4819v0.06539h-0.25618v-0.06539zm-0.17198-0.12899h0.0761v0.48727q0 0.02732 0.0112 0.03852 0.0116 0.01075 0.0408 0.01075 0.0103 0 0.0219 0 0.0121 0 0.022 0v0.06539q-0.0117 0-0.0255 0-0.0139 0-0.0255 0-0.0609 0-0.0909-0.02642-0.03-0.02687-0.03-0.08017z" baseline-shift="sub"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vfb">
   <path d="m155.61 30.514-0.37896-1.0266h0.13091l0.22187 0.61874q0.0179 0.0503 0.0455 0.13505 0.0282 0.08406 0.0703 0.21222h-0.0344q0.0406-0.12816 0.0689-0.21222 0.0283-0.08475 0.0455-0.13505l0.21635-0.61874h0.12954l-0.37483 1.0266z"/>
   <path d="m156.4 30.324v0.06539h-0.25618v-0.06539zm-0.17198 0.47294v-0.55714q0-0.03404 0.0152-0.05867t0.043-0.03807q0.0282-0.01344 0.0663-0.01344 0.0157 0 0.0296 0t0.0179 0v0.06539q-4e-3 0-0.0184 0-0.0139 0-0.022 0-0.03 0-0.043 0.01299-0.0125 0.01299-0.0125 0.04344v0.5455zm0.47115 9e-3q-0.0305 0-0.0582-9e-3 -0.0278-0.0085-0.0511-0.02642-0.0233-0.01791-0.0403-0.04523h-9e-4v0.07166h-0.0743v-0.66731h0.0761v0.26424h9e-4q0.0152-0.02642 0.0381-0.04389 0.0228-0.01747 0.0511-0.02598 0.0282-9e-3 0.0587-9e-3 0.0618 0 0.10794 0.0309 0.0461 0.0309 0.0717 0.08644 0.0255 0.05509 0.0255 0.12809 0 0.07255-0.0255 0.12809-0.0255 0.05509-0.0717 0.08644-0.0461 0.0309-0.10794 0.0309zm-0.0116-0.06852q0.0412 0 0.0726-0.02015t0.0493-0.05957q0.0179-0.03941 0.0179-0.09719 0-0.05822-0.0179-0.09763t-0.0493-0.05957q-0.0314-0.02015-0.0726-0.02015-0.0439 0-0.0761 0.02195-0.0322 0.02194-0.0497 0.0618t-0.0175 0.0936q0 0.0533 0.0175 0.09316t0.0497 0.0618q0.0323 0.02194 0.0761 0.02194z" baseline-shift="sub"/>
  </g>
  <path d="m165 37.025a0.099 0.099 0 0 0-0.0996 0.09961v0.83594a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.83594a0.099 0.099 0 0 0-0.0996-0.099609z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m165 24.506a0.099 0.099 0 0 0-0.0996 0.09766 0.099 0.099 0 0 0 0.0996 0.09961h17a0.099 0.099 0 0 0 0.0996-0.09961 0.099 0.099 0 0 0-0.0996-0.09766z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m165.3 24.604a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m165.3 24.604a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <g transform="matrix(-.44713 0 0 .44713 204.14 -12.38)" stroke-width=".4438">
   <title>GND</title>
   <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
    <g transform="translate(33.547 3.5594)" stroke-linecap="round">
     <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
     <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
     <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
     <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
    </g>
   </g>
   <title>GND</title>
  </g>
  <path d="m175 31.525a0.099 0.099 0 0 0-0.0996 0.09961v0.83594a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.83594a0.099 0.099 0 0 0-0.0996-0.099609z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <g transform="matrix(-.44713 0 0 .44713 211.14 -12.38)" stroke-width=".4438">
   <title>GND</title>
   <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
    <g transform="translate(33.547 3.5594)" stroke-linecap="round">
     <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
     <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
     <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
     <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
    </g>
   </g>
   <title>GND</title>
  </g>
  <path d="m182 31.525a0.099 0.099 0 0 0-0.0996 0.09961v0.83594a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.83594a0.099 0.099 0 0 0-0.0996-0.099609z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m182 24.506a0.099 0.099 0 0 0-0.0996 0.09766v2.0215a0.099 0.099 0 0 0 0.0996 0.099609 0.099 0.099 0 0 0 0.09961-0.099609v-2.0215a0.099 0.099 0 0 0-0.09961-0.097657z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m175 24.506a0.099 0.099 0 0 0-0.0996 0.09766v2.0215a0.099 0.099 0 0 0 0.0996 0.099609 0.099 0.099 0 0 0 0.09961-0.099609v-2.0215a0.099 0.099 0 0 0-0.09961-0.097657z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m175.3 24.604a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m175.3 24.604a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="RL">
   <path d="m177.22 29.627v-1.0266h0.38102q0.10749 0 0.18535 0.0379 0.0785 0.0379 0.12058 0.10818 0.0427 0.06959 0.0427 0.16536 0 0.09577-0.0455 0.16605-0.0448 0.07028-0.1254 0.10818-0.0806 0.0379-0.18741 0.0379h-0.30248v-0.11024h0.30937q0.071 0 0.12195-0.02412 0.0517-0.0248 0.0792-0.07028 0.0276-0.04548 0.0276-0.10749 0-0.0627-0.0283-0.10749-0.0276-0.04479-0.0792-0.0689-0.051-0.02481-0.12264-0.02481h-0.25287v0.9164zm0.59738 0-0.24805-0.46164h0.14056l0.25218 0.46164z"/>
   <path d="m178.07 29.909v-0.66731h0.0806v0.59566h0.32156v0.07166z" baseline-shift="sub"/>
  </g>
  <path d="m182 24.506a0.099 0.099 0 0 0-0.0996 0.09766 0.099 0.099 0 0 0 0.0996 0.09961h3a0.099 0.099 0 0 0 0.0996-0.09961 0.099 0.099 0 0 0-0.0996-0.09766z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m182.3 24.604a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m182.3 24.604a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="CL">
   <path d="m185.19 29.495q-0.14194 0-0.24873-0.06752-0.1068-0.06821-0.16675-0.18741-0.0593-0.11989-0.0593-0.27423 0-0.15572 0.0593-0.27492 0.0593-0.11989 0.16606-0.18741 0.10748-0.06821 0.24942-0.06821 0.0806 0 0.1509 0.02412 0.071 0.02411 0.12678 0.07028 0.0565 0.04547 0.0937 0.10955 0.0372 0.06408 0.0517 0.14469h-0.12678q-0.0124-0.05581-0.0393-0.09922t-0.0655-0.07304q-0.0386-0.03032-0.0875-0.04548-0.0482-0.01516-0.10404-0.01516-0.10817 0-0.18672 0.05305-0.0786 0.05237-0.12127 0.14607-0.0427 0.09302-0.0427 0.21566 0 0.12196 0.0427 0.21497 0.0427 0.09302 0.12127 0.14607 0.0786 0.05237 0.18672 0.05237 0.0558 0 0.10404-0.01516 0.0482-0.01516 0.0868-0.04479t0.0655-0.07235q0.0276-0.04341 0.0406-0.09922h0.12609q-0.0138 0.07993-0.0517 0.144-0.0372 0.06408-0.0937 0.10955-0.0558 0.04547-0.12678 0.06959-0.0703 0.02412-0.1509 0.02412z"/>
   <path d="m185.74 29.761v-0.66731h0.0806v0.59566h0.32157v0.07166z" baseline-shift="sub"/>
  </g>
  <path d="m205.01 17.033a0.099218 0.099218 0 0 0-0.0996 0.09961v8.9922a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.09961v-8.9922a0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m205.06 17.047a0.099218 0.099218 0 0 0-0.13477 0.03711 0.099218 0.099218 0 0 0 0.0371 0.13477l8 4.5a0.099218 0.099218 0 0 0 0.13477-0.03711 0.099218 0.099218 0 0 0-0.0371-0.13477z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m212.96 21.547-8 4.4922a0.099218 0.099218 0 0 0-0.0371 0.13477 0.099218 0.099218 0 0 0 0.13477 0.03711l8-4.4922a0.099218 0.099218 0 0 0 0.0371-0.13477 0.099218 0.099218 0 0 0-0.13477-0.03711z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m203.69 24.033a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h1.3223a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m205.73 24.066a0.066146 0.066146 0 0 0-0.0644 0.06641 0.066146 0.066146 0 0 0 0.0644 0.06641h1.3242a0.066146 0.066146 0 0 0 0.0664-0.06641 0.066146 0.066146 0 0 0-0.0664-0.06641z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m205.66 19.1a0.066146 0.066146 0 0 0-0.0664 0.06641 0.066146 0.066146 0 0 0 0.0664 0.06641h1.3223a0.066146 0.066146 0 0 0 0.0664-0.06641 0.066146 0.066146 0 0 0-0.0664-0.06641z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m206.32 18.438a0.066146 0.066146 0 0 0-0.0664 0.06641v1.3223a0.066146 0.066146 0 0 0 0.0664 0.06641 0.066146 0.066146 0 0 0 0.0664-0.06641v-1.3223a0.066146 0.066146 0 0 0-0.0664-0.06641z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m203.69 19.033a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h1.3223a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m212.99 21.518a0.099218 0.099218 0 0 0-0.0977 0.09961 0.099218 0.099218 0 0 0 0.0977 0.09766h4.0156a0.099218 0.099218 0 0 0 0.0996-0.09766 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m235.69 28.666a0.099218 0.099218 0 0 0-0.0977 0.09961 0.099218 0.099218 0 0 0 0.0977 0.09766h2.6328a0.099218 0.099218 0 0 0 0.0977-0.09766 0.099218 0.099218 0 0 0-0.0977-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m237.01 26.533a0.099218 0.099218 0 0 0-0.0996 0.09961v2a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.09961v-2a0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m237.01 29.533a0.099218 0.099218 0 0 0-0.0996 0.09961v2a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.09961v-2a0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m235.69 29.4a0.099218 0.099218 0 0 0-0.0977 0.09961 0.099218 0.099218 0 0 0 0.0977 0.09961h2.6328a0.099218 0.099218 0 0 0 0.0977-0.09961 0.099218 0.099218 0 0 0-0.0977-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <g transform="translate(143.36 65.262)" stroke-width=".19844">
   <title>Resistor_US</title>
   <path d="m86.65-34.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-34.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.688-37.721a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-35.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-35.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-36.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-36.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-37.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.65-38.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <title>Resistor_US</title>
  </g>
  <g transform="translate(187.01 -50.868)">
   <g transform="matrix(0 .83511 -.85711 0 51.549 43.532)" stroke-width=".23455">
    <path d="m32.299 43.129a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1348a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1348a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.102 44.264a0.11727 0.11727 0 0 0-0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719 0.11719h1.1973a0.11727 0.11727 0 0 0 0.11719-0.11719 0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.102 43.117a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1465a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1465a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.611 42.559-0.5918 0.59375a0.11727 0.11727 0 0 0 0 0.16406 0.11727 0.11727 0 0 0 0.16406 0l0.59375-0.5918a0.11727 0.11727 0 0 0 0-0.16602 0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.611 42.559a0.11727 0.11727 0 0 0 0 0.16602l0.60547 0.60352a0.11727 0.11727 0 0 0 0.16602 0 0.11727 0.11727 0 0 0 0-0.16406l-0.60547-0.60547a0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
   </g>
  </g>
  <g transform="translate(133.36 70.762)" stroke-width=".19844">
   <title>Resistor_US</title>
   <path d="m86.65-34.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-34.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.688-37.721a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-35.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-35.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-36.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-36.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-37.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.65-38.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <title>Resistor_US</title>
  </g>
  <g transform="translate(133.36 63.762)" stroke-width=".19844">
   <title>Resistor_US</title>
   <path d="m86.65-34.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-34.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.688-37.721a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-35.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-35.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-36.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-36.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-37.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.65-38.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <title>Resistor_US</title>
  </g>
  <g transform="matrix(-.44713 0 0 .44713 249.15 -6.8725)" stroke-width=".4438">
   <title>GND</title>
   <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
    <g transform="translate(33.547 3.5594)" stroke-linecap="round">
     <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
     <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
     <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
     <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
    </g>
   </g>
   <title>GND</title>
  </g>
  <g transform="translate(190.01 -21.868)">
   <g stroke-linecap="round" stroke-linejoin="round">
    <path d="m29.99 38.9a0.099218 0.099218 0 0 0-0.097656 0.099609l0.0078 1a0.099218 0.099218 0 0 0 0.099622 0.099609 0.099218 0.099218 0 0 0 0.099609-0.099609l-0.0078-1a0.099218 0.099218 0 0 0-0.10156-0.09961z" stop-color="#000000" style="paint-order:markers stroke fill"/>
    <path d="m30 40-8e-3 -1" fill="#fff" stop-color="#000000" style="paint-order:markers stroke fill"/>
    <path d="m29 38.9a0.099218 0.099218 0 0 0-0.099609 0.099609 0.099218 0.099218 0 0 0 0.099609 0.099609h2.0137a0.099218 0.099218 0 0 0 0.099609-0.099609 0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" style="paint-order:markers stroke fill"/>
    <path d="m29 39h2.0133" fill="#fff" stop-color="#000000" style="paint-order:markers stroke fill"/>
   </g>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round">
   <path d="m203.68 19.125h-1.6849" stop-color="#000000"/>
   <path d="m202 19.025a0.099 0.099 0 0 0-0.0996 0.09961 0.099 0.099 0 0 0 0.0996 0.09961h1.6856a0.099 0.099 0 0 0 0.0976-0.09961 0.099 0.099 0 0 0-0.0976-0.09961z" fill="#000005" stop-color="#000000"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vref">
   <path d="m198.24 18.313-0.61047 1.0259h-0.1819l-0.13642-1.0259h0.14193l0.11231 0.90124 0.52917-0.90124z"/>
   <path d="m198.55 19.209h-4e-3q-0.0179-0.0045-0.0336-0.0063-0.0152-0.0022-0.0372-0.0022-0.0421 0-0.0838 0.01926-0.0412 0.01881-0.0793 0.04568l-0.0806 0.35516h-0.0851l0.11421-0.50026h0.0851l-0.017 0.0739q0.0596-0.04165 0.10077-0.05777 0.0417-0.01612 0.0797-0.01612 0.0219 0 0.0318 0.0013 0.01 8.96e-4 0.0287 4e-3zm0.39233 0.10704q2e-3 -0.01299 3e-3 -0.02195 8.9e-4 -9e-3 8.9e-4 -0.01971 0-0.04792-0.0264-0.07479-0.026-0.02687-0.0838-0.02687-0.0636 0-0.11286 0.03941-0.0493 0.03941-0.0667 0.1039zm-0.1684 0.31619q-0.1039 0-0.16302-0.04882-0.0591-0.04882-0.0591-0.14287 0-0.13749 0.0869-0.23558 0.0869-0.09853 0.21497-0.09853 0.0851 0 0.13033 0.04255 0.0452 0.0421 0.0452 0.11868 0 0.01344-4e-3 0.04255t-0.0121 0.06763h-0.36859q-3e-3 0.01299-4e-3 0.02553-8.9e-4 0.01254-8.9e-4 0.02329 0 0.06315 0.0385 0.09943 0.0385 0.03583 0.10928 0.03583 0.0493 0 0.10122-0.01926 0.0524-0.01926 0.0878-0.04344h5e-3l-0.0184 0.09092q-0.0224 0.0081-0.0403 0.01478-0.0179 0.0067-0.0457 0.01344-0.0278 0.0067-0.0493 0.0103t-0.0537 0.0036zm0.71703-0.63014h-4e-3q-0.013-0.0045-0.0345-0.0085t-0.0385-4e-3q-0.0551 0-0.0829 0.02777-0.0273 0.02777-0.0412 0.08599l-4e-3 0.01702h0.15183l-0.0161 0.06718h-0.14914l-0.0976 0.43308h-0.0851l0.0976-0.43308h-0.0569l0.0161-0.06718h0.0569l4e-3 -0.01657q0.0184-0.08778 0.0717-0.13615 0.0537-0.04837 0.13794-0.04837 0.0282 0 0.0511 0.0027 0.0228 0.0027 0.0412 0.0063z" baseline-shift="sub"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vdd">
   <path d="m220 15.313-0.61047 1.0259h-0.1819l-0.13642-1.0259h0.14193l0.11231 0.90124 0.52917-0.90124z"/>
   <path d="m220.47 15.924-0.16123 0.69687h-0.0842l0.0121-0.0524q-0.0569 0.03896-0.0918 0.0524-0.0345 0.01388-0.0752 0.01388-0.0708 0-0.11241-0.04479-0.0412-0.04479-0.0412-0.13033 0-0.07211 0.0224-0.13615 0.0224-0.06449 0.0609-0.11286 0.0381-0.04792 0.09-0.07569 0.052-0.02821 0.11018-0.02821 0.0399 0 0.0735 0.0085t0.0627 0.02553l0.0502-0.21676zm-0.15048 0.28663q-0.03-0.01568-0.0591-0.02284-0.0287-0.0076-0.0614-0.0076-0.0466 0-0.0833 0.02239-0.0363 0.02239-0.0623 0.06136-0.0237 0.03538-0.0367 0.08509-0.0125 0.04971-0.0125 0.09629 0 0.05464 0.0233 0.08375 0.0237 0.02866 0.0766 0.02866 0.0376 0 0.0766-0.01881 0.0394-0.01881 0.0726-0.0412zm0.72195-0.28663-0.16123 0.69687h-0.0842l0.0121-0.0524q-0.0569 0.03896-0.0918 0.0524-0.0345 0.01388-0.0752 0.01388-0.0708 0-0.11241-0.04479-0.0412-0.04479-0.0412-0.13033 0-0.07211 0.0224-0.13615 0.0224-0.06449 0.0609-0.11286 0.0381-0.04792 0.09-0.07569 0.052-0.02821 0.11017-0.02821 0.0399 0 0.0734 0.0085 0.0336 0.0085 0.0627 0.02553l0.0502-0.21676zm-0.15048 0.28663q-0.03-0.01568-0.0591-0.02284-0.0287-0.0076-0.0614-0.0076-0.0466 0-0.0833 0.02239-0.0363 0.02239-0.0623 0.06136-0.0237 0.03538-0.0367 0.08509-0.0125 0.04971-0.0125 0.09629 0 0.05464 0.0233 0.08375 0.0237 0.02866 0.0766 0.02866 0.0376 0 0.0766-0.01881 0.0394-0.01881 0.0726-0.0412z" baseline-shift="sub"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="R1">
   <path d="m222.68 27.287q0-0.03652-0.011-0.06132-0.011-0.02549-0.0338-0.04341-0.0262-0.02136-0.0641-0.02963-0.0379-0.0083-0.093-0.0083h-0.15434l-0.0916 0.3955h0.14469q0.0675 0 0.11714-0.0124 0.0496-0.0124 0.0903-0.04341 0.0455-0.03445 0.0703-0.08613 0.0255-0.05237 0.0255-0.11093zm0.15296 0.77101h-0.16054l-0.27009-0.40997h-0.19499l-0.0944 0.40997h-0.1378l0.23633-1.0259h0.27974q0.0937 0 0.15227 0.0124 0.0586 0.01171 0.10198 0.04341 0.0386 0.02825 0.0606 0.06821t0.022 0.09991q0 0.12816-0.0806 0.22531-0.0799 0.09646-0.21015 0.13436z"/>
   <path d="m223.34 28.341h-0.36187l0.0152-0.06494h0.13705l0.1048-0.45324h-0.13884l0.013-0.05777q0.0775 0 0.12003-0.0215 0.043-0.02195 0.0573-0.07166h0.0699l-0.13929 0.60417h0.13795z" baseline-shift="sub"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="R2">
   <path d="m222.37 34.287q0-0.03652-0.011-0.06132-0.011-0.02549-0.0338-0.04341-0.0262-0.02136-0.0641-0.02963-0.0379-0.0083-0.093-0.0083h-0.15434l-0.0916 0.3955h0.14469q0.0675 0 0.11714-0.0124 0.0496-0.0124 0.0903-0.04341 0.0455-0.03445 0.0703-0.08613 0.0255-0.05237 0.0255-0.11093zm0.15296 0.77101h-0.16054l-0.27009-0.40997h-0.19499l-0.0944 0.40997h-0.1378l0.23633-1.0259h0.27974q0.0937 0 0.15227 0.0124 0.0586 0.01171 0.10198 0.04341 0.0386 0.02825 0.0606 0.06821 0.0221 0.03996 0.0221 0.09991 0 0.12816-0.0806 0.22531-0.0799 0.09646-0.21015 0.13436z"/>
   <path d="m223.07 35.341h-0.4519l0.0211-0.0936q0.0632-0.04613 0.10704-0.07838 0.0443-0.03269 0.10659-0.08241 0.10928-0.08733 0.15407-0.1469 0.0452-0.06001 0.0452-0.11644 0-0.04389-0.0313-0.06628-0.0309-0.02239-0.0797-0.02239-0.0399 0-0.0914 0.01523-0.0511 0.01478-0.10032 0.04299h-4e-3l0.0179-0.09092q0.0354-0.01612 0.0905-0.02866 0.0551-0.01299 0.1057-0.01299 0.09 0 0.13883 0.03941 0.0488 0.03896 0.0488 0.1057 0 0.07211-0.0412 0.1366-0.0412 0.06404-0.14421 0.14959-0.0614 0.05061-0.1263 0.09853-0.0645 0.04747-0.10659 0.07748h0.35829z" baseline-shift="sub"/>
  </g>
  <path d="m203.68 24.025-1.6758 0.0078a0.09901 0.09901 0 0 0-0.0996 0.09961v7a0.09901 0.09901 0 0 0 0.0996 0.09961h18a0.099 0.099 0 0 0 0.0996-0.09961 0.099 0.099 0 0 0-0.0996-0.09961h-17.9v-6.8027l1.5781-0.0059a0.099 0.099 0 0 0 0.0976-0.09961 0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m220.01 30.033a0.099 0.099 0 0 0-0.0996 0.09961v2a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-2a0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m220.3 31.132a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m220.3 31.132a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m220.01 24.033a0.099 0.099 0 0 0-0.0996 0.09961v0.95898a0.099 0.099 0 0 0 0.0996 0.09766 0.099 0.099 0 0 0 0.0996-0.09766v-0.95898a0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m220.01 18.033a0.099 0.099 0 0 0-0.0996 0.09961v1a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-1a0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <g transform="translate(226.5 -45.393)">
   <g transform="matrix(0 .83511 -.85711 0 51.549 43.532)" stroke-width=".23455">
    <path d="m32.299 43.129a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1348a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1348a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.102 44.264a0.11727 0.11727 0 0 0-0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719 0.11719h1.1973a0.11727 0.11727 0 0 0 0.11719-0.11719 0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.102 43.117a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1465a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1465a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.611 42.559-0.5918 0.59375a0.11727 0.11727 0 0 0 0 0.16406 0.11727 0.11727 0 0 0 0.16406 0l0.59375-0.5918a0.11727 0.11727 0 0 0 0-0.16602 0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.611 42.559a0.11727 0.11727 0 0 0 0 0.16602l0.60547 0.60352a0.11727 0.11727 0 0 0 0.16602 0 0.11727 0.11727 0 0 0 0-0.16406l-0.60547-0.60547a0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
   </g>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vout">
   <path d="m242.94 24.132-0.61047 1.0259h-0.1819l-0.13642-1.0259h0.14193l0.11231 0.90124 0.52917-0.90124z"/>
   <path d="m243.33 25.117q0 0.06718-0.0206 0.12898-0.0206 0.0618-0.0582 0.10749-0.039 0.04747-0.09 0.07435-0.0511 0.02642-0.11913 0.02642-0.0891 0-0.13928-0.05061-0.0497-0.05106-0.0497-0.14063 0-0.06718 0.0202-0.12809 0.0206-0.06091 0.0591-0.10838 0.0372-0.04568 0.0909-0.073 0.0542-0.02732 0.11824-0.02732 0.0864 0 0.13749 0.04927 0.0511 0.04926 0.0511 0.14152zm-0.13705 0.189q0.0242-0.03583 0.0367-0.08285 0.013-0.04703 0.013-0.09943 0-0.0627-0.03-0.09495t-0.0847-0.03225q-0.0434 0-0.0779 0.02105-0.0345 0.0206-0.0596 0.05688-0.0242 0.03538-0.0372 0.08286-0.013 0.04747-0.013 0.09853 0 0.0618 0.03 0.09495 0.03 0.03314 0.0851 0.03314 0.043 0 0.0779-0.0206t0.0596-0.05733zm0.73225-0.3659-0.11554 0.50026h-0.0842l0.013-0.05553q-0.0479 0.03269-0.0896 0.05106-0.0412 0.01836-0.0873 0.01836-0.0645 0-0.10077-0.03225-0.0363-0.03269-0.0363-0.09495 0-0.01523 2e-3 -0.02956t6e-3 -0.03269l0.0748-0.3247h0.0842l-0.0658 0.28484q-4e-3 0.01747-8e-3 0.03986t-4e-3 0.03538q0 0.03852 0.0193 0.05777 0.0197 0.01926 0.0667 0.01926 0.0331 0 0.0757-0.01926 0.043-0.01926 0.0793-0.04434l0.086-0.37352zm0.42547 0-0.0152 0.06808h-0.17377l-0.0538 0.23065q-4e-3 0.01747-8e-3 0.04031-4e-3 0.02239-4e-3 0.03583 0 0.03269 0.0166 0.04882 0.0166 0.01568 0.0614 0.01568 0.0184 0 0.0434-0.0063 0.0255-0.0063 0.0345-0.0099h4e-3l-0.0157 0.07255q-0.0251 0.0063-0.0538 0.0103-0.0282 4e-3 -0.0502 4e-3 -0.0618 0-0.0958-0.02687-0.0336-0.02732-0.0336-0.08599 0-0.01433 2e-3 -0.02821 2e-3 -0.01433 6e-3 -0.03225l0.0623-0.26872h-0.0569l0.0152-0.06808h0.0569l0.0336-0.14376h0.0842l-0.0336 0.14376z" baseline-shift="sub"/>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vfb">
   <path d="m211.24 29.496-0.61047 1.0259h-0.1819l-0.13643-1.0259h0.14194l0.11231 0.90124 0.52917-0.90124z"/>
   <path d="m211.55 30.186h-4e-3q-0.013-0.0045-0.0345-0.0085t-0.0385-4e-3q-0.0551 0-0.0829 0.02777-0.0273 0.02777-0.0412 0.08599l-4e-3 0.01702h0.15182l-0.0161 0.06718h-0.14914l-0.0976 0.43308h-0.0851l0.0976-0.43308h-0.0569l0.0161-0.06718h0.0569l4e-3 -0.01657q0.0184-0.08778 0.0717-0.13615 0.0538-0.04837 0.13794-0.04837 0.0282 0 0.0511 0.0027 0.0228 0.0027 0.0412 0.0063zm0.42367 0.27633q0 0.073-0.0228 0.13928-0.0228 0.06628-0.0609 0.11331-0.0399 0.04926-0.0891 0.07659-0.0493 0.02687-0.10883 0.02687-0.0399 0-0.0748-0.01075-0.0345-0.0103-0.0618-0.02777l-0.0112 0.02463h-0.0788l0.16078-0.69687h0.0842l-0.0573 0.24901q0.0417-0.02911 0.0815-0.04747 0.0399-0.01881 0.0887-0.01881 0.073 0 0.11152 0.04523 0.039 0.04523 0.039 0.12674zm-0.13838 0.20109q0.0251-0.03896 0.0376-0.08554t0.0125-0.09943q0-0.0533-0.0233-0.08196-0.0233-0.02911-0.0743-0.02911-0.0372 0-0.077 0.01836-0.0399 0.01836-0.0744 0.04165l-0.0658 0.28618q0.0287 0.01523 0.0555 0.02374 0.0273 0.0085 0.0649 0.0085 0.0466 0 0.0833-0.02284t0.0609-0.05957z" baseline-shift="sub"/>
  </g>
  <path d="m220.01 37.033a0.099 0.099 0 0 0-0.0996 0.09961v0.83594a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.83594a0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m220.01 24.512a0.099 0.099 0 0 0-0.0996 0.09961 0.099 0.099 0 0 0 0.0996 0.09961h17a0.099 0.099 0 0 0 0.0996-0.09961 0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m220.3 24.612a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m220.3 24.612a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <g transform="matrix(-.44713 0 0 .44713 259.15 -12.372)" stroke-width=".4438">
   <title>GND</title>
   <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
    <g transform="translate(33.547 3.5594)" stroke-linecap="round">
     <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
     <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
     <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
     <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
    </g>
   </g>
   <title>GND</title>
  </g>
  <path d="m230.01 31.533a0.099 0.099 0 0 0-0.0996 0.09961v0.83594a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.83594a0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <g transform="matrix(-.44713 0 0 .44713 266.15 -12.372)" stroke-width=".4438">
   <title>GND</title>
   <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
    <g transform="translate(33.547 3.5594)" stroke-linecap="round">
     <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
     <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
     <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
     <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
    </g>
   </g>
   <title>GND</title>
  </g>
  <path d="m237.01 31.533a0.099 0.099 0 0 0-0.0996 0.09961v0.83594a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.83594a0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m237.01 24.512a0.099 0.099 0 0 0-0.0996 0.09961v2.0215a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-2.0215a0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m230.01 24.512a0.099 0.099 0 0 0-0.0996 0.09961v2.0215a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-2.0215a0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m230.3 24.612a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m230.3 24.612a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="RL">
   <path d="m232.82 28.863q0-0.03652-0.011-0.06132-0.011-0.02549-0.0338-0.04341-0.0262-0.02136-0.0641-0.02963-0.0379-0.0083-0.093-0.0083h-0.15434l-0.0916 0.3955h0.1447q0.0675 0 0.11713-0.0124 0.0496-0.0124 0.0903-0.04341 0.0455-0.03445 0.0703-0.08613 0.0255-0.05237 0.0255-0.11093zm0.15296 0.77101h-0.16054l-0.2701-0.40997h-0.19499l-0.0944 0.40997h-0.1378l0.23633-1.0259h0.27975q0.0937 0 0.15227 0.0124 0.0586 0.01171 0.10197 0.04341 0.0386 0.02825 0.0606 0.06821 0.0221 0.03996 0.0221 0.09991 0 0.12816-0.0806 0.22531-0.0799 0.09646-0.21015 0.13436z"/>
   <path d="m233.5 29.917h-0.42234l0.15407-0.66687h0.0896l-0.1366 0.59118h0.33276z" baseline-shift="sub"/>
  </g>
  <path d="m237.01 24.512a0.099 0.099 0 0 0-0.0996 0.09961 0.099 0.099 0 0 0 0.0996 0.09961h3a0.099 0.099 0 0 0 0.0996-0.09961 0.099 0.099 0 0 0-0.0996-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m237.3 24.612a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m237.3 24.612a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="CL">
   <path d="m240.18 29.505q-0.19499 0-0.30592-0.1006-0.11093-0.10129-0.11093-0.28663 0-0.14194 0.0427-0.26458t0.12264-0.21497q0.0792-0.09095 0.19499-0.14332 0.11576-0.05305 0.25839-0.05305 0.0889 0 0.16812 0.02205 0.0792 0.02136 0.1626 0.06821l-0.031 0.15434h-0.0103q-0.0227-0.02274-0.0462-0.04203-0.0227-0.01998-0.0689-0.04341-0.0379-0.01998-0.0903-0.03307-0.0524-0.01378-0.11576-0.01378-0.0965 0-0.17708 0.04065-0.0806 0.03996-0.13987 0.11231-0.0579 0.07028-0.0909 0.17088-0.0331 0.1006-0.0331 0.21428 0 0.14194 0.0737 0.22118 0.0737 0.07855 0.21291 0.07855 0.0655 0 0.12402-0.01447 0.0593-0.01516 0.10749-0.0379 0.0448-0.02136 0.0806-0.04479t0.0613-0.04341h0.01l-0.0324 0.15847q-0.0724 0.03652-0.16674 0.06615-0.0937 0.02894-0.19982 0.02894z"/>
   <path d="m241.11 29.768h-0.42234l0.15407-0.66687h0.0896l-0.1366 0.59118h0.33277z" baseline-shift="sub"/>
  </g>
  <path d="m195 12.025a0.099 0.099 0 0 0-0.0996 0.09961v0.19727a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09961v0.19726a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09961v0.19726a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19726a0.099 0.099 0 0 0-0.0996-0.09961zm0 0.99024a0.099 0.099 0 0 0-0.0996 0.09961v0.19727a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09766v0.19922a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19922a0.099 0.099 0 0 0-0.0996-0.097656zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09766v0.19922a0.099 0.099 0 0 0 0.0996 0.09766 0.099 0.099 0 0 0 0.0996-0.09766v-0.19922a0.099 0.099 0 0 0-0.0996-0.097657zm0 0.99024a0.099 0.099 0 0 0-0.0996 0.09766v0.19922a0.099 0.099 0 0 0 0.0996 0.09766 0.099 0.099 0 0 0 0.0996-0.09766v-0.19922a0.099 0.099 0 0 0-0.0996-0.097656zm0 0.98828a0.099 0.099 0 0 0-0.0996 0.09961v0.19727a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09961v0.19726a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19726a0.099 0.099 0 0 0-0.0996-0.09961zm0 0.99024a0.099 0.099 0 0 0-0.0996 0.09961v0.19727a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09961v0.19726a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19726a0.099 0.099 0 0 0-0.0996-0.09961zm0 0.99024a0.099 0.099 0 0 0-0.0996 0.09961v0.19727a0.099 0.099 0 0 0 0.0996 0.099608 0.099 0.099 0 0 0 0.0996-0.09961v-0.19726a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09766v0.19922a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19922a0.099 0.099 0 0 0-0.0996-0.097656zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09766v0.19922a0.099 0.099 0 0 0 0.0996 0.09766 0.099 0.099 0 0 0 0.0996-0.09766v-0.19922a0.099 0.099 0 0 0-0.0996-0.097657zm0 0.99024a0.099 0.099 0 0 0-0.0996 0.09766v0.19922a0.099 0.099 0 0 0 0.0996 0.09766 0.099 0.099 0 0 0 0.0996-0.09766v-0.19922a0.099 0.099 0 0 0-0.0996-0.097656zm0 0.98828a0.099 0.099 0 0 0-0.0996 0.09961v0.19922a0.099 0.099 0 0 0 0.0996 0.09766 0.099 0.099 0 0 0 0.0996-0.09766v-0.19922a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09961v0.19726a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19726a0.099 0.099 0 0 0-0.0996-0.09961zm0 0.99024a0.099 0.099 0 0 0-0.0996 0.09961v0.19727a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09961v0.19727a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09961v0.19726a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19726a0.099 0.099 0 0 0-0.0996-0.09961zm0 0.99024a0.099 0.099 0 0 0-0.0996 0.09961v0.19727a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09766v0.19922a0.099 0.099 0 0 0 0.0996 0.09766 0.099 0.099 0 0 0 0.0996-0.09766v-0.19922a0.099 0.099 0 0 0-0.0996-0.097656zm0 0.99024a0.099 0.099 0 0 0-0.0996 0.09766v0.19922a0.099 0.099 0 0 0 0.0996 0.09766 0.099 0.099 0 0 0 0.0996-0.09766v-0.19922a0.099 0.099 0 0 0-0.0996-0.097656zm0 0.98828a0.099 0.099 0 0 0-0.0996 0.09961v0.19922a0.099 0.099 0 0 0 0.0996 0.09766 0.099 0.099 0 0 0 0.0996-0.09766v-0.19922a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09961v0.19726a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19726a0.099 0.099 0 0 0-0.0996-0.09961zm0 0.99024a0.099 0.099 0 0 0-0.0996 0.09961v0.19727a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09961v0.19726a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609zm0 0.99023a0.099 0.099 0 0 0-0.0996 0.09961v0.19726a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19726a0.099 0.099 0 0 0-0.0996-0.09961zm0 0.99024a0.099 0.099 0 0 0-0.0996 0.09961v0.19727a0.099 0.099 0 0 0 0.0996 0.09961 0.099 0.099 0 0 0 0.0996-0.09961v-0.19727a0.099 0.099 0 0 0-0.0996-0.099609z" fill="#000005" stop-color="#000000" stroke-dasharray="0.198, 0.792" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m220.01 22.652a0.099218 0.099218 0 0 0-0.0996 0.09961v1.3594a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.09961v-1.3594a0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="bevel"/>
  <path d="m220.01 19.014a0.099218 0.099218 0 0 0-0.0996 0.09766v1.4688a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.09961v-1.4688a0.099218 0.099218 0 0 0-0.0996-0.09766z" stop-color="#000000" stroke-linecap="round"/>
  <path d="m218.49 19.908a0.099218 0.099218 0 0 0-0.0996 0.09961v3.2168a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0977-0.09961v-3.2168a0.099218 0.099218 0 0 0-0.0977-0.09961z" stop-color="#000000" stroke-linecap="round"/>
  <path d="m218 19.908a0.099218 0.099218 0 0 0-0.0996 0.09961v3.2168a0.099218 0.099218 0 0 0 0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996-0.09961v-3.2168a0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round"/>
  <path d="m217.01 21.518a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09766h0.97852a0.099218 0.099218 0 0 0 0.0996-0.09766 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round"/>
  <path d="m218.51 20.48a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h1.498a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round"/>
  <g>
   <path d="m218.61 22.652a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h0.69336a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
   <path d="m219.13 22.418 0.91678 0.33337-0.91678 0.33337c0.16669-0.19419 0.16669-0.47172 0-0.66675z" fill-rule="evenodd" stop-color="#000000"/>
  </g>
  <path d="m160.13 10.247v-1.0266h0.40515q0.11575 0 0.19981 0.041341 0.0841 0.040652 0.12954 0.11644 0.0462 0.075103 0.0462 0.17914 0 0.10335-0.0462 0.17914-0.0462 0.075103-0.13161 0.11644-0.0847 0.041341-0.2005 0.041341h-0.28457v-0.17777h0.27355q0.0565 0 0.0971-0.019293 0.0406-0.019982 0.0627-0.05581 0.0221-0.035829 0.0221-0.08406 0-0.049609-0.0221-0.084749t-0.0627-0.054433q-0.0407-0.019982-0.0971-0.019982h-0.17915v0.84887zm0.8909 0v-1.0266h0.30937l0.1695 0.47818q0.0103 0.032384 0.0248 0.079926 0.0145 0.046853 0.0296 0.09853 0.0152 0.050987 0.0276 0.097841 0.0131 0.046853 0.0214 0.077859h-0.053q8e-3 -0.03101 0.0207-0.077859 0.0131-0.046853 0.0283-0.097841 0.0152-0.051676 0.0289-0.09853 0.0145-0.047542 0.0241-0.079926l0.16744-0.47818h0.30937v1.0266h-0.20809v-0.48783q0-0.034451 1e-3 -0.081993t3e-3 -0.10129q1e-3 -0.054433 3e-3 -0.10955 1e-3 -0.05581 2e-3 -0.10542h0.0255q-0.0158 0.054433-0.0331 0.11162-0.0165 0.057189-0.0324 0.11093t-0.0303 0.099219q-0.0138 0.044786-0.0241 0.076481l-0.17363 0.48783h-0.17225l-0.1757-0.48783q-0.0103-0.031695-0.0248-0.076481-0.0145-0.045475-0.031-0.099219-0.0159-0.053743-0.0338-0.11093-0.0172-0.057189-0.0338-0.11162h0.0303q6.9e-4 0.049609 2e-3 0.10542 1e-3 0.055122 3e-3 0.10955 1e-3 0.053743 2e-3 0.10129 1e-3 0.047542 1e-3 0.081993v0.48783zm1.7122 0.01654q-0.1378 0-0.24735-0.06408-0.10956-0.06477-0.17295-0.18328-0.0634-0.1192-0.0634-0.28181 0-0.16399 0.0634-0.2825 0.0634-0.1192 0.17295-0.18328 0.10955-0.064768 0.24735-0.064768 0.1385 0 0.24805 0.064768 0.10956 0.064079 0.17294 0.18328 0.0634 0.11851 0.0634 0.2825 0 0.1633-0.0634 0.28181-0.0634 0.11851-0.17294 0.18328-0.10955 0.06408-0.24805 0.06408zm0-0.18741q0.0792 0 0.14056-0.03996 0.0613-0.039963 0.0958-0.11644 0.0345-0.076481 0.0345-0.18535 0-0.10955-0.0345-0.18604-0.0344-0.07717-0.0958-0.11713-0.0613-0.039963-0.14056-0.039963-0.0785 0-0.13987 0.039963-0.0606 0.039963-0.0958 0.11713-0.0344 0.076481-0.0344 0.18604 0 0.10886 0.0344 0.18535 0.0351 0.076481 0.0958 0.11644 0.0613 0.03996 0.13987 0.03996zm0.99288 0.18741q-0.1316 0-0.22462-0.04134-0.093-0.04203-0.14263-0.12127-0.0496-0.07924-0.0496-0.19086h0.20464q1e-3 0.0565 0.0269 0.096463 0.0262 0.03996 0.0737 0.06132t0.113 0.02136q0.0592 0 0.10266-0.01585 0.0441-0.01654 0.0682-0.04616 0.0248-0.029628 0.0248-0.069591 0-0.033073-0.0193-0.057189-0.0186-0.024805-0.0593-0.043408-0.04-0.018604-0.10542-0.032384l-0.10817-0.023427q-0.15297-0.033073-0.22738-0.10404-0.0744-0.070969-0.0744-0.18121 0-0.093706 0.0489-0.1633 0.0489-0.07028 0.13642-0.10955 0.0882-0.039274 0.20464-0.039274 0.11782 0 0.20395 0.039963 0.0861 0.039963 0.13367 0.11438 0.0482 0.073725 0.0517 0.17708h-0.19844q-6e-3 -0.073036-0.0565-0.11507-0.051-0.04203-0.13367-0.04203-0.0517 0-0.0923 0.016536-0.04 0.015847-0.0634 0.044786-0.0227 0.028939-0.0227 0.066146 0 0.031695 0.0179 0.055122 0.0179 0.022738 0.0572 0.039963t0.10197 0.031006l0.0985 0.02136q0.082 0.017914 0.14194 0.044097 0.0599 0.025494 0.0985 0.061323 0.0386 0.03514 0.0572 0.081304t0.0186 0.10404q0 0.09853-0.0496 0.17088-0.0489 0.07166-0.14056 0.11024-0.0909 0.03859-0.21704 0.03859zm1.0025-0.5023v0.16261h-0.46646v-0.16261zm0.56913 0.50092q-0.0475 0-0.0889-0.01378-0.0413-0.01378-0.0737-0.04203-0.0317-0.02894-0.053-0.07097h-6.9e-4v0.11162h-0.2005v-1.0266h0.20326v0.39963h6.9e-4q0.0234-0.039274 0.0551-0.064768t0.0717-0.037896q0.0407-0.013091 0.0875-0.013091 0.093 0 0.1633 0.048231 0.071 0.047542 0.11024 0.13298 0.04 0.084749 0.04 0.19706 0 0.11369-0.0393 0.19913-0.0393 0.08544-0.10955 0.13298-0.0703 0.04754-0.16606 0.04754zm-0.0524-0.16536q0.0496 0 0.0854-0.0248 0.0365-0.02549 0.0565-0.073036 0.0207-0.048231 0.0207-0.11644 0-0.068213-0.0207-0.11576-0.02-0.047542-0.0565-0.073036-0.0358-0.025494-0.0854-0.025494-0.051 0-0.0903 0.026872-0.0386 0.026183-0.0599 0.074414-0.0207 0.047542-0.0207 0.113 0 0.064768 0.0207 0.113 0.0214 0.048232 0.0599 0.075103 0.0393 0.02618 0.0903 0.02618zm0.71203 0.16261q-0.0724 0-0.12885-0.02412-0.0565-0.02412-0.0889-0.07235-0.0324-0.04892-0.0324-0.12127 0-0.061323 0.0227-0.10198 0.0227-0.041341 0.062-0.066146 0.04-0.025494 0.0909-0.038585 0.0517-0.013091 0.10818-0.017914 0.0668-0.00689 0.10611-0.013091 0.0393-0.0062 0.0565-0.017914 0.0172-0.011713 0.0172-0.03514v-0.00482q0-0.026872-0.0145-0.046853-0.0145-0.02067-0.0413-0.032384-0.0262-0.011713-0.0634-0.011713t-0.0661 0.011713q-0.0282 0.011713-0.0448 0.033073-0.0165 0.02136-0.0193 0.049609h-0.19086q5e-3 -0.075103 0.0441-0.13022 0.04-0.055122 0.11162-0.084749 0.0717-0.030317 0.17156-0.030317 0.0744 0 0.13298 0.017225 0.0586 0.016537 0.0985 0.04892 0.0407 0.032384 0.0613 0.078548 0.0207 0.046164 0.0207 0.10473v0.49334h-0.19844v-0.10266h-3e-3q-0.0193 0.03583-0.0475 0.06132t-0.0689 0.03996q-0.0406 0.01378-0.0965 0.01378zm0.0565-0.14125q0.0489 0 0.0841-0.01792 0.0358-0.01791 0.0551-0.04892t0.0193-0.07028v-0.073034q-9e-3 0.00482-0.0234 0.00965-0.0145 0.00413-0.0338 0.00827-0.0193 0.00345-0.042 0.00758t-0.0469 0.00758q-0.0351 0.00551-0.0634 0.017226-0.0282 0.011024-0.0448 0.030317-0.0165 0.018604-0.0165 0.047542 0 0.02549 0.0138 0.0441 0.0138 0.0186 0.0393 0.02825 0.0255 0.0096 0.0593 0.0096zm0.80339 0.14676q-0.0944 0-0.16812-0.02894-0.0737-0.02963-0.11782-0.08475-0.0441-0.05512-0.051-0.13298h0.19982q6e-3 0.04754 0.04 0.07441 0.0344 0.02687 0.0937 0.02687 0.0565 0 0.0882-0.02136 0.0324-0.02136 0.0324-0.05512 0-0.02894-0.0248-0.046854-0.0241-0.017914-0.0689-0.026183l-0.12747-0.024805q-0.10611-0.020671-0.16123-0.074414-0.0551-0.053743-0.0551-0.1378 0-0.068902 0.0372-0.12058 0.0379-0.051676 0.10679-0.079926 0.0696-0.02825 0.16468-0.02825 0.0944 0 0.16467 0.030317 0.0703 0.029628 0.10956 0.084749 0.04 0.055122 0.042 0.13091h-0.1881q-6.9e-4 -0.044097-0.0344-0.073036-0.0338-0.028939-0.0882-0.028939-0.0524 0-0.082 0.022738-0.0296 0.022049-0.0296 0.054432 0 0.02825 0.0234 0.046164t0.0648 0.026872l0.13781 0.026872q0.11024 0.02136 0.16192 0.07028 0.0524 0.048231 0.0524 0.12885 0 0.07235-0.0413 0.12678-0.0406 0.05374-0.11369 0.08406-0.0723 0.02963-0.16743 0.02963zm0.76344-0.0014q-0.11025 0-0.19224-0.04823-0.0813-0.04892-0.12678-0.13505-0.0448-0.086128-0.0448-0.19637 0-0.11162 0.0455-0.19706 0.0462-0.086127 0.12678-0.13505 0.0806-0.04892 0.18465-0.04892 0.0806 0 0.14608 0.027561 0.0654 0.026872 0.113 0.077859 0.0475 0.050298 0.073 0.1192 0.0262 0.068902 0.0262 0.15227v0.054433h-0.64285v-0.12952h0.54501l-0.0916 0.031006q0-0.055122-0.02-0.095085t-0.0572-0.061323q-0.0365-0.022049-0.0875-0.022049-0.0503 0-0.0868 0.022049-0.0365 0.02136-0.0565 0.061323t-0.02 0.095085v0.088194q0 0.0565 0.02 0.099219 0.0207 0.04203 0.0593 0.06546 0.0386 0.02274 0.093 0.02274 0.04 0 0.0703-0.01102 0.031-0.01171 0.0517-0.03238 0.0214-0.02136 0.0303-0.04961h0.18535q-0.0131 0.07235-0.0613 0.12747-0.0482 0.05512-0.12126 0.08682-0.073 0.03101-0.16123 0.03101zm0.74345-0.0014q-0.0951 0-0.16606-0.04754-0.071-0.04754-0.11024-0.13298-0.0386-0.085439-0.0386-0.19913 0-0.11231 0.0393-0.19706 0.04-0.085438 0.11024-0.13298 0.071-0.048231 0.16399-0.048231 0.0475 0 0.0875 0.013091 0.04 0.012402 0.0717 0.037896t0.0551 0.064768h6.9e-4v-0.39959h0.20257v1.0266h-0.19981v-0.11162h-6.9e-4q-0.0214 0.04203-0.0537 0.07097-0.0317 0.02825-0.073 0.04203t-0.0889 0.01378zm0.0524-0.16536q0.0517 0 0.0896-0.02618 0.0386-0.02687 0.0599-0.075103 0.0214-0.048231 0.0214-0.113 0-0.065457-0.0214-0.113-0.0214-0.048231-0.0599-0.074414-0.0379-0.026872-0.0896-0.026872-0.0489 0-0.0854 0.025494t-0.0572 0.073036q-0.02 0.047542-0.02 0.11576 0 0.068213 0.02 0.11644 0.0207 0.047543 0.0572 0.073036 0.0365 0.0248 0.0854 0.0248zm0.81511 0.15021v-1.0266h0.21222v0.84474h0.46646v0.1819zm1.1479 0h-0.26528v-0.17846h0.25425q0.10335 0 0.17088-0.03858 0.0675-0.039274 0.10059-0.11369 0.0331-0.075103 0.0331-0.18328 0-0.10818-0.0331-0.18259t-0.10059-0.113q-0.0668-0.038585-0.16881-0.038585h-0.26114v-0.17842h0.27423q0.15434 0 0.26734 0.062701 0.113 0.062012 0.17432 0.17708 0.0613 0.11507 0.0613 0.27285 0 0.15779-0.0613 0.27354-0.0613 0.11507-0.17501 0.17777-0.113 0.0627-0.27078 0.0627zm-0.15021-1.0266v1.0266h-0.21222v-1.0266zm1.2278 1.0432q-0.1378 0-0.24736-0.06408-0.10955-0.06477-0.17294-0.18328-0.0634-0.1192-0.0634-0.28181 0-0.16399 0.0634-0.2825 0.0634-0.1192 0.17294-0.18328 0.10956-0.064768 0.24736-0.064768 0.13849 0 0.24805 0.064768 0.10955 0.064079 0.17294 0.18328 0.0634 0.11851 0.0634 0.2825 0 0.1633-0.0634 0.28181-0.0634 0.11851-0.17294 0.18328-0.10956 0.06408-0.24805 0.06408zm0-0.18741q0.0792 0 0.14056-0.03996 0.0613-0.039963 0.0958-0.11644 0.0344-0.076481 0.0344-0.18535 0-0.10955-0.0344-0.18604-0.0345-0.07717-0.0958-0.11713-0.0613-0.039963-0.14056-0.039963-0.0786 0-0.13987 0.039963-0.0606 0.039963-0.0958 0.11713-0.0345 0.076481-0.0345 0.18604 0 0.10886 0.0345 0.18535 0.0351 0.076481 0.0958 0.11644 0.0613 0.03996 0.13987 0.03996z" stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="PMOS-based LDO"/>
  <path d="m212.06 10.293v-1.0266h0.22324l0.33004 0.52503q0.0152 0.024116 0.0386 0.064768t0.0489 0.087505q0.0262 0.046164 0.0496 0.089572l-0.0241 0.05443q-2e-3 -0.04685-4e-3 -0.10749-2e-3 -0.061323-3e-3 -0.11782-6.9e-4 -0.0565-6.9e-4 -0.088194v-0.5078h0.21153v1.0266h-0.22393l-0.29904-0.47542q-0.0186-0.029628-0.0469-0.07717-0.0283-0.048231-0.0634-0.10886-0.0344-0.061323-0.0717-0.12954l0.0372-0.024116q4e-3 0.075792 6e-3 0.14263 2e-3 0.066146 3e-3 0.11713 6.8e-4 0.050298 6.8e-4 0.079237v0.47611zm1.0232 0v-1.0266h0.30937l0.1695 0.47818q0.0103 0.032384 0.0248 0.079926 0.0145 0.046853 0.0296 0.09853 0.0152 0.050987 0.0276 0.097841 0.0131 0.04685 0.0214 0.07786h-0.0531q8e-3 -0.03101 0.0207-0.07786 0.0131-0.046853 0.0283-0.097841 0.0152-0.051676 0.0289-0.09853 0.0145-0.047542 0.0241-0.079926l0.16743-0.47818h0.30937v1.0266h-0.20808v-0.48782q0-0.034451 1e-3 -0.081993t3e-3 -0.10129q1e-3 -0.054432 3e-3 -0.10955 1e-3 -0.05581 2e-3 -0.10542h0.0255q-0.0159 0.054433-0.0331 0.11162-0.0165 0.057189-0.0324 0.11093t-0.0303 0.099219q-0.0138 0.044786-0.0241 0.076481l-0.17363 0.48782h-0.17226l-0.1757-0.48782q-0.0103-0.031695-0.0248-0.076481-0.0145-0.045475-0.031-0.099219-0.0159-0.053743-0.0338-0.11093-0.0172-0.057188-0.0338-0.11162h0.0303q6.9e-4 0.049609 2e-3 0.10542 1e-3 0.055122 3e-3 0.10955 1e-3 0.053743 2e-3 0.10129 1e-3 0.047542 1e-3 0.081993v0.48782zm1.7122 0.01654q-0.1378 0-0.24736-0.06408-0.10955-0.06477-0.17294-0.18328-0.0634-0.1192-0.0634-0.28181 0-0.16399 0.0634-0.2825 0.0634-0.1192 0.17294-0.18328 0.10956-0.064768 0.24736-0.064768 0.13849 0 0.24805 0.064768 0.10955 0.064079 0.17294 0.18328 0.0634 0.11851 0.0634 0.2825 0 0.1633-0.0634 0.28181-0.0634 0.11851-0.17294 0.18328-0.10956 0.06408-0.24805 0.06408zm0-0.18741q0.0792 0 0.14056-0.03996 0.0613-0.03996 0.0958-0.11644 0.0344-0.076481 0.0344-0.18535 0-0.10955-0.0344-0.18604-0.0345-0.07717-0.0958-0.11713-0.0613-0.039963-0.14056-0.039963-0.0786 0-0.13987 0.039963-0.0606 0.039963-0.0958 0.11713-0.0345 0.076481-0.0345 0.18604 0 0.10886 0.0345 0.18535 0.0351 0.076481 0.0958 0.11644 0.0613 0.03996 0.13987 0.03996zm0.99288 0.18741q-0.13161 0-0.22462-0.04134-0.093-0.04203-0.14263-0.12127-0.0496-0.07924-0.0496-0.19086h0.20464q1e-3 0.0565 0.0269 0.096463 0.0262 0.03996 0.0737 0.06132t0.11299 0.02136q0.0593 0 0.10267-0.01585 0.0441-0.01654 0.0682-0.04617 0.0248-0.02963 0.0248-0.06959 0-0.033073-0.0193-0.057188-0.0186-0.024805-0.0592-0.043408-0.04-0.018603-0.10542-0.032384l-0.10818-0.023427q-0.15296-0.033073-0.22737-0.10404-0.0744-0.070969-0.0744-0.18121 0-0.093706 0.0489-0.1633 0.0489-0.07028 0.13643-0.10955 0.0882-0.039274 0.20464-0.039274 0.11782 0 0.20395 0.039963 0.0861 0.039963 0.13367 0.11438 0.0482 0.073725 0.0517 0.17708h-0.19844q-6e-3 -0.073036-0.0565-0.11507-0.051-0.04203-0.13366-0.04203-0.0517 0-0.0923 0.016536-0.04 0.015847-0.0634 0.044786-0.0227 0.028939-0.0227 0.066146 0 0.031695 0.0179 0.055122 0.0179 0.022738 0.0572 0.039963t0.10198 0.031006l0.0985 0.02136q0.082 0.017915 0.14193 0.044097 0.0599 0.025494 0.0985 0.061323 0.0386 0.03514 0.0572 0.081304t0.0186 0.10404q0 0.09853-0.0496 0.17088-0.0489 0.07166-0.14056 0.11024-0.091 0.03859-0.21704 0.03859zm1.0025-0.50229v0.16261h-0.46647v-0.16261zm0.56913 0.50092q-0.0475 0-0.0889-0.01378-0.0413-0.01378-0.0737-0.04203-0.0317-0.02894-0.0531-0.07097h-6.8e-4v0.11162h-0.20051v-1.0266h0.20326v0.39963h6.9e-4q0.0234-0.039274 0.0551-0.064768t0.0717-0.037896q0.0406-0.013091 0.0875-0.013091 0.093 0 0.16329 0.048231 0.071 0.047542 0.11025 0.13298 0.04 0.084749 0.04 0.19706 0 0.11369-0.0393 0.19913-0.0393 0.08544-0.10956 0.13298-0.0703 0.04754-0.16605 0.04754zm-0.0524-0.16536q0.0496 0 0.0854-0.02481 0.0365-0.02549 0.0565-0.07303 0.0207-0.048232 0.0207-0.11644 0-0.068213-0.0207-0.11576-0.02-0.047542-0.0565-0.073036-0.0358-0.025494-0.0854-0.025494-0.051 0-0.0903 0.026872-0.0386 0.026183-0.0599 0.074414-0.0207 0.047542-0.0207 0.113 0 0.064768 0.0207 0.113 0.0214 0.04823 0.0599 0.0751 0.0393 0.02618 0.0903 0.02618zm0.71203 0.16261q-0.0723 0-0.12884-0.02412-0.0565-0.02412-0.0889-0.07235-0.0324-0.04892-0.0324-0.12127 0-0.06132 0.0227-0.10198 0.0227-0.041341 0.062-0.066146 0.04-0.025494 0.0909-0.038585 0.0517-0.013091 0.10817-0.017914 0.0668-0.00689 0.10611-0.013091 0.0393-0.0062 0.0565-0.017914 0.0172-0.011713 0.0172-0.03514v-0.00482q0-0.026872-0.0145-0.046853-0.0145-0.020671-0.0413-0.032384-0.0262-0.011713-0.0634-0.011713t-0.0661 0.011713q-0.0283 0.011713-0.0448 0.033073t-0.0193 0.049609h-0.19085q5e-3 -0.075103 0.0441-0.13022 0.04-0.055121 0.11162-0.084749 0.0717-0.030317 0.17157-0.030317 0.0744 0 0.13298 0.017225 0.0586 0.016536 0.0985 0.04892 0.0406 0.032384 0.0613 0.078548t0.0207 0.10473v0.49334h-0.19843v-0.10266h-3e-3q-0.0193 0.03583-0.0475 0.06132t-0.0689 0.03996q-0.0407 0.01378-0.0965 0.01378zm0.0565-0.14125q0.0489 0 0.0841-0.01792 0.0358-0.01791 0.0551-0.04892t0.0193-0.07028v-0.073034q-9e-3 0.00482-0.0234 0.00965-0.0145 0.00413-0.0338 0.00827-0.0193 0.00345-0.042 0.00758t-0.0469 0.00758q-0.0351 0.00551-0.0634 0.017225-0.0282 0.01103-0.0448 0.03032-0.0165 0.0186-0.0165 0.04754 0 0.02549 0.0138 0.0441 0.0138 0.0186 0.0393 0.02825 0.0255 0.0096 0.0592 0.0096zm0.8034 0.14676q-0.0944 0-0.16812-0.02894-0.0737-0.02963-0.11782-0.08475-0.0441-0.05512-0.051-0.13298h0.19981q6e-3 0.04754 0.04 0.07441 0.0344 0.02687 0.0937 0.02687 0.0565 0 0.0882-0.02136 0.0324-0.02136 0.0324-0.05512 0-0.02894-0.0248-0.04685-0.0241-0.01791-0.0689-0.02618l-0.12746-0.024805q-0.10611-0.020671-0.16123-0.074414-0.0551-0.053743-0.0551-0.1378 0-0.068902 0.0372-0.12058 0.0379-0.051676 0.1068-0.079926 0.0696-0.02825 0.16467-0.02825 0.0944 0 0.16468 0.030317 0.0703 0.029628 0.10955 0.084749 0.04 0.055122 0.042 0.13091h-0.1881q-6.9e-4 -0.044097-0.0344-0.073036-0.0338-0.028939-0.0882-0.028939-0.0524 0-0.082 0.022738-0.0296 0.022049-0.0296 0.054432 0 0.02825 0.0234 0.046164t0.0648 0.026872l0.1378 0.026872q0.11025 0.02136 0.16192 0.07028 0.0524 0.048231 0.0524 0.12885 0 0.07235-0.0413 0.12678-0.0406 0.05374-0.11369 0.08406-0.0724 0.02963-0.16743 0.02963zm0.76343-0.0014q-0.11024 0-0.19224-0.04823-0.0813-0.04892-0.12678-0.13505-0.0448-0.08613-0.0448-0.19637 0-0.11162 0.0455-0.19706 0.0462-0.086127 0.12678-0.13505 0.0806-0.04892 0.18466-0.04892 0.0806 0 0.14607 0.027561 0.0655 0.026872 0.113 0.077859 0.0475 0.050298 0.073 0.1192 0.0262 0.068902 0.0262 0.15227v0.054432h-0.64285v-0.12952h0.54501l-0.0916 0.031006q0-0.055121-0.02-0.095085-0.02-0.039963-0.0572-0.061323-0.0365-0.022049-0.0875-0.022049-0.0503 0-0.0868 0.022049-0.0365 0.02136-0.0565 0.061323t-0.02 0.095085v0.088194q0 0.056499 0.02 0.099219 0.0207 0.04203 0.0592 0.06546 0.0386 0.02274 0.093 0.02274 0.04 0 0.0703-0.01103 0.031-0.01171 0.0517-0.03238 0.0214-0.02136 0.0303-0.04961h0.18535q-0.0131 0.07235-0.0613 0.12747-0.0482 0.05512-0.12127 0.08682-0.073 0.03101-0.16123 0.03101zm0.74345-0.0014q-0.0951 0-0.16605-0.04754-0.071-0.04754-0.11024-0.13298-0.0386-0.08544-0.0386-0.19913 0-0.11231 0.0393-0.19706 0.04-0.085438 0.11025-0.13298 0.071-0.048231 0.16398-0.048231 0.0476 0 0.0875 0.013091 0.04 0.012402 0.0717 0.037896t0.0551 0.064768h6.9e-4v-0.39959h0.20257v1.0266h-0.19982v-0.11162h-6.9e-4q-0.0213 0.04203-0.0537 0.07097-0.0317 0.02825-0.073 0.04203t-0.0889 0.01378zm0.0524-0.16536q0.0517 0 0.0896-0.02618 0.0386-0.02687 0.0599-0.0751 0.0214-0.048231 0.0214-0.113 0-0.065457-0.0214-0.113-0.0214-0.048231-0.0599-0.074414-0.0379-0.026872-0.0896-0.026872-0.0489 0-0.0854 0.025494t-0.0572 0.073036q-0.02 0.047542-0.02 0.11576 0 0.068213 0.02 0.11644 0.0207 0.04754 0.0572 0.07303 0.0365 0.02481 0.0854 0.02481zm0.81511 0.15021v-1.0266h0.21221v0.84474h0.46647v0.1819zm1.1479 0h-0.26527v-0.17842h0.25425q0.10335 0 0.17087-0.03859 0.0675-0.03927 0.1006-0.11369 0.0331-0.075103 0.0331-0.18328 0-0.10818-0.0331-0.18259t-0.1006-0.113q-0.0668-0.038585-0.16881-0.038585h-0.26113v-0.17845h0.27422q0.15434 0 0.26734 0.062701 0.113 0.062012 0.17433 0.17708 0.0613 0.11507 0.0613 0.27285 0 0.15779-0.0613 0.27354-0.0613 0.11507-0.17502 0.17777-0.11299 0.0627-0.27078 0.0627zm-0.15021-1.0266v1.0266h-0.21221v-1.0266zm1.2278 1.0432q-0.13781 0-0.24736-0.06408-0.10956-0.06477-0.17295-0.18328-0.0634-0.1192-0.0634-0.28181 0-0.16399 0.0634-0.2825 0.0634-0.1192 0.17295-0.18328 0.10955-0.064768 0.24736-0.064768 0.13849 0 0.24804 0.064768 0.10956 0.064079 0.17295 0.18328 0.0634 0.11851 0.0634 0.2825 0 0.1633-0.0634 0.28181-0.0634 0.11851-0.17295 0.18328-0.10955 0.06408-0.24804 0.06408zm0-0.18741q0.0792 0 0.14056-0.03996 0.0613-0.03996 0.0958-0.11644 0.0344-0.076481 0.0344-0.18535 0-0.10955-0.0344-0.18604-0.0344-0.07717-0.0958-0.11713-0.0613-0.039963-0.14056-0.039963-0.0786 0-0.13987 0.039963-0.0606 0.039963-0.0958 0.11713-0.0344 0.076481-0.0344 0.18604 0 0.10886 0.0344 0.18535 0.0351 0.076481 0.0958 0.11644 0.0613 0.03996 0.13987 0.03996z" stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="NMOS-based LDO"/>
 </g>
 <script id="JessyInk" ns1:version="1.5.5">// Copyright 2008, 2009 Hannes Hochreiner
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.

// Set onload event handler.
window.onload = jessyInkInit;

// Creating a namespace dictionary. The standard Inkscape namespaces are taken from inkex.py.
var NSS = new Object();
NSS['sodipodi']='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd';
NSS['cc']='http://web.resource.org/cc/';
NSS['svg']='http://www.w3.org/2000/svg';
NSS['dc']='http://purl.org/dc/elements/1.1/';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['inkscape']='http://www.inkscape.org/namespaces/inkscape';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['jessyink']='https://launchpad.net/jessyink';

// Keycodes.
var LEFT_KEY = 37; // cursor left keycode
var UP_KEY = 38; // cursor up keycode
var RIGHT_KEY = 39; // cursor right keycode
var DOWN_KEY = 40; // cursor down keycode
var PAGE_UP_KEY = 33; // page up keycode
var PAGE_DOWN_KEY = 34; // page down keycode
var HOME_KEY = 36; // home keycode
var END_KEY = 35; // end keycode
var ENTER_KEY = 13; // next slide
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

// Presentation modes.
var SLIDE_MODE = 1;
var INDEX_MODE = 2;
var DRAWING_MODE = 3;

// Mouse handler actions.
var MOUSE_UP = 1;
var MOUSE_DOWN = 2;
var MOUSE_MOVE = 3;
var MOUSE_WHEEL = 4;

// Parameters.
var ROOT_NODE = document.getElementsByTagNameNS(NSS["svg"], "svg")[0];
var HEIGHT = 0;
var WIDTH = 0;
var INDEX_COLUMNS_DEFAULT = 4;
var INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
var INDEX_OFFSET = 0;
var STATE_START = -1;
var STATE_END = -2;
var BACKGROUND_COLOR = null;
var slides = new Array();

// Initialisation.
var currentMode = SLIDE_MODE;
var masterSlide = null;
var activeSlide = 0;
var activeEffect = 0;
var timeStep = 30; // 40 ms equal 25 frames per second.
var lastFrameTime = null;
var processingEffect = false;
var transCounter = 0;
var effectArray = 0;
var defaultTransitionInDict = new Object();
defaultTransitionInDict["name"] = "appear";
var defaultTransitionOutDict = new Object();
defaultTransitionOutDict["name"] = "appear";
var jessyInkInitialised = false;

// Initialise char and key code dictionaries.
var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

// Initialise mouse handler dictionary.
var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();

var progress_bar_visible = false;
var timer_elapsed = 0;
var timer_start = timer_elapsed;
var timer_duration = 15; // 15 minutes

var history_counter = 0;
var history_original_elements = new Array();
var history_presentation_elements = new Array();

var mouse_original_path = null;
var mouse_presentation_path = null;
var mouse_last_x = -1;
var mouse_last_y = -1;
var mouse_min_dist_sqr = 3 * 3;
var path_colour = "red";
var path_width_default = 3;
var path_width = path_width_default;
var path_paint_width = path_width;

var number_of_added_slides = 0;

/** Initialisation function.
 *  The whole presentation is set-up in this function.
 */
function jessyInkInit()
{
    // Make sure we only execute this code once. Double execution can occur if the onload event handler is set
    // in the main svg tag as well (as was recommended in earlier versions). Executing this function twice does
    // not lead to any problems, but it takes more time.
    if (jessyInkInitialised)
        return;

    // Making the presentation scalable.
    var VIEWBOX = ROOT_NODE.getAttribute("viewBox");

    if (VIEWBOX)
    {
        WIDTH = ROOT_NODE.viewBox.animVal.width;
        HEIGHT = ROOT_NODE.viewBox.animVal.height;
    }
    else
    {
        HEIGHT = parseFloat(ROOT_NODE.getAttribute("height"));
        WIDTH = parseFloat(ROOT_NODE.getAttribute("width"));
        ROOT_NODE.setAttribute("viewBox", "0 0 " + WIDTH + " " + HEIGHT);
    }

    ROOT_NODE.setAttribute("width", "100%");
    ROOT_NODE.setAttribute("height", "100%");

    // Setting the background color.
    var namedViews = document.getElementsByTagNameNS(NSS["sodipodi"], "namedview");

    for (var counter = 0; counter &lt; namedViews.length; counter++)
    {
        if (namedViews[counter].hasAttribute("id") &amp;&amp; namedViews[counter].hasAttribute("pagecolor"))
        {
            if (namedViews[counter].getAttribute("id") == "base")
            {
                BACKGROUND_COLOR = namedViews[counter].getAttribute("pagecolor");
                var newAttribute = "background-color:" + BACKGROUND_COLOR + ";";

                if (ROOT_NODE.hasAttribute("style"))
                    newAttribute += ROOT_NODE.getAttribute("style");

                ROOT_NODE.setAttribute("style", newAttribute);
            }
        }
    }

    // Defining clip-path.
    var defsNodes = document.getElementsByTagNameNS(NSS["svg"], "defs");

    if (defsNodes.length &gt; 0)
    {
        var existingClipPath = document.getElementById("jessyInkSlideClipPath");

        if (!existingClipPath)
        {
            var rectNode = document.createElementNS(NSS["svg"], "rect");
            var clipPath = document.createElementNS(NSS["svg"], "clipPath");

            rectNode.setAttribute("x", 0);
            rectNode.setAttribute("y", 0);
            rectNode.setAttribute("width", WIDTH);
            rectNode.setAttribute("height", HEIGHT);

            clipPath.setAttribute("id", "jessyInkSlideClipPath");
            clipPath.setAttribute("clipPathUnits", "userSpaceOnUse");

            clipPath.appendChild(rectNode);
            defsNodes[0].appendChild(clipPath);
        }
    }

    // Making a list of the slide and finding the master slide.
    var nodes = document.getElementsByTagNameNS(NSS["svg"], "g");
    var tempSlides = new Array();
    var existingJessyInkPresentationLayer = null;

    for (var counter = 0; counter &lt; nodes.length; counter++)
    {
        if (nodes[counter].getAttributeNS(NSS["inkscape"], "groupmode") &amp;&amp; (nodes[counter].getAttributeNS(NSS["inkscape"], "groupmode") == "layer"))
        {
            if (nodes[counter].getAttributeNS(NSS["inkscape"], "label") &amp;&amp; nodes[counter].getAttributeNS(NSS["jessyink"], "masterSlide") == "masterSlide")
                masterSlide = nodes[counter];
            else if (nodes[counter].getAttributeNS(NSS["inkscape"], "label") &amp;&amp; nodes[counter].getAttributeNS(NSS["jessyink"], "presentationLayer") == "presentationLayer")
                existingJessyInkPresentationLayer = nodes[counter];
            else
                tempSlides.push(nodes[counter].getAttribute("id"));
        }
        else if (nodes[counter].getAttributeNS(NSS['jessyink'], 'element'))
        {
            handleElement(nodes[counter]);
        }
    }

    // Hide master slide set default transitions.
    if (masterSlide)
    {
        masterSlide.style.display = "none";

        if (masterSlide.hasAttributeNS(NSS["jessyink"], "transitionIn"))
            defaultTransitionInDict = propStrToDict(masterSlide.getAttributeNS(NSS["jessyink"], "transitionIn"));

        if (masterSlide.hasAttributeNS(NSS["jessyink"], "transitionOut"))
            defaultTransitionOutDict = propStrToDict(masterSlide.getAttributeNS(NSS["jessyink"], "transitionOut"));
    }

    if (existingJessyInkPresentationLayer != null)
    {
        existingJessyInkPresentationLayer.parentNode.removeChild(existingJessyInkPresentationLayer);
    }

    // Set start slide.
    var hashObj = new LocationHash(window.location.hash);

    activeSlide = hashObj.slideNumber;
    activeEffect = hashObj.effectNumber;

    if (activeSlide &lt; 0)
        activeSlide = 0;
    else if (activeSlide &gt;= tempSlides.length)
        activeSlide = tempSlides.length - 1;

    var originalNode = document.getElementById(tempSlides[counter]);

    var JessyInkPresentationLayer = document.createElementNS(NSS["svg"], "g");
    JessyInkPresentationLayer.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
    JessyInkPresentationLayer.setAttributeNS(NSS["inkscape"], "label", "JessyInk Presentation Layer");
    JessyInkPresentationLayer.setAttributeNS(NSS["jessyink"], "presentationLayer", "presentationLayer");
    JessyInkPresentationLayer.setAttribute("id", "jessyink_presentation_layer");
    JessyInkPresentationLayer.style.display = "inherit";
    ROOT_NODE.appendChild(JessyInkPresentationLayer);

    // Gathering all the information about the transitions and effects of the slides, set the background
    // from the master slide and substitute the auto-texts.
    for (var counter = 0; counter &lt; tempSlides.length; counter++)
    {
        var originalNode = document.getElementById(tempSlides[counter]);
        originalNode.style.display = "none";
        var node = suffixNodeIds(originalNode.cloneNode(true), "_" + counter);
        JessyInkPresentationLayer.appendChild(node);
        slides[counter] = new Object();
        slides[counter]["original_element"] = originalNode;
        slides[counter]["element"] = node;

        // Set build in transition.
        slides[counter]["transitionIn"] = new Object();

        var dict;

        if (node.hasAttributeNS(NSS["jessyink"], "transitionIn"))
            dict = propStrToDict(node.getAttributeNS(NSS["jessyink"], "transitionIn"));
        else
            dict = defaultTransitionInDict;

        slides[counter]["transitionIn"]["name"] = dict["name"];
        slides[counter]["transitionIn"]["options"] = new Object();

        for (key in dict)
            if (key != "name")
                slides[counter]["transitionIn"]["options"][key] = dict[key];

        // Set build out transition.
        slides[counter]["transitionOut"] = new Object();

        if (node.hasAttributeNS(NSS["jessyink"], "transitionOut"))
            dict = propStrToDict(node.getAttributeNS(NSS["jessyink"], "transitionOut"));
        else
            dict = defaultTransitionOutDict;

        slides[counter]["transitionOut"]["name"] = dict["name"];
        slides[counter]["transitionOut"]["options"] = new Object();

        for (key in dict)
            if (key != "name")
                slides[counter]["transitionOut"]["options"][key] = dict[key];

        // Copy master slide content.
        if (masterSlide)
        {
            var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), "_" + counter);
            clonedNode.removeAttributeNS(NSS["inkscape"], "groupmode");
            clonedNode.removeAttributeNS(NSS["inkscape"], "label");
            clonedNode.style.display = "inherit";

            node.insertBefore(clonedNode, node.firstChild);
        }

        // Setting clip path.
        node.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");

        // Substitute auto texts.
        substituteAutoTexts(node, node.getAttributeNS(NSS["inkscape"], "label"), counter + 1, tempSlides.length);

        node.removeAttributeNS(NSS["inkscape"], "groupmode");
        node.removeAttributeNS(NSS["inkscape"], "label");

        // Set effects.
        var tempEffects = new Array();
        var groups = new Object();

        for (var IOCounter = 0; IOCounter &lt;= 1; IOCounter++)
        {
            var propName = "";
            var dir = 0;

            if (IOCounter == 0)
            {
                propName = "effectIn";
                dir = 1;
            }
            else if (IOCounter == 1)
            {
                propName = "effectOut";
                dir = -1;
            }

            var effects = getElementsByPropertyNS(node, NSS["jessyink"], propName);

            for (var effectCounter = 0; effectCounter &lt; effects.length; effectCounter++)
            {
                var element = document.getElementById(effects[effectCounter]);
                var dict = propStrToDict(element.getAttributeNS(NSS["jessyink"], propName));

                // Put every element that has an effect associated with it, into its own group.
                // Unless of course, we already put it into its own group.
                if (!(groups[element.id]))
                {
                    var newGroup = document.createElementNS(NSS["svg"], "g");

                    element.parentNode.insertBefore(newGroup, element);
                    newGroup.appendChild(element.parentNode.removeChild(element));
                    groups[element.id] = newGroup;
                }

                var effectDict = new Object();

                effectDict["effect"] = dict["name"];
                effectDict["dir"] = dir;
                effectDict["element"] = groups[element.id];

                for (var option in dict)
                {
                    if ((option != "name") &amp;&amp; (option != "order"))
                    {
                        if (!effectDict["options"])
                            effectDict["options"] = new Object();

                        effectDict["options"][option] = dict[option];
                    }
                }

                if (!tempEffects[dict["order"]])
                    tempEffects[dict["order"]] = new Array();

                tempEffects[dict["order"]][tempEffects[dict["order"]].length] = effectDict;
            }
        }

        // Make invisible, but keep in rendering tree to ensure that bounding box can be calculated.
        node.setAttribute("opacity",0);
        node.style.display = "inherit";

        // Create a transform group.
        var transformGroup = document.createElementNS(NSS["svg"], "g");

        // Add content to transform group.
        while (node.firstChild)
            transformGroup.appendChild(node.firstChild);

        // Transfer the transform attribute from the node to the transform group.
        if (node.getAttribute("transform"))
        {
            transformGroup.setAttribute("transform", node.getAttribute("transform"));
            node.removeAttribute("transform");
        }

        // Create a view group.
        var viewGroup = document.createElementNS(NSS["svg"], "g");

        viewGroup.appendChild(transformGroup);
        slides[counter]["viewGroup"] = node.appendChild(viewGroup);

        // Insert background.
        if (BACKGROUND_COLOR != null)
        {
            var rectNode = document.createElementNS(NSS["svg"], "rect");

            rectNode.setAttribute("x", 0);
            rectNode.setAttribute("y", 0);
            rectNode.setAttribute("width", WIDTH);
            rectNode.setAttribute("height", HEIGHT);
            rectNode.setAttribute("id", "jessyInkBackground" + counter);
            rectNode.setAttribute("fill", BACKGROUND_COLOR);

            slides[counter]["viewGroup"].insertBefore(rectNode, slides[counter]["viewGroup"].firstChild);
        }

        // Set views.
        var tempViews = new Array();
        var views = getElementsByPropertyNS(node, NSS["jessyink"], "view");
        var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

        // Set initial view even if there are no other views.
        slides[counter]["viewGroup"].setAttribute("transform", matrixOld.toAttribute());
        slides[counter].initialView = matrixOld.toAttribute();

        for (var viewCounter = 0; viewCounter &lt; views.length; viewCounter++)
        {
            var element = document.getElementById(views[viewCounter]);
            var dict = propStrToDict(element.getAttributeNS(NSS["jessyink"], "view"));

            if (dict["order"] == 0)
            {
                matrixOld = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());
                slides[counter].initialView = matrixOld.toAttribute();
            }
            else
            {
                var effectDict = new Object();

                effectDict["effect"] = dict["name"];
                effectDict["dir"] = 1;
                effectDict["element"] = slides[counter]["viewGroup"];
                effectDict["order"] = dict["order"];

                for (var option in dict)
                {
                    if ((option != "name") &amp;&amp; (option != "order"))
                    {
                        if (!effectDict["options"])
                            effectDict["options"] = new Object();

                        effectDict["options"][option] = dict[option];
                    }
                }

                effectDict["options"]["matrixNew"] = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());

                tempViews[dict["order"]] = effectDict;
            }

            // Remove element.
            element.parentNode.removeChild(element);
        }

        // Consolidate view array and append it to the effect array.
        if (tempViews.length &gt; 0)
        {
            for (var viewCounter = 0; viewCounter &lt; tempViews.length; viewCounter++)
            {
                if (tempViews[viewCounter])
                {
                    tempViews[viewCounter]["options"]["matrixOld"] = matrixOld;
                    matrixOld = tempViews[viewCounter]["options"]["matrixNew"];

                    if (!tempEffects[tempViews[viewCounter]["order"]])
                        tempEffects[tempViews[viewCounter]["order"]] = new Array();

                    tempEffects[tempViews[viewCounter]["order"]][tempEffects[tempViews[viewCounter]["order"]].length] = tempViews[viewCounter];
                }
            }
        }

        // Set consolidated effect array.
        if (tempEffects.length &gt; 0)
        {
            slides[counter]["effects"] = new Array();

            for (var effectCounter = 0; effectCounter &lt; tempEffects.length; effectCounter++)
            {
                if (tempEffects[effectCounter])
                    slides[counter]["effects"][slides[counter]["effects"].length] = tempEffects[effectCounter];
            }
        }

        node.setAttribute("onmouseover", "if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != " + counter + ")) { indexSetActiveSlide(" + counter + "); };");

        // Set visibility for initial state.
        if (counter == activeSlide)
        {
            node.style.display = "inherit";
            node.setAttribute("opacity",1);
        }
        else
        {
            node.style.display = "none";
            node.setAttribute("opacity",0);
        }
    }

    // Set key handler.
    var jessyInkObjects = document.getElementsByTagNameNS(NSS["svg"], "g");

    for (var counter = 0; counter &lt; jessyInkObjects.length; counter++)
    {
        var elem = jessyInkObjects[counter];

        if (elem.getAttributeNS(NSS["jessyink"], "customKeyBindings"))
        {
            if (elem.getCustomKeyBindings != undefined)
                keyCodeDictionary = elem.getCustomKeyBindings();

            if (elem.getCustomCharBindings != undefined)
                charCodeDictionary = elem.getCustomCharBindings();
        }
    }

    // Set mouse handler.
    var jessyInkMouseHandler = document.getElementsByTagNameNS(NSS["jessyink"], "mousehandler");

    for (var counter = 0; counter &lt; jessyInkMouseHandler.length; counter++)
    {
        var elem = jessyInkMouseHandler[counter];

        if (elem.getMouseHandler != undefined)
        {
            var tempDict = elem.getMouseHandler();

            for (mode in tempDict)
            {
                if (!mouseHandlerDictionary[mode])
                    mouseHandlerDictionary[mode] = new Object();

                for (handler in tempDict[mode])
                    mouseHandlerDictionary[mode][handler] = tempDict[mode][handler];
            }
        }
    }

    // Check effect number.
    if ((activeEffect &lt; 0) || (!slides[activeSlide].effects))
    {
        activeEffect = 0;
    }
    else if (activeEffect &gt; slides[activeSlide].effects.length)
    {
        activeEffect = slides[activeSlide].effects.length;
    }

    createProgressBar(JessyInkPresentationLayer);
    hideProgressBar();
    setProgressBarValue(activeSlide);
    setTimeIndicatorValue(0);
    setInterval("updateTimer()", 1000);
    setSlideToState(activeSlide, activeEffect);
    jessyInkInitialised = true;
}

/** Function to substitute the auto-texts.
 *
 *  @param node the node
 *  @param slideName name of the slide the node is on
 *  @param slideNumber number of the slide the node is on
 *  @param numberOfSlides number of slides in the presentation
 */
function substituteAutoTexts(node, slideName, slideNumber, numberOfSlides)
{
    var texts = node.getElementsByTagNameNS(NSS["svg"], "tspan");

    for (var textCounter = 0; textCounter &lt; texts.length; textCounter++)
    {
        if (texts[textCounter].getAttributeNS(NSS["jessyink"], "autoText") == "slideNumber")
            texts[textCounter].firstChild.nodeValue = slideNumber;
        else if (texts[textCounter].getAttributeNS(NSS["jessyink"], "autoText") == "numberOfSlides")
            texts[textCounter].firstChild.nodeValue = numberOfSlides;
        else if (texts[textCounter].getAttributeNS(NSS["jessyink"], "autoText") == "slideTitle")
            texts[textCounter].firstChild.nodeValue = slideName;
    }
}

/** Convenience function to get an element depending on whether it has a property with a particular name.
 *    This function emulates some dearly missed XPath functionality.
 *
 *  @param node the node
 *  @param namespace namespace of the attribute
 *  @param name attribute name
 */
function getElementsByPropertyNS(node, namespace, name)
{
    var elems = new Array();

    if (node.getAttributeNS(namespace, name))
        elems.push(node.getAttribute("id"));

    for (var counter = 0; counter &lt; node.childNodes.length; counter++)
    {
        if (node.childNodes[counter].nodeType == 1)
            elems = elems.concat(getElementsByPropertyNS(node.childNodes[counter], namespace, name));
    }

    return elems;
}

/** Function to dispatch the next effect, if there is none left, change the slide.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function dispatchEffects(dir)
{
    if (slides[activeSlide]["effects"] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide]["effects"].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (dir == 1)
        {
            effectArray = slides[activeSlide]["effects"][activeEffect];
            activeEffect += dir;
        }
        else if (dir == -1)
        {
            activeEffect += dir;
            effectArray = slides[activeSlide]["effects"][activeEffect];
        }

        transCounter = 0;
        startTime = (new Date()).getTime();
        lastFrameTime = null;
        effect(dir);
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to skip effects and directly either put the slide into start or end state or change slides.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function skipEffects(dir)
{
    if (slides[activeSlide]["effects"] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide]["effects"].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (slides[activeSlide]["effects"] &amp;&amp; (dir == 1))
            activeEffect = slides[activeSlide]["effects"].length;
        else
            activeEffect = 0;

        if (dir == 1)
            setSlideToState(activeSlide, STATE_END);
        else
            setSlideToState(activeSlide, STATE_START);

        processingEffect = false;
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to change between slides.
 *
 *  @param dir direction (1 = forwards, -1 = backwards)
 */
function changeSlide(dir)
{
    processingEffect = true;
    effectArray = new Array();

    effectArray[0] = new Object();
    if (dir == 1)
    {
        effectArray[0]["effect"] = slides[activeSlide]["transitionOut"]["name"];
        effectArray[0]["options"] = slides[activeSlide]["transitionOut"]["options"];
        effectArray[0]["dir"] = -1;
    }
    else if (dir == -1)
    {
        effectArray[0]["effect"] = slides[activeSlide]["transitionIn"]["name"];
        effectArray[0]["options"] = slides[activeSlide]["transitionIn"]["options"];
        effectArray[0]["dir"] = 1;
    }
    effectArray[0]["element"] = slides[activeSlide]["element"];

    activeSlide += dir;
    setProgressBarValue(activeSlide);

    effectArray[1] = new Object();

    if (dir == 1)
    {
        effectArray[1]["effect"] = slides[activeSlide]["transitionIn"]["name"];
        effectArray[1]["options"] = slides[activeSlide]["transitionIn"]["options"];
        effectArray[1]["dir"] = 1;
    }
    else if (dir == -1)
    {
        effectArray[1]["effect"] = slides[activeSlide]["transitionOut"]["name"];
        effectArray[1]["options"] = slides[activeSlide]["transitionOut"]["options"];
        effectArray[1]["dir"] = -1;
    }

    effectArray[1]["element"] = slides[activeSlide]["element"];

    if (slides[activeSlide]["effects"] &amp;&amp; (dir == -1))
        activeEffect = slides[activeSlide]["effects"].length;
    else
        activeEffect = 0;

    if (dir == -1)
        setSlideToState(activeSlide, STATE_END);
    else
        setSlideToState(activeSlide, STATE_START);

    transCounter = 0;
    startTime = (new Date()).getTime();
    lastFrameTime = null;
    effect(dir);
}

/** Function to toggle between index and slide mode.
*/
function toggleSlideIndex()
{
    var suspendHandle = ROOT_NODE.suspendRedraw(500);

    if (currentMode == SLIDE_MODE)
    {
        hideProgressBar();
        INDEX_OFFSET = -1;
        indexSetPageSlide(activeSlide);
        currentMode = INDEX_MODE;
    }
    else if (currentMode == INDEX_MODE)
    {
        for (var counter = 0; counter &lt; slides.length; counter++)
        {
            slides[counter]["element"].setAttribute("transform","scale(1)");

            if (counter == activeSlide)
            {
                slides[counter]["element"].style.display = "inherit";
                slides[counter]["element"].setAttribute("opacity",1);
                activeEffect = 0;
            }
            else
            {
                slides[counter]["element"].setAttribute("opacity",0);
                slides[counter]["element"].style.display = "none";
            }
        }
        currentMode = SLIDE_MODE;
        setSlideToState(activeSlide, STATE_START);
        setProgressBarValue(activeSlide);

        if (progress_bar_visible)
        {
            showProgressBar();
        }
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to run an effect.
 *
 *  @param dir direction in which to play the effect (1 = forwards, -1 = backwards)
 */
function effect(dir)
{
    var done = true;

    var suspendHandle = ROOT_NODE.suspendRedraw(200);

    for (var counter = 0; counter &lt; effectArray.length; counter++)
    {
        if (effectArray[counter]["effect"] == "fade")
            done &amp;= fade(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
        else if (effectArray[counter]["effect"] == "appear")
            done &amp;= appear(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
        else if (effectArray[counter]["effect"] == "pop")
            done &amp;= pop(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
        else if (effectArray[counter]["effect"] == "view")
            done &amp;= view(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();

    if (!done)
    {
        var currentTime = (new Date()).getTime();
        var timeDiff = 1;

        transCounter = currentTime - startTime;

        if (lastFrameTime != null)
        {
            timeDiff = timeStep - (currentTime - lastFrameTime);

            if (timeDiff &lt;= 0)
                timeDiff = 1;
        }

        lastFrameTime = currentTime;

        window.setTimeout("effect(" + dir + ")", timeDiff);
    }
    else
    {
        window.location.hash = (activeSlide + 1) + '_' + activeEffect;
        processingEffect = false;
    }
}

/** Function to display the index sheet.
 *
 *  @param offsetNumber offset number
 */
function displayIndex(offsetNumber)
{
    var offsetX = 0;
    var offsetY = 0;

    if (offsetNumber &lt; 0)
        offsetNumber = 0;
    else if (offsetNumber &gt;= slides.length)
        offsetNumber = slides.length - 1;

    for (var counter = 0; counter &lt; slides.length; counter++)
    {
        if ((counter &lt; offsetNumber) || (counter &gt; offsetNumber + INDEX_COLUMNS * INDEX_COLUMNS - 1))
        {
            slides[counter]["element"].setAttribute("opacity",0);
            slides[counter]["element"].style.display = "none";
        }
        else
        {
            offsetX = ((counter - offsetNumber) % INDEX_COLUMNS) * WIDTH;
            offsetY = Math.floor((counter - offsetNumber) / INDEX_COLUMNS) * HEIGHT;

            slides[counter]["element"].setAttribute("transform","scale("+1/INDEX_COLUMNS+") translate("+offsetX+","+offsetY+")");
            slides[counter]["element"].style.display = "inherit";
            slides[counter]["element"].setAttribute("opacity",0.5);
        }

        setSlideToState(counter, STATE_END);
    }

    //do we need to save the current offset?
    if (INDEX_OFFSET != offsetNumber)
        INDEX_OFFSET = offsetNumber;
}

/** Function to set the active slide in the slide view.
 *
 *  @param nbr index of the active slide
 */
function slideSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide]["element"].setAttribute("opacity",0);
    slides[activeSlide]["element"].style.display = "none";

    activeSlide = parseInt(nbr);

    setSlideToState(activeSlide, STATE_START);
    slides[activeSlide]["element"].style.display = "inherit";
    slides[activeSlide]["element"].setAttribute("opacity",1);

    activeEffect = 0;
    setProgressBarValue(nbr);
}

/** Function to set the active slide in the index view.
 *
 *  @param nbr index of the active slide
 */
function indexSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide]["element"].setAttribute("opacity",0.5);

    activeSlide = parseInt(nbr);
    window.location.hash = (activeSlide + 1) + '_0';

    slides[activeSlide]["element"].setAttribute("opacity",1);
}

/** Function to set the page and active slide in index view.
 *
 *  @param nbr index of the active slide
 *
 *  NOTE: To force a redraw,
 *  set INDEX_OFFSET to -1 before calling indexSetPageSlide().
 *
 *  This is necessary for zooming (otherwise the index might not
 *  get redrawn) and when switching to index mode.
 *
 *  INDEX_OFFSET = -1
 *  indexSetPageSlide(activeSlide);
 */
function indexSetPageSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    //calculate the offset
    var offset = nbr - nbr % (INDEX_COLUMNS * INDEX_COLUMNS);

    if (offset &lt; 0)
        offset = 0;

    //if different from kept offset, then record and change the page
    if (offset != INDEX_OFFSET)
    {
        INDEX_OFFSET = offset;
        displayIndex(INDEX_OFFSET);
    }

    //set the active slide
    indexSetActiveSlide(nbr);
}

/** Event handler for key press.
 *
 *  @param e the event
 */
function keydown(e)
{
    if (!e)
        e = window.event;

    code = e.keyCode || e.charCode;

    if (!processingEffect &amp;&amp; keyCodeDictionary[currentMode] &amp;&amp; keyCodeDictionary[currentMode][code])
        return keyCodeDictionary[currentMode][code]();
    else
        document.onkeypress = keypress;
}
// Set event handler for key down.
document.onkeydown = keydown;

/** Event handler for key press.
 *
 *  @param e the event
 */
function keypress(e)
{
    document.onkeypress = null;

    if (!e)
        e = window.event;

    str = String.fromCharCode(e.keyCode || e.charCode);

    if (!processingEffect &amp;&amp; charCodeDictionary[currentMode] &amp;&amp; charCodeDictionary[currentMode][str])
        return charCodeDictionary[currentMode][str]();
}

/** Function to supply the default char code dictionary.
 *
 * @returns default char code dictionary
 */
function getDefaultCharCodeDictionary()
{
    var charCodeDict = new Object();

    charCodeDict[SLIDE_MODE] = new Object();
    charCodeDict[INDEX_MODE] = new Object();
    charCodeDict[DRAWING_MODE] = new Object();

    charCodeDict[SLIDE_MODE]["i"] = function () { return toggleSlideIndex(); };
    charCodeDict[SLIDE_MODE]["d"] = function () { return slideSwitchToDrawingMode(); };
    charCodeDict[SLIDE_MODE]["D"] = function () { return slideQueryDuration(); };
    charCodeDict[SLIDE_MODE]["n"] = function () { return slideAddSlide(activeSlide); };
    charCodeDict[SLIDE_MODE]["p"] = function () { return slideToggleProgressBarVisibility(); };
    charCodeDict[SLIDE_MODE]["t"] = function () { return slideResetTimer(); };
    charCodeDict[SLIDE_MODE]["e"] = function () { return slideUpdateExportLayer(); };

    charCodeDict[DRAWING_MODE]["d"] = function () { return drawingSwitchToSlideMode(); };
    charCodeDict[DRAWING_MODE]["0"] = function () { return drawingResetPathWidth(); };
    charCodeDict[DRAWING_MODE]["1"] = function () { return drawingSetPathWidth(1.0); };
    charCodeDict[DRAWING_MODE]["3"] = function () { return drawingSetPathWidth(3.0); };
    charCodeDict[DRAWING_MODE]["5"] = function () { return drawingSetPathWidth(5.0); };
    charCodeDict[DRAWING_MODE]["7"] = function () { return drawingSetPathWidth(7.0); };
    charCodeDict[DRAWING_MODE]["9"] = function () { return drawingSetPathWidth(9.0); };
    charCodeDict[DRAWING_MODE]["b"] = function () { return drawingSetPathColour("blue"); };
    charCodeDict[DRAWING_MODE]["c"] = function () { return drawingSetPathColour("cyan"); };
    charCodeDict[DRAWING_MODE]["g"] = function () { return drawingSetPathColour("green"); };
    charCodeDict[DRAWING_MODE]["k"] = function () { return drawingSetPathColour("black"); };
    charCodeDict[DRAWING_MODE]["m"] = function () { return drawingSetPathColour("magenta"); };
    charCodeDict[DRAWING_MODE]["o"] = function () { return drawingSetPathColour("orange"); };
    charCodeDict[DRAWING_MODE]["r"] = function () { return drawingSetPathColour("red"); };
    charCodeDict[DRAWING_MODE]["w"] = function () { return drawingSetPathColour("white"); };
    charCodeDict[DRAWING_MODE]["y"] = function () { return drawingSetPathColour("yellow"); };
    charCodeDict[DRAWING_MODE]["z"] = function () { return drawingUndo(); };

    charCodeDict[INDEX_MODE]["i"] = function () { return toggleSlideIndex(); };
    charCodeDict[INDEX_MODE]["-"] = function () { return indexDecreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE]["="] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE]["+"] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE]["0"] = function () { return indexResetNumberOfColumns(); };

    return charCodeDict;
}

/** Function to supply the default key code dictionary.
 *
 * @returns default key code dictionary
 */
function getDefaultKeyCodeDictionary()
{
    var keyCodeDict = new Object();

    keyCodeDict[SLIDE_MODE] = new Object();
    keyCodeDict[INDEX_MODE] = new Object();
    keyCodeDict[DRAWING_MODE] = new Object();

    keyCodeDict[SLIDE_MODE][LEFT_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][RIGHT_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][UP_KEY] = function() { return skipEffects(-1); };
    keyCodeDict[SLIDE_MODE][DOWN_KEY] = function() { return skipEffects(1); };
    keyCodeDict[SLIDE_MODE][PAGE_UP_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][HOME_KEY] = function() { return slideSetActiveSlide(0); };
    keyCodeDict[SLIDE_MODE][END_KEY] = function() { return slideSetActiveSlide(slides.length - 1); };
    keyCodeDict[SLIDE_MODE][SPACE_KEY] = function() { return dispatchEffects(1); };

    keyCodeDict[INDEX_MODE][LEFT_KEY] = function() { return indexSetPageSlide(activeSlide - 1); };
    keyCodeDict[INDEX_MODE][RIGHT_KEY] = function() { return indexSetPageSlide(activeSlide + 1); };
    keyCodeDict[INDEX_MODE][UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][HOME_KEY] = function() { return indexSetPageSlide(0); };
    keyCodeDict[INDEX_MODE][END_KEY] = function() { return indexSetPageSlide(slides.length - 1); };
    keyCodeDict[INDEX_MODE][ENTER_KEY] = function() { return toggleSlideIndex(); };

    keyCodeDict[DRAWING_MODE][ESCAPE_KEY] = function () { return drawingSwitchToSlideMode(); };

    return keyCodeDict;
}

/** Function to handle all mouse events.
 *
 *    @param    evnt    event
 *    @param    action    type of event (e.g. mouse up, mouse wheel)
 */
function mouseHandlerDispatch(evnt, action)
{
    if (!evnt)
        evnt = window.event;

    var retVal = true;

    if (!processingEffect &amp;&amp; mouseHandlerDictionary[currentMode] &amp;&amp; mouseHandlerDictionary[currentMode][action])
    {
        var subRetVal = mouseHandlerDictionary[currentMode][action](evnt);

        if (subRetVal != null &amp;&amp; subRetVal != undefined)
            retVal = subRetVal;
    }

    if (evnt.preventDefault &amp;&amp; !retVal)
        evnt.preventDefault();

    evnt.returnValue = retVal;

    return retVal;
}

// Set mouse event handler.
document.onmousedown = function(e) { return mouseHandlerDispatch(e, MOUSE_DOWN); };
document.onmouseup = function(e) { return mouseHandlerDispatch(e, MOUSE_UP); };
document.onmousemove = function(e) { return mouseHandlerDispatch(e, MOUSE_MOVE); };

// Moz
if (window.addEventListener)
{
    window.addEventListener('DOMMouseScroll', function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); }, false);
}

// Opera Safari OK - may not work in IE
window.onmousewheel = function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); };

/** Function to supply the default mouse handler dictionary.
 *
 * @returns default mouse handler dictionary
 */
function getDefaultMouseHandlerDictionary()
{
    var mouseHandlerDict = new Object();

    mouseHandlerDict[SLIDE_MODE] = new Object();
    mouseHandlerDict[INDEX_MODE] = new Object();
    mouseHandlerDict[DRAWING_MODE] = new Object();

    mouseHandlerDict[SLIDE_MODE][MOUSE_DOWN] = function(evnt) { return dispatchEffects(1); };
    mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL] = function(evnt) { return slideMousewheel(evnt); };

    mouseHandlerDict[INDEX_MODE][MOUSE_DOWN] = function(evnt) { return toggleSlideIndex(); };

    mouseHandlerDict[DRAWING_MODE][MOUSE_DOWN] = function(evnt) { return drawingMousedown(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_UP] = function(evnt) { return drawingMouseup(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_MOVE] = function(evnt) { return drawingMousemove(evnt); };

    return mouseHandlerDict;
}

/** Function to switch from slide mode to drawing mode.
*/
function slideSwitchToDrawingMode()
{
    currentMode = DRAWING_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute("style"))
        tempDict = propStrToDict(ROOT_NODE.getAttribute("style"));
    else
        tempDict = new Object();

    tempDict["cursor"] = "crosshair";
    ROOT_NODE.setAttribute("style", dictToPropStr(tempDict));
}

/** Function to switch from drawing mode to slide mode.
*/
function drawingSwitchToSlideMode()
{
    currentMode = SLIDE_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute("style"))
        tempDict = propStrToDict(ROOT_NODE.getAttribute("style"));
    else
        tempDict = new Object();

    tempDict["cursor"] = "auto";
    ROOT_NODE.setAttribute("style", dictToPropStr(tempDict));
}

/** Function to decrease the number of columns in index mode.
*/
function indexDecreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &gt;= 3)
    {
        INDEX_COLUMNS -= 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to increase the number of columns in index mode.
*/
function indexIncreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &lt; 7)
    {
        INDEX_COLUMNS += 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset the number of columns in index mode.
*/
function indexResetNumberOfColumns()
{
    if (INDEX_COLUMNS != INDEX_COLUMNS_DEFAULT)
    {
        INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset path width in drawing mode.
*/
function drawingResetPathWidth()
{
    path_width = path_width_default;
    set_path_paint_width();
}

/** Function to set path width in drawing mode.
 *
 * @param width new path width
 */
function drawingSetPathWidth(width)
{
    path_width = width;
    set_path_paint_width();
}

/** Function to set path colour in drawing mode.
 *
 * @param colour new path colour
 */
function drawingSetPathColour(colour)
{
    path_colour = colour;
}

/** Function to query the duration of the presentation from the user in slide mode.
*/
function slideQueryDuration()
{
    var new_duration = prompt("Length of presentation in minutes?", timer_duration);

    if ((new_duration != null) &amp;&amp; (new_duration != ''))
    {
        timer_duration = new_duration;
    }

    updateTimer();
}

/** Function to add new slide in slide mode.
 *
 * @param afterSlide after which slide to insert the new one
 */
function slideAddSlide(afterSlide)
{
    addSlide(afterSlide);
    slideSetActiveSlide(afterSlide + 1);
    updateTimer();
}

/** Function to toggle the visibility of the progress bar in slide mode.
*/
function slideToggleProgressBarVisibility()
{
    if (progress_bar_visible)
    {
        progress_bar_visible = false;
        hideProgressBar();
    }
    else
    {
        progress_bar_visible = true;
        showProgressBar();
    }
}

/** Function to reset the timer in slide mode.
*/
function slideResetTimer()
{
    timer_start = timer_elapsed;
    updateTimer();
}

/** Convenience function to pad a string with zero in front up to a certain length.
 */
function padString(str, len)
{
    var outStr = str;

    while (outStr.length &lt; len)
    {
        outStr = '0' + outStr;
    }

    return outStr;
}

/** Function to update the export layer.
 */
function slideUpdateExportLayer()
{
    // Suspend redraw since we are going to mess with the slides.
    var suspendHandle = ROOT_NODE.suspendRedraw(2000);

    var tmpActiveSlide = activeSlide;
    var tmpActiveEffect = activeEffect;
    var exportedLayers = new Array();

    for (var counterSlides = 0; counterSlides &lt; slides.length; counterSlides++)
    {
        var exportNode;

        setSlideToState(counterSlides, STATE_START);

        var maxEffect = 0;

        if (slides[counterSlides].effects)
        {
            maxEffect = slides[counterSlides].effects.length;
        }

        exportNode = slides[counterSlides].element.cloneNode(true);
        exportNode.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
        exportNode.setAttributeNS(NSS["inkscape"], "label", "slide_" + padString((counterSlides + 1).toString(), slides.length.toString().length) + "_effect_" + padString("0", maxEffect.toString().length));

        exportedLayers.push(exportNode);

        if (slides[counterSlides]["effects"])
        {
            for (var counter = 0; counter &lt; slides[counterSlides]["effects"].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[counterSlides]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[counterSlides]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                }

                var layerName = "slide_" + padString((counterSlides + 1).toString(), slides.length.toString().length) + "_effect_" + padString((counter + 1).toString(), maxEffect.toString().length);
                exportNode = slides[counterSlides].element.cloneNode(true);
                exportNode.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
                exportNode.setAttributeNS(NSS["inkscape"], "label", layerName);
                exportNode.setAttribute("id", layerName);

                exportedLayers.push(exportNode);
            }
        }
    }

    activeSlide = tmpActiveSlide;
    activeEffect = tmpActiveEffect;
    setSlideToState(activeSlide, activeEffect);

    // Copy image.
    var newDoc = document.documentElement.cloneNode(true);

    // Delete viewbox form new imag and set width and height.
    newDoc.removeAttribute('viewbox');
    newDoc.setAttribute('width', WIDTH);
    newDoc.setAttribute('height', HEIGHT);

    // Delete all layers and script elements.
    var nodesToBeRemoved = new Array();

    for (var childCounter = 0; childCounter &lt;  newDoc.childNodes.length; childCounter++)
    {
        var child = newDoc.childNodes[childCounter];

        if (child.nodeType == 1)
        {
            if ((child.nodeName.toUpperCase() == 'G') || (child.nodeName.toUpperCase() == 'SCRIPT'))
            {
                nodesToBeRemoved.push(child);
            }
        }
    }

    for (var ndCounter = 0; ndCounter &lt; nodesToBeRemoved.length; ndCounter++)
    {
        var nd = nodesToBeRemoved[ndCounter];

        // Before removing the node, check whether it contains any definitions.
        var defs = nd.getElementsByTagNameNS(NSS["svg"], "defs");

        for (var defsCounter = 0; defsCounter &lt; defs.length; defsCounter++)
        {
            if (defs[defsCounter].id)
            {
                newDoc.appendChild(defs[defsCounter].cloneNode(true));
            }
        }

        // Remove node.
        nd.parentNode.removeChild(nd);
    }

    // Set current layer.
    if (exportedLayers[0])
    {
        var namedView;

        for (var nodeCounter = 0; nodeCounter &lt; newDoc.childNodes.length; nodeCounter++)
        {
            if ((newDoc.childNodes[nodeCounter].nodeType == 1) &amp;&amp; (newDoc.childNodes[nodeCounter].getAttribute('id') == 'base'))
            {
                namedView = newDoc.childNodes[nodeCounter];
            }
        }

        if (namedView)
        {
            namedView.setAttributeNS(NSS['inkscape'], 'current-layer', exportedLayers[0].getAttributeNS(NSS['inkscape'], 'label'));
        }
    }

    // Add exported layers.
    while (exportedLayers.length &gt; 0)
    {
        var nd = exportedLayers.pop();

        nd.setAttribute("opacity",1);
        nd.style.display = "inherit";

        newDoc.appendChild(nd);
    }

    // Serialise the new document.
  window.location = 'data:application/svg+xml;base64;charset=utf-8,' + window.btoa(unescape(encodeURIComponent((new XMLSerializer()).serializeToString(newDoc))));

    // Unsuspend redraw.
    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to undo last drawing operation.
*/
function drawingUndo()
{
    mouse_presentation_path = null;
    mouse_original_path = null;

    if (history_presentation_elements.length &gt; 0)
    {
        var p = history_presentation_elements.pop();
        var parent = p.parentNode.removeChild(p);

        p = history_original_elements.pop();
        parent = p.parentNode.removeChild(p);
    }
}

/** Event handler for mouse down in drawing mode.
 *
 *  @param e the event
 */
function drawingMousedown(e)
{
    var value = 0;

    if (e.button)
        value = e.button;
    else if (e.which)
        value = e.which;

    if (value == 1)
    {
        history_counter++;

        var p = calcCoord(e);

        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
        mouse_original_path = document.createElementNS(NSS["svg"], "path");
        mouse_original_path.setAttribute("stroke", path_colour);
        mouse_original_path.setAttribute("stroke-width", path_paint_width);
        mouse_original_path.setAttribute("fill", "none");
        mouse_original_path.setAttribute("id", "path " + Date());
        mouse_original_path.setAttribute("d", "M" + p.x + "," + p.y);
        slides[activeSlide]["original_element"].appendChild(mouse_original_path);
        history_original_elements.push(mouse_original_path);

        mouse_presentation_path = document.createElementNS(NSS["svg"], "path");
        mouse_presentation_path.setAttribute("stroke", path_colour);
        mouse_presentation_path.setAttribute("stroke-width", path_paint_width);
        mouse_presentation_path.setAttribute("fill", "none");
        mouse_presentation_path.setAttribute("id", "path " + Date() + " presentation copy");
        mouse_presentation_path.setAttribute("d", "M" + p.x + "," + p.y);

        if (slides[activeSlide]["viewGroup"])
            slides[activeSlide]["viewGroup"].appendChild(mouse_presentation_path);
        else
            slides[activeSlide]["element"].appendChild(mouse_presentation_path);

        history_presentation_elements.push(mouse_presentation_path);

        return false;
    }

    return true;
}

/** Event handler for mouse up in drawing mode.
 *
 *  @param e the event
 */
function drawingMouseup(e)
{
    if(!e)
        e = window.event;

    if (mouse_presentation_path != null)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute("d");
        d += " L" + p.x + "," + p.y;
        mouse_presentation_path.setAttribute("d", d);
        mouse_presentation_path = null;
        mouse_original_path.setAttribute("d", d);
        mouse_original_path = null;

        return false;
    }

    return true;
}

/** Event handler for mouse move in drawing mode.
 *
 *  @param e the event
 */
function drawingMousemove(e)
{
    if(!e)
        e = window.event;

    var dist = (mouse_last_x - e.clientX) * (mouse_last_x - e.clientX) + (mouse_last_y - e.clientY) * (mouse_last_y - e.clientY);

    if (mouse_presentation_path == null)
    {
        return true;
    }

    if (dist &gt;= mouse_min_dist_sqr)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute("d");
        d += " L" + p.x + "," + p.y;
        mouse_presentation_path.setAttribute("d", d);
        mouse_original_path.setAttribute("d", d);
        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
    }

    return false;
}

/** Event handler for mouse wheel events in slide mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function slideMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        skipEffects(-1);
    else if (delta &lt; 0)
        skipEffects(1);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Event handler for mouse wheel events in index mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function indexMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS);
    else if (delta &lt; 0)
        indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Function to set the path paint width.
*/
function set_path_paint_width()
{
    var svgPoint1 = document.documentElement.createSVGPoint();
    var svgPoint2 = document.documentElement.createSVGPoint();

    svgPoint1.x = 0.0;
    svgPoint1.y = 0.0;
    svgPoint2.x = 1.0;
    svgPoint2.y = 0.0;

    var matrix = slides[activeSlide]["element"].getTransformToElement(ROOT_NODE);

    if (slides[activeSlide]["viewGroup"])
        matrix = slides[activeSlide]["viewGroup"].getTransformToElement(ROOT_NODE);

    svgPoint1 = svgPoint1.matrixTransform(matrix);
    svgPoint2 = svgPoint2.matrixTransform(matrix);

    path_paint_width = path_width / Math.sqrt((svgPoint2.x - svgPoint1.x) * (svgPoint2.x - svgPoint1.x) + (svgPoint2.y - svgPoint1.y) * (svgPoint2.y - svgPoint1.y));
}

/** The view effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect); for the view effect the options need to contain the old and the new matrix.
 */
function view(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if (!options["matrixInitial"])
    {
        var tempString = slides[activeSlide]["viewGroup"].getAttribute("transform");

        if (tempString)
            options["matrixInitial"] = (new matrixSVG()).fromAttribute(tempString);
        else
            options["matrixInitial"] = (new matrixSVG()).fromSVGElements(1, 0, 0, 1, 0, 0);
    }

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options["length"])
            length = options["length"];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("transform", options["matrixInitial"].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("transform", options["matrixNew"].toAttribute());

            set_path_paint_width();

            options["matrixInitial"] = null;
            return true;
        }
        else
        {
            element.setAttribute("transform", options["matrixInitial"].mix(options["matrixNew"], fraction).toAttribute());
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("transform", options["matrixInitial"].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("transform", options["matrixOld"].toAttribute());
            set_path_paint_width();

            options["matrixInitial"] = null;
            return true;
        }
        else
        {
            element.setAttribute("transform", options["matrixInitial"].mix(options["matrixOld"], fraction).toAttribute());
        }
    }

    return false;
}

/** The fade effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function fade(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options["length"])
            length = options["length"];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = "none";
            element.setAttribute("opacity", 0);
        }
        else if (fraction &gt;= 1)
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", 1);
            return true;
        }
        else
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", fraction);
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", 1);
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("opacity", 0);
            element.style.display = "none";
            return true;
        }
        else
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", 1 - fraction);
        }
    }
    return false;
}

/** The appear effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function appear(dir, element, time, options)
{
    if (dir == 1)
    {
        element.style.display = "inherit";
        element.setAttribute("opacity",1);
    }
    else if (dir == -1)
    {
        element.style.display = "none";
        element.setAttribute("opacity",0);
    }
    return true;
}

/** The pop effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function pop(dir, element, time, options)
{
    var length = 500;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options["length"])
            length = options["length"];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("opacity", 0);
            element.setAttribute("transform", "scale(0)");
            element.style.display = "none";
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("opacity", 1);
            element.removeAttribute("transform");
            element.style.display = "inherit";
            return true;
        }
        else
        {
            element.style.display = "inherit";
            var opacityFraction = fraction * 3;
            if (opacityFraction &gt; 1)
                opacityFraction = 1;
            element.setAttribute("opacity", opacityFraction);
            var offsetX = WIDTH * (1.0 - fraction) / 2.0;
            var offsetY = HEIGHT * (1.0 - fraction) / 2.0;
            element.setAttribute("transform", "translate(" + offsetX + "," + offsetY + ") scale(" + fraction + ")");
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("opacity", 1);
            element.setAttribute("transform", "scale(1)");
            element.style.display = "inherit";
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("opacity", 0);
            element.removeAttribute("transform");
            element.style.display = "none";
            return true;
        }
        else
        {
            element.setAttribute("opacity", 1 - fraction);
            element.setAttribute("transform", "scale(" + 1 - fraction + ")");
            element.style.display = "inherit";
        }
    }
    return false;
}

/** Function to set a slide either to the start or the end state.
 *
 *  @param slide the slide to use
 *  @param state the state into which the slide should be set
 */
function setSlideToState(slide, state)
{
    slides[slide]["viewGroup"].setAttribute("transform", slides[slide].initialView);

    if (slides[slide]["effects"])
    {
        if (state == STATE_END)
        {
            for (var counter = 0; counter &lt; slides[slide]["effects"].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[slide]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(effect["dir"], effect["element"], STATE_END, effect["options"]);
                }
            }
        }
        else if (state == STATE_START)
        {
            for (var counter = slides[slide]["effects"].length - 1; counter &gt;= 0; counter--)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[slide]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                }
            }
        }
        else
        {
            setSlideToState(slide, STATE_START);

            for (var counter = 0; counter &lt; slides[slide]["effects"].length &amp;&amp; counter &lt; state; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[slide]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(effect["dir"], effect["element"], STATE_END, effect["options"]);
                }
            }
        }
    }

    window.location.hash = (activeSlide + 1) + '_' + activeEffect;
}

/** Convenience function to translate a attribute string into a dictionary.
 *
 *    @param str the attribute string
 *  @return a dictionary
 *  @see dictToPropStr
 */
function propStrToDict(str)
{
    var list = str.split(";");
    var obj = new Object();

    for (var counter = 0; counter &lt; list.length; counter++)
    {
        var subStr = list[counter];
        var subList = subStr.split(":");
        if (subList.length == 2)
        {
            obj[subList[0]] = subList[1];
        }
    }

    return obj;
}

/** Convenience function to translate a dictionary into a string that can be used as an attribute.
 *
 *  @param dict the dictionary to convert
 *  @return a string that can be used as an attribute
 *  @see propStrToDict
 */
function dictToPropStr(dict)
{
    var str = "";

    for (var key in dict)
    {
        str += key + ":" + dict[key] + ";";
    }

    return str;
}

/** Sub-function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *    @param replace dictionary of replaced ids
 *  @see suffixNodeIds
 */
function suffixNoneIds_sub(node, suffix, replace)
{
    if (node.nodeType == 1)
    {
        if (node.getAttribute("id"))
        {
            var id = node.getAttribute("id")
                replace["#" + id] = id + suffix;
            node.setAttribute("id", id + suffix);
        }

        if ((node.nodeName == "use") &amp;&amp; (node.getAttributeNS(NSS["xlink"], "href")) &amp;&amp; (replace[node.getAttribute(NSS["xlink"], "href")]))
            node.setAttribute(NSS["xlink"], "href", node.getAttribute(NSS["xlink"], "href") + suffix);

        if (node.childNodes)
        {
            for (var counter = 0; counter &lt; node.childNodes.length; counter++)
                suffixNoneIds_sub(node.childNodes[counter], suffix, replace);
        }
    }
}

/** Function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *  @return the changed node
 *  @see suffixNodeIds_sub
 */
function suffixNodeIds(node, suffix)
{
    var replace = new Object();

    suffixNoneIds_sub(node, suffix, replace);

    return node;
}

/** Function to build a progress bar.
 *
 *  @param parent node to attach the progress bar to
 */
function createProgressBar(parent_node)
{
    var g = document.createElementNS(NSS["svg"], "g");
    g.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");
    g.setAttribute("id", "layer_progress_bar");
    g.setAttribute("style", "display: none;");

    var rect_progress_bar = document.createElementNS(NSS["svg"], "rect");
    rect_progress_bar.setAttribute("style", "marker: none; fill: rgb(128, 128, 128); stroke: none;");
    rect_progress_bar.setAttribute("id", "rect_progress_bar");
    rect_progress_bar.setAttribute("x", 0);
    rect_progress_bar.setAttribute("y", 0.99 * HEIGHT);
    rect_progress_bar.setAttribute("width", 0);
    rect_progress_bar.setAttribute("height", 0.01 * HEIGHT);
    g.appendChild(rect_progress_bar);

    var circle_timer_indicator = document.createElementNS(NSS["svg"], "circle");
    circle_timer_indicator.setAttribute("style", "marker: none; fill: rgb(255, 0, 0); stroke: none;");
    circle_timer_indicator.setAttribute("id", "circle_timer_indicator");
    circle_timer_indicator.setAttribute("cx", 0.005 * HEIGHT);
    circle_timer_indicator.setAttribute("cy", 0.995 * HEIGHT);
    circle_timer_indicator.setAttribute("r", 0.005 * HEIGHT);
    g.appendChild(circle_timer_indicator);

    parent_node.appendChild(g);
}

/** Function to hide the progress bar.
 *
 */
function hideProgressBar()
{
    var progress_bar = document.getElementById("layer_progress_bar");

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute("style", "display: none;");
}

/** Function to show the progress bar.
 *
 */
function showProgressBar()
{
    var progress_bar = document.getElementById("layer_progress_bar");

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute("style", "display: inherit;");
}

/** Set progress bar value.
 *
 *    @param value the current slide number
 *
 */
function setProgressBarValue(value)
{
    var rect_progress_bar = document.getElementById("rect_progress_bar");

    if (!rect_progress_bar)
    {
        return;
    }

    if (value &lt; 1)
    {
        // First slide, assumed to be the title of the presentation
        var x = 0;
        var w = 0.01 * HEIGHT;
    }
    else if (value &gt;= slides.length - 1)
    {
        // Last slide, assumed to be the end of the presentation
        var x = WIDTH - 0.01 * HEIGHT;
        var w = 0.01 * HEIGHT;
    }
    else
    {
        value -= 1;
        value /= (slides.length - 2);

        var x = WIDTH * value;
        var w = WIDTH / (slides.length - 2);
    }

    rect_progress_bar.setAttribute("x", x);
    rect_progress_bar.setAttribute("width", w);
}

/** Set time indicator.
 *
 *    @param value the percentage of time elapse so far between 0.0 and 1.0
 *
 */
function setTimeIndicatorValue(value)
{
    var circle_timer_indicator = document.getElementById("circle_timer_indicator");

    if (!circle_timer_indicator)
    {
        return;
    }

    if (value &lt; 0.0)
    {
        value = 0.0;
    }

    if (value &gt; 1.0)
    {
        value = 1.0;
    }

    var cx = (WIDTH - 0.01 * HEIGHT) * value + 0.005 * HEIGHT;
    circle_timer_indicator.setAttribute("cx", cx);
}

/** Update timer.
 *
 */
function updateTimer()
{
    timer_elapsed += 1;
    setTimeIndicatorValue((timer_elapsed - timer_start) / (60 * timer_duration));
}

/** Convert screen coordinates to document coordinates.
 *
 *  @param e event with screen coordinates
 *
 *  @return coordinates in SVG file coordinate system
 */
function calcCoord(e)
{
    var svgPoint = document.documentElement.createSVGPoint();
    svgPoint.x = e.clientX + window.pageXOffset;
    svgPoint.y = e.clientY + window.pageYOffset;

    var matrix = slides[activeSlide]["element"].getScreenCTM();

    if (slides[activeSlide]["viewGroup"])
        matrix = slides[activeSlide]["viewGroup"].getScreenCTM();

    svgPoint = svgPoint.matrixTransform(matrix.inverse());
    return svgPoint;
}

/** Add slide.
 *
 *    @param after_slide after which slide the new slide should be inserted into the presentation
 */
function addSlide(after_slide)
{
    number_of_added_slides++;

    var g = document.createElementNS(NSS["svg"], "g");
    g.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");
    g.setAttribute("id", "Whiteboard " + Date() + " presentation copy");
    g.setAttribute("style", "display: none;");

    var new_slide = new Object();
    new_slide["element"] = g;

    // Set build in transition.
    new_slide["transitionIn"] = new Object();
    var dict = defaultTransitionInDict;
    new_slide["transitionIn"]["name"] = dict["name"];
    new_slide["transitionIn"]["options"] = new Object();

    for (key in dict)
        if (key != "name")
            new_slide["transitionIn"]["options"][key] = dict[key];

    // Set build out transition.
    new_slide["transitionOut"] = new Object();
    dict = defaultTransitionOutDict;
    new_slide["transitionOut"]["name"] = dict["name"];
    new_slide["transitionOut"]["options"] = new Object();

    for (key in dict)
        if (key != "name")
            new_slide["transitionOut"]["options"][key] = dict[key];

    // Copy master slide content.
    if (masterSlide)
    {
        var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), "_" + Date() + " presentation_copy");
        clonedNode.removeAttributeNS(NSS["inkscape"], "groupmode");
        clonedNode.removeAttributeNS(NSS["inkscape"], "label");
        clonedNode.style.display = "inherit";

        g.appendChild(clonedNode);
    }

    // Substitute auto texts.
    substituteAutoTexts(g, "Whiteboard " + number_of_added_slides, "W" + number_of_added_slides, slides.length);

    g.setAttribute("onmouseover", "if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != " + (after_slide + 1) + ")) { indexSetActiveSlide(" + (after_slide + 1) + "); };");

    // Create a transform group.
    var transformGroup = document.createElementNS(NSS["svg"], "g");

    // Add content to transform group.
    while (g.firstChild)
        transformGroup.appendChild(g.firstChild);

    // Transfer the transform attribute from the node to the transform group.
    if (g.getAttribute("transform"))
    {
        transformGroup.setAttribute("transform", g.getAttribute("transform"));
        g.removeAttribute("transform");
    }

    // Create a view group.
    var viewGroup = document.createElementNS(NSS["svg"], "g");

    viewGroup.appendChild(transformGroup);
    new_slide["viewGroup"] = g.appendChild(viewGroup);

    // Insert background.
    if (BACKGROUND_COLOR != null)
    {
        var rectNode = document.createElementNS(NSS["svg"], "rect");

        rectNode.setAttribute("x", 0);
        rectNode.setAttribute("y", 0);
        rectNode.setAttribute("width", WIDTH);
        rectNode.setAttribute("height", HEIGHT);
        rectNode.setAttribute("id", "jessyInkBackground" + Date());
        rectNode.setAttribute("fill", BACKGROUND_COLOR);

        new_slide["viewGroup"].insertBefore(rectNode, new_slide["viewGroup"].firstChild);
    }

    // Set initial view even if there are no other views.
    var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

    new_slide["viewGroup"].setAttribute("transform", matrixOld.toAttribute());
    new_slide.initialView = matrixOld.toAttribute();

    // Insert slide
    var node = slides[after_slide]["element"];
    var next_node = node.nextSibling;
    var parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    g = document.createElementNS(NSS["svg"], "g");
    g.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
    g.setAttributeNS(NSS["inkscape"], "label", "Whiteboard " + number_of_added_slides);
    g.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");
    g.setAttribute("id", "Whiteboard " + Date());
    g.setAttribute("style", "display: none;");

    new_slide["original_element"] = g;

    node = slides[after_slide]["original_element"];
    next_node = node.nextSibling;
    parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    before_new_slide = slides.slice(0, after_slide + 1);
    after_new_slide = slides.slice(after_slide + 1);
    slides = before_new_slide.concat(new_slide, after_new_slide);

    //resetting the counter attributes on the slides that follow the new slide...
    for (var counter = after_slide+2; counter &lt; slides.length; counter++)
    {
        slides[counter]["element"].setAttribute("onmouseover", "if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != " + counter + ")) { indexSetActiveSlide(" + counter + "); };");
    }
}

/** Convenience function to obtain a transformation matrix from a point matrix.
 *
 *    @param mPoints Point matrix.
 *    @return A transformation matrix.
 */
function pointMatrixToTransformation(mPoints)
{
    mPointsOld = (new matrixSVG()).fromElements(0, WIDTH, WIDTH, 0, 0, HEIGHT, 1, 1, 1);

    return mPointsOld.mult(mPoints.inv());
}

/** Convenience function to obtain a matrix with three corners of a rectangle.
 *
 *    @param rect an svg rectangle
 *    @return a matrixSVG containing three corners of the rectangle
 */
function rectToMatrix(rect)
{
    rectWidth = rect.getBBox().width;
    rectHeight = rect.getBBox().height;
    rectX = rect.getBBox().x;
    rectY = rect.getBBox().y;
    rectXcorr = 0;
    rectYcorr = 0;

    scaleX = WIDTH / rectWidth;
    scaleY = HEIGHT / rectHeight;

    if (scaleX &gt; scaleY)
    {
        scaleX = scaleY;
        rectXcorr -= (WIDTH / scaleX - rectWidth) / 2;
        rectWidth = WIDTH / scaleX;
    }
    else
    {
        scaleY = scaleX;
        rectYcorr -= (HEIGHT / scaleY - rectHeight) / 2;
        rectHeight = HEIGHT / scaleY;
    }

    if (rect.transform.baseVal.numberOfItems &lt; 1)
    {
        mRectTrans = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);
    }
    else
    {
        mRectTrans = (new matrixSVG()).fromSVGMatrix(rect.transform.baseVal.consolidate().matrix);
    }

    newBasePoints = (new matrixSVG()).fromElements(rectX, rectX, rectX, rectY, rectY, rectY, 1, 1, 1);
    newVectors = (new matrixSVG()).fromElements(rectXcorr, rectXcorr + rectWidth, rectXcorr + rectWidth, rectYcorr, rectYcorr, rectYcorr + rectHeight, 0, 0, 0);

    return mRectTrans.mult(newBasePoints.add(newVectors));
}

/** Function to handle JessyInk elements.
 *
 *    @param    node    Element node.
 */
function handleElement(node)
{
    if (node.getAttributeNS(NSS['jessyink'], 'element') == 'core.video')
    {
        var url;
        var width;
        var height;
        var x;
        var y;
        var transform;

        var tspans = node.getElementsByTagNameNS("http://www.w3.org/2000/svg", "tspan");

        for (var tspanCounter = 0; tspanCounter &lt; tspans.length; tspanCounter++)
        {
            if (tspans[tspanCounter].getAttributeNS("https://launchpad.net/jessyink", "video") == "url")
            {
                url = tspans[tspanCounter].firstChild.nodeValue;
            }
        }

        var rects = node.getElementsByTagNameNS("http://www.w3.org/2000/svg", "rect");

        for (var rectCounter = 0; rectCounter &lt; rects.length; rectCounter++)
        {
            if (rects[rectCounter].getAttributeNS("https://launchpad.net/jessyink", "video") == "rect")
            {
                x = rects[rectCounter].getAttribute("x");
                y = rects[rectCounter].getAttribute("y");
                width = rects[rectCounter].getAttribute("width");
                height = rects[rectCounter].getAttribute("height");
                transform = rects[rectCounter].getAttribute("transform");
            }
        }

        for (var childCounter = 0; childCounter &lt; node.childNodes.length; childCounter++)
        {
            if (node.childNodes[childCounter].nodeType == 1)
            {
                if (node.childNodes[childCounter].style)
                {
                    node.childNodes[childCounter].style.display = 'none';
                }
                else
                {
                    node.childNodes[childCounter].setAttribute("style", "display: none;");
                }
            }
        }

        var foreignNode = document.createElementNS("http://www.w3.org/2000/svg", "foreignObject");
        foreignNode.setAttribute("x", x);
        foreignNode.setAttribute("y", y);
        foreignNode.setAttribute("width", width);
        foreignNode.setAttribute("height", height);
        foreignNode.setAttribute("transform", transform);

        var videoNode = document.createElementNS("http://www.w3.org/1999/xhtml", "video");
        videoNode.setAttribute("src", url);

        foreignNode.appendChild(videoNode);
        node.appendChild(foreignNode);
    }
}

/** Class processing the location hash.
 *
 *    @param str location hash
 */
function LocationHash(str)
{
    this.slideNumber = 0;
    this.effectNumber = 0;

    str = str.substr(1, str.length - 1);

    var parts = str.split('_');

    // Try to extract slide number.
    if (parts.length &gt;= 1)
    {
        try
        {
            var slideNumber = parseInt(parts[0]);

            if (!isNaN(slideNumber))
            {
                this.slideNumber = slideNumber - 1;
            }
        }
        catch (e)
        {
        }
    }

    // Try to extract effect number.
    if (parts.length &gt;= 2)
    {
        try
        {
            var effectNumber = parseInt(parts[1]);

            if (!isNaN(effectNumber))
            {
                this.effectNumber = effectNumber;
            }
        }
        catch (e)
        {
        }
    }
}

/** Class representing an svg matrix.
*/
function matrixSVG()
{
    this.e11 = 0; // a
    this.e12 = 0; // c
    this.e13 = 0; // e
    this.e21 = 0; // b
    this.e22 = 0; // d
    this.e23 = 0; // f
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 0;
}

/** Constructor function.
 *
 *    @param a element a (i.e. 1, 1) as described in the svg standard.
 *    @param b element b (i.e. 2, 1) as described in the svg standard.
 *    @param c element c (i.e. 1, 2) as described in the svg standard.
 *    @param d element d (i.e. 2, 2) as described in the svg standard.
 *    @param e element e (i.e. 1, 3) as described in the svg standard.
 *    @param f element f (i.e. 2, 3) as described in the svg standard.
 */
matrixSVG.prototype.fromSVGElements = function(a, b, c, d, e, f)
{
    this.e11 = a;
    this.e12 = c;
    this.e13 = e;
    this.e21 = b;
    this.e22 = d;
    this.e23 = f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param matrix an svg matrix as described in the svg standard.
 */
matrixSVG.prototype.fromSVGMatrix = function(m)
{
    this.e11 = m.a;
    this.e12 = m.c;
    this.e13 = m.e;
    this.e21 = m.b;
    this.e22 = m.d;
    this.e23 = m.f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param e11 element 1, 1 of the matrix.
 *    @param e12 element 1, 2 of the matrix.
 *    @param e13 element 1, 3 of the matrix.
 *    @param e21 element 2, 1 of the matrix.
 *    @param e22 element 2, 2 of the matrix.
 *    @param e23 element 2, 3 of the matrix.
 *    @param e31 element 3, 1 of the matrix.
 *    @param e32 element 3, 2 of the matrix.
 *    @param e33 element 3, 3 of the matrix.
 */
matrixSVG.prototype.fromElements = function(e11, e12, e13, e21, e22, e23, e31, e32, e33)
{
    this.e11 = e11;
    this.e12 = e12;
    this.e13 = e13;
    this.e21 = e21;
    this.e22 = e22;
    this.e23 = e23;
    this.e31 = e31;
    this.e32 = e32;
    this.e33 = e33;

    return this;
}

/** Constructor function.
 *
 *    @param attrString string value of the "transform" attribute (currently only "matrix" is accepted)
 */
matrixSVG.prototype.fromAttribute = function(attrString)
{
    str = attrString.substr(7, attrString.length - 8);

    str = str.trim();

    strArray = str.split(",");

    // Opera does not use commas to separate the values of the matrix, only spaces.
    if (strArray.length != 6)
        strArray = str.split(" ");

    this.e11 = parseFloat(strArray[0]);
    this.e21 = parseFloat(strArray[1]);
    this.e31 = 0;
    this.e12 = parseFloat(strArray[2]);
    this.e22 = parseFloat(strArray[3]);
    this.e32 = 0;
    this.e13 = parseFloat(strArray[4]);
    this.e23 = parseFloat(strArray[5]);
    this.e33 = 1;

    return this;
}

/** Output function
 *
 *    @return a string that can be used as the "transform" attribute.
 */
matrixSVG.prototype.toAttribute = function()
{
    return "matrix(" + this.e11 + ", " + this.e21 + ", " + this.e12 + ", " + this.e22 + ", " + this.e13 + ", " + this.e23 + ")";
}

/** Matrix nversion.
 *
 *    @return the inverse of the matrix
 */
matrixSVG.prototype.inv = function()
{
    out = new matrixSVG();

    det = this.e11 * (this.e33 * this.e22 - this.e32 * this.e23) - this.e21 * (this.e33 * this.e12 - this.e32 * this.e13) + this.e31 * (this.e23 * this.e12 - this.e22 * this.e13);

    out.e11 =  (this.e33 * this.e22 - this.e32 * this.e23) / det;
    out.e12 = -(this.e33 * this.e12 - this.e32 * this.e13) / det;
    out.e13 =  (this.e23 * this.e12 - this.e22 * this.e13) / det;
    out.e21 = -(this.e33 * this.e21 - this.e31 * this.e23) / det;
    out.e22 =  (this.e33 * this.e11 - this.e31 * this.e13) / det;
    out.e23 = -(this.e23 * this.e11 - this.e21 * this.e13) / det;
    out.e31 =  (this.e32 * this.e21 - this.e31 * this.e22) / det;
    out.e32 = -(this.e32 * this.e11 - this.e31 * this.e12) / det;
    out.e33 =  (this.e22 * this.e11 - this.e21 * this.e12) / det;

    return out;
}

/** Matrix multiplication.
 *
 *    @param op another svg matrix
 *    @return this * op
 */
matrixSVG.prototype.mult = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 * op.e11 + this.e12 * op.e21 + this.e13 * op.e31;
    out.e12 = this.e11 * op.e12 + this.e12 * op.e22 + this.e13 * op.e32;
    out.e13 = this.e11 * op.e13 + this.e12 * op.e23 + this.e13 * op.e33;
    out.e21 = this.e21 * op.e11 + this.e22 * op.e21 + this.e23 * op.e31;
    out.e22 = this.e21 * op.e12 + this.e22 * op.e22 + this.e23 * op.e32;
    out.e23 = this.e21 * op.e13 + this.e22 * op.e23 + this.e23 * op.e33;
    out.e31 = this.e31 * op.e11 + this.e32 * op.e21 + this.e33 * op.e31;
    out.e32 = this.e31 * op.e12 + this.e32 * op.e22 + this.e33 * op.e32;
    out.e33 = this.e31 * op.e13 + this.e32 * op.e23 + this.e33 * op.e33;

    return out;
}

/** Matrix addition.
 *
 *    @param op another svg matrix
 *    @return this + op
 */
matrixSVG.prototype.add = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 + op.e11;
    out.e12 = this.e12 + op.e12;
    out.e13 = this.e13 + op.e13;
    out.e21 = this.e21 + op.e21;
    out.e22 = this.e22 + op.e22;
    out.e23 = this.e23 + op.e23;
    out.e31 = this.e31 + op.e31;
    out.e32 = this.e32 + op.e32;
    out.e33 = this.e33 + op.e33;

    return out;
}

/** Matrix mixing.
 *
 *    @param op another svg matrix
 *    @parma contribOp contribution of the other matrix (0 &lt;= contribOp &lt;= 1)
 *    @return (1 - contribOp) * this + contribOp * op
 */
matrixSVG.prototype.mix = function(op, contribOp)
{
    contribThis = 1.0 - contribOp;
    out = new matrixSVG();

    out.e11 = contribThis * this.e11 + contribOp * op.e11;
    out.e12 = contribThis * this.e12 + contribOp * op.e12;
    out.e13 = contribThis * this.e13 + contribOp * op.e13;
    out.e21 = contribThis * this.e21 + contribOp * op.e21;
    out.e22 = contribThis * this.e22 + contribOp * op.e22;
    out.e23 = contribThis * this.e23 + contribOp * op.e23;
    out.e31 = contribThis * this.e31 + contribOp * op.e31;
    out.e32 = contribThis * this.e32 + contribOp * op.e32;
    out.e33 = contribThis * this.e33 + contribOp * op.e33;

    return out;
}

/** Trimming function for strings.
*/
String.prototype.trim = function()
{
    return this.replace(/^\s+|\s+$/g, '');
}

/** SVGElement.getTransformToElement polyfill */
SVGElement.prototype.getTransformToElement = SVGElement.prototype.getTransformToElement || function(elem) {
    return elem.getScreenCTM().inverse().multiply(this.getScreenCTM());
};</script>
</svg>
