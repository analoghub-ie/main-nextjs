<svg width="42.96mm" height="15.4mm" version="1.1" viewBox="0 0 42.96 15.4" xmlns="http://www.w3.org/2000/svg" xmlns:ns1="https://launchpad.net/jessyink">
 <g transform="translate(-14.526 -14.291)">
  <g transform="matrix(1 0 0 -1 -230.1 112.11)">
   <title>Subtract 2</title>
   <path d="m253.44 93.181h-0.27543v0.27285h-0.14159v-0.27285h-0.27544v-0.13849h0.27544v-0.27285h0.14159v0.27285h0.27543z" stroke-width=".26458" aria-label="+"/>
   <path transform="scale(.82794 1.2078)" d="m306.11 78.806h-0.83637v-0.1186h0.83637z" stroke-width=".26458" aria-label="_"/>
   <path d="m252.1 92.012a0.099228 0.099228 0 0 0-0.09961 0.099609v4a0.099228 0.099228 0 0 0 0.0996 0.09961h4a0.099228 0.099228 0 0 0 0.0996-0.09961v-4a0.099228 0.099228 0 0 0-0.0996-0.09961zm0.0996 0.19922h3.8008v3.8008h-3.8008z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
   <path d="m251.1 93.012a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h1a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
   <path d="m256.1 94.012a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h1a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
   <path d="m251.1 95.012a0.099218 0.099218 0 0 0-0.0996 0.09961 0.099218 0.099218 0 0 0 0.0996 0.09961h1a0.099218 0.099218 0 0 0 0.0996-0.09961 0.099218 0.099218 0 0 0-0.0996-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  </g>
  <g transform="translate(-27.099 -76.211)">
   <title>Gain 2</title>
   <path d="m55.1 92.111a0.099228 0.099228 0 0 0-0.099609 0.099609v4a0.099228 0.099228 0 0 0 0.09961 0.09961h4a0.099228 0.099228 0 0 0 0.09961-0.09961v-4a0.099228 0.099228 0 0 0-0.09961-0.09961zm0.09961 0.19922h3.8008v3.8008h-3.8008z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
   <path d="m54.1 94.111a0.099218 0.099218 0 0 0-0.099609 0.099609 0.099218 0.099218 0 0 0 0.09961 0.09961h1a0.099218 0.099218 0 0 0 0.09961-0.09961 0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
   <path d="m59.1 94.111a0.099218 0.099218 0 0 0-0.099609 0.099609 0.099218 0.099218 0 0 0 0.09961 0.09961h1a0.099218 0.099218 0 0 0 0.09961-0.09961 0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
   <path d="m56.165 94.545q-0.16381 0-0.25683-0.07751-0.0925-0.07751-0.0925-0.22014 0-0.22221 0.14314-0.36225 0.14314-0.14056 0.36328-0.14056 0.0832 0 0.154 0.01447 0.07131 0.01395 0.14779 0.05374l-0.04393 0.18035h-0.02222q-0.06201-0.05891-0.11731-0.08165-0.05529-0.02325-0.12196-0.02325-0.0677 0-0.12247 0.02791-0.05478 0.02739-0.09353 0.07441-0.03669 0.04444-0.05736 0.10542-0.02067 0.06098-0.02067 0.12764 0 0.0925 0.05064 0.13642 0.05064 0.04341 0.16485 0.04341 0.01137 0 0.0248-5.16e-4 0.01344-5.17e-4 0.02481-0.0016l0.03514-0.15089h-0.15348l0.03359-0.14521h0.35502l-0.08785 0.37982q-0.06873 0.02377-0.14676 0.04186-0.07751 0.01809-0.1602 0.01809zm0.88366-0.2899q-0.04961 0.0041-0.09302 0.0098t-0.0739 0.01654q-0.03152 0.01137-0.04806 0.03204t-0.01654 0.05478q0 0.02997 0.02171 0.04237 0.02222 0.01189 0.06408 0.01189 0.02739 0 0.05839-0.0124 0.03152-0.01292 0.05891-0.03256zm-0.04909 0.21239q-0.01757 0.01137-0.04237 0.02739t-0.04599 0.02532q-0.02894 0.01188-0.05426 0.01809-0.02532 0.0062-0.07028 0.0062-0.07235 0-0.11834-0.04031-0.04548-0.04082-0.04548-0.10594 0-0.06873 0.03256-0.11627 0.03256-0.04806 0.09663-0.07648 0.05994-0.02687 0.14263-0.03876 0.0832-0.01189 0.17983-0.01757 5.17e-4 -0.0031 0.0021-0.0098 0.0016-0.0072 0.0016-0.01602 0-0.03669-0.03411-0.05116-0.03411-0.01499-0.1018-0.01499-0.04599 0-0.1018 0.0155-0.05529 0.0155-0.0832 0.02584h-0.01705l0.02739-0.13746q0.03256-0.0083 0.10077-0.0186 0.06821-0.01033 0.13591-0.01033 0.13642 0 0.19999 0.03566 0.06408 0.03566 0.06408 0.11059 0 0.01033-0.0021 0.02687-0.0016 0.01654-0.0047 0.02894l-0.09095 0.39481h-0.185zm0.66249-0.51883-0.13436 0.58032h-0.18707l0.13436-0.58032zm0.05684-0.22376-0.03256 0.14108h-0.1974l0.03256-0.14108zm0.66301 0.35502q0 0.0155-0.0021 0.03359t-0.0067 0.03772l-0.08682 0.37775h-0.1881l0.06615-0.28784q0.0072-0.03204 0.01137-0.05478 0.0041-0.02274 0.0041-0.04237 0-0.03359-0.01705-0.04909t-0.06253-0.0155q-0.02222 0-0.05116 0.0098-0.02894 0.0093-0.06511 0.02842l-0.09457 0.41134h-0.18707l0.13384-0.58032h0.18707l-0.01499 0.06408q0.05736-0.03772 0.10439-0.05891 0.04754-0.02119 0.10439-0.02119 0.07803 0 0.12144 0.03772 0.04341 0.03772 0.04341 0.10955z" stroke-width=".26458" aria-label="Gain"/>
  </g>
  <g transform="translate(16.351 .39044)">
   <title>DC current source</title>
   <path d="m20 14.9a0.099218 0.099218 0 0 0-0.099609 0.099609l0.0039 1.2188a0.099218 0.099218 0 0 0 0.09961 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961l-0.003902-1.2188a0.099218 0.099218 0 0 0-0.099609-0.099609z" stop-color="#000000" stroke-linecap="round" style="paint-order:stroke fill markers"/>
   <path d="m19.996 18.682a0.099218 0.099218 0 0 0-0.09961 0.09961l0.003907 1.2187a0.099218 0.099218 0 0 0 0.099609 0.099609 0.099218 0.099218 0 0 0 0.099609-0.099609l-0.0039-1.2188a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round" style="paint-order:stroke fill markers"/>
   <g>
    <path d="m19.998 16.533a0.099218 0.099218 0 0 0-0.09961 0.09961l0.0078 0.95117a0.099218 0.099218 0 0 0 0.09961 0.09961 0.099218 0.099218 0 0 0 0.09961-0.10156l-0.0078-0.95117a0.099218 0.099218 0 0 0-0.09961-0.09766z" stop-color="#000000" stroke-linecap="round" style="paint-order:stroke fill markers"/>
    <path d="m20.449 17.358-0.43447 1.226-0.4545-1.2187c0.26073 0.22012 0.63077 0.21709 0.88897-0.0073z" fill-rule="evenodd" stop-color="#000000"/>
   </g>
   <path d="m20.004 16.188c-0.74704 0-1.3555 0.60304-1.3555 1.3457s0.60843 1.3477 1.3555 1.3477 1.3555-0.605 1.3555-1.3477-0.60843-1.3457-1.3555-1.3457zm0 0.19922c0.64059 0 1.1562 0.51188 1.1562 1.1465s-0.51566 1.1484-1.1562 1.1484-1.1562-0.51383-1.1562-1.1484 0.51566-1.1465 1.1562-1.1465z" stop-color="#000000" stroke-linecap="round" style="paint-order:stroke fill markers"/>
   <title>DC current source</title>
  </g>
  <g transform="translate(-50.298 62.19)">
   <title>Resistor 1</title>
   <path d="m86.65-34.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-34.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.688-37.721a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-35.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-35.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-36.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-36.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-37.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.65-38.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <title>Resistor_US</title>
   <title>Resistor</title>
  </g>
  <g transform="translate(-30.23 -68.794)">
   <title>Ground pin</title>
   <g transform="matrix(-.44713 0 0 .44713 95.722 52.45)" stroke-width=".4438">
    <title>GND</title>
    <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
     <g transform="translate(33.547 3.5594)" stroke-linecap="round">
      <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
      <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
      <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
      <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
     </g>
    </g>
    <title>GND</title>
   </g>
   <title>Ground</title>
  </g>
  <g transform="translate(-51.591 -78.474)">
   <title>Input pin</title>
   <g transform="translate(55.591 25.494)">
    <g transform="matrix(0 .83511 -.85711 0 51.549 43.532)" stroke-width=".23455">
     <path d="m32.299 43.129a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1348a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1348a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
     <path d="m31.102 44.264a0.11727 0.11727 0 0 0-0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719 0.11719h1.1973a0.11727 0.11727 0 0 0 0.11719-0.11719 0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
     <path d="m31.102 43.117a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1465a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1465a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
     <path d="m31.611 42.559-0.5918 0.59375a0.11727 0.11727 0 0 0 0 0.16406 0.11727 0.11727 0 0 0 0.16406 0l0.59375-0.5918a0.11727 0.11727 0 0 0 0-0.16602 0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
     <path d="m31.611 42.559a0.11727 0.11727 0 0 0 0 0.16602l0.60547 0.60352a0.11727 0.11727 0 0 0 0.16602 0 0.11727 0.11727 0 0 0 0-0.16406l-0.60547-0.60547a0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    </g>
   </g>
   <title>Input pin</title>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10">
   <path d="m19 16.9a0.099218 0.099218 0 0 0-0.099609 0.099609 0.099218 0.099218 0 0 0 0.099609 0.099609h2a0.099218 0.099218 0 0 0 0.099609-0.099609 0.099218 0.099218 0 0 0-0.099609-0.099609z" stop-color="#000000" style="paint-order:stroke fill markers"/>
   <path d="m21 17h-2" fill="#438cbc" stop-color="#000000" style="paint-order:stroke fill markers"/>
  </g>
  <path d="m20 18.9a0.099228 0.099228 0 0 0-0.099609 0.099609v3a0.099228 0.099228 0 0 0 0.099609 0.099609h16.354a0.099218 0.099218 0 0 0 0.099609-0.099609 0.099218 0.099218 0 0 0-0.099609-0.099609h-16.254v-2.8008h0.90039a0.099218 0.099218 0 0 0 0.099609-0.099609 0.099218 0.099218 0 0 0-0.099609-0.099609z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" style="paint-order:stroke fill markers"/>
  <path d="m36.354 20.287a0.099218 0.099218 0 0 0-0.09961 0.09961v3.1738a0.099218 0.099218 0 0 0 0.09961 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-3.1738a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" style="paint-order:stroke fill markers"/>
  <path d="m36.651 22a0.29766 0.29766 0 0 1-0.29766 0.29766 0.29766 0.29766 0 0 1-0.29766-0.29766 0.29766 0.29766 0 0 1 0.29766-0.29766 0.29766 0.29766 0 0 1 0.29766 0.29766z" stroke-width=".26458"/>
  <path d="m36.651 22a0.29766 0.29766 0 0 1-0.29766 0.29766 0.29766 0.29766 0 0 1-0.29766-0.29766 0.29766 0.29766 0 0 1 0.29766-0.29766 0.29766 0.29766 0 0 1 0.29766 0.29766z" stroke-width=".26458"/>
  <g>
   <path d="m33 17.9a0.099 0.099 0 0 0-0.099609 0.099609 0.099 0.099 0 0 0 0.099609 0.099609h1.0723a0.099 0.099 0 0 0 0.099609-0.099609 0.099 0.099 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" style="paint-order:stroke fill markers"/>
   <path d="m33.906 17.667 0.91476 0.33264-0.91476 0.33264c0.16632-0.19376 0.16632-0.47069 0-0.66528z" fill-rule="evenodd" stop-color="#000000"/>
  </g>
  <g transform="translate(6.3515 -24.61)">
   <title>Power pin</title>
   <g stroke-linecap="round" stroke-linejoin="round">
    <path d="m29.99 38.9a0.099218 0.099218 0 0 0-0.097656 0.099609l0.0078 1a0.099218 0.099218 0 0 0 0.099622 0.099609 0.099218 0.099218 0 0 0 0.099609-0.099609l-0.0078-1a0.099218 0.099218 0 0 0-0.10156-0.09961z" stop-color="#000000" style="paint-order:markers stroke fill"/>
    <path d="m30 40-8e-3 -1" fill="#fff" stop-color="#000000" style="paint-order:markers stroke fill"/>
    <path d="m29 38.9a0.099218 0.099218 0 0 0-0.099609 0.099609 0.099218 0.099218 0 0 0 0.099609 0.099609h2.0137a0.099218 0.099218 0 0 0 0.099609-0.099609 0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" style="paint-order:markers stroke fill"/>
    <path d="m29 39h2.0133" fill="#fff" stop-color="#000000" style="paint-order:markers stroke fill"/>
   </g>
   <title>Power pin</title>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="R1">
   <path d="m33.995 26.242v-1.0266h0.38103q0.10749 0 0.18535 0.0379 0.07855 0.0379 0.12058 0.10818 0.04272 0.06959 0.04272 0.16536 0 0.09577-0.04547 0.16605-0.04479 0.07028-0.1254 0.10818-0.08062 0.0379-0.18741 0.0379h-0.30248v-0.11024h0.30937q0.07097 0 0.12196-0.02412 0.05168-0.0248 0.07924-0.07028t0.02756-0.10749q0-0.0627-0.02825-0.10749-0.02756-0.04479-0.07924-0.0689-0.05099-0.0248-0.12264-0.0248h-0.25287v0.9164zm0.59738 0-0.24805-0.46164h0.14056l0.25218 0.46164z"/>
   <path d="m35.051 25.857v0.66732h-0.07793v-0.58401h-4.48e-4l-0.16616 0.11017v-0.08241l0.1666-0.11107z" baseline-shift="sub"/>
  </g>
  <path d="m48.736 25.555a0.099218 0.099218 0 0 0-0.09766 0.09766 0.099218 0.099218 0 0 0 0.09766 0.09961h2.6328a0.099218 0.099218 0 0 0 0.09961-0.09961 0.099218 0.099218 0 0 0-0.09961-0.09766z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m50.053 23.422a0.099218 0.099218 0 0 0-0.09961 0.09961v2a0.099218 0.099218 0 0 0 0.09961 0.09766 0.099218 0.099218 0 0 0 0.09961-0.09766v-2a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m50.053 26.422a0.099218 0.099218 0 0 0-0.09961 0.09961v2a0.099218 0.099218 0 0 0 0.09961 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-2a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <path d="m48.736 26.289a0.099218 0.099218 0 0 0-0.09766 0.09961 0.099218 0.099218 0 0 0 0.09766 0.09961h2.6328a0.099218 0.099218 0 0 0 0.09961-0.09961 0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  <g transform="translate(-43.651 62.15)" stroke-width=".19844">
   <title>Resistor_US</title>
   <path d="m86.65-34.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-34.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.688-37.721a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l0.625 0.25a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-35.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-35.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.062-36.971a0.099218 0.099218 0 0 0-0.12891 0.05469 0.099218 0.099218 0 0 0 0.05469 0.12891l1.25 0.5a0.099218 0.099218 0 0 0 0.12891-0.05469 0.099218 0.099218 0 0 0-0.05469-0.12891z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-36.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m87.238-37.471-1.25 0.5a0.099218 0.099218 0 0 0-0.05469 0.12891 0.099218 0.099218 0 0 0 0.12891 0.05469l1.25-0.5a0.099218 0.099218 0 0 0 0.05469-0.12891 0.099218 0.099218 0 0 0-0.12891-0.05469z" stop-color="#000000" stroke-linecap="round"/>
   <path d="m86.65-38.729a0.099218 0.099218 0 0 0-0.09766 0.09961v1a0.099218 0.099218 0 0 0 0.09766 0.09961 0.099218 0.099218 0 0 0 0.09961-0.09961v-1a0.099218 0.099218 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round"/>
   <title>Resistor_US</title>
  </g>
  <g transform="matrix(-.44713 0 0 .44713 72.139 -16.313)" stroke-width=".4438">
   <title>GND</title>
   <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
    <g transform="translate(33.547 3.5594)" stroke-linecap="round">
     <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
     <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
     <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
     <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
    </g>
   </g>
   <title>GND</title>
  </g>
  <path d="m43 27.592a0.099 0.099 0 0 0-0.09961 0.09961v0.83594a0.099 0.099 0 0 0 0.09961 0.099608 0.099 0.099 0 0 0 0.09961-0.09961v-0.83594a0.099 0.099 0 0 0-0.09961-0.099609z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <g transform="matrix(-.44713 0 0 .44713 79.192 -16.313)" stroke-width=".4438">
   <title>GND</title>
   <g transform="translate(-.26259 -.11701)" stroke-width=".4438">
    <g transform="translate(33.547 3.5594)" stroke-linecap="round">
     <path d="m31.883 96.766a0.2219 0.2219 0 0 0-0.2207 0.22266v0.91211a0.2219 0.2219 0 0 0 0.2207 0.22266 0.2219 0.2219 0 0 0 0.22266-0.22266v-0.91211a0.2219 0.2219 0 0 0-0.22266-0.22266z" stop-color="#000000" stroke-linejoin="round"/>
     <path d="m30.561 97.68a0.2219 0.2219 0 0 0-0.22266 0.2207 0.2219 0.2219 0 0 0 0.22266 0.22266h2.6465a0.2219 0.2219 0 0 0 0.2207-0.22266 0.2219 0.2219 0 0 0-0.2207-0.2207z" stop-color="#000000"/>
     <path d="m33.049 97.744-1.3223 1.3223a0.2219 0.2219 0 0 0 0 0.31445 0.2219 0.2219 0 0 0 0.31445 0l1.3223-1.3223a0.2219 0.2219 0 0 0 0-0.31445 0.2219 0.2219 0 0 0-0.31445 0z" stop-color="#000000"/>
     <path d="m30.404 97.744a0.2219 0.2219 0 0 0 0 0.31445l1.3223 1.3223a0.2219 0.2219 0 0 0 0.31445 0 0.2219 0.2219 0 0 0 0-0.31445l-1.3242-1.3223a0.2219 0.2219 0 0 0-0.3125 0z" stop-color="#000000"/>
    </g>
   </g>
   <title>GND</title>
  </g>
  <path d="m50.053 27.594a0.099 0.099 0 0 0-0.09961 0.09766v0.83594a0.099 0.099 0 0 0 0.09961 0.09961 0.099 0.099 0 0 0 0.09961-0.09961v-0.83594a0.099 0.099 0 0 0-0.09961-0.09766z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m50.053 21.9a0.099 0.099 0 0 0-0.099609 0.099609v2.0215a0.099 0.099 0 0 0 0.09961 0.09766 0.099 0.099 0 0 0 0.09961-0.09766v-2.0215a0.099 0.099 0 0 0-0.09961-0.09961z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m43 21.9a0.099 0.099 0 0 0-0.099609 0.099609v2.0215a0.099 0.099 0 0 0 0.099609 0.097657 0.099 0.099 0 0 0 0.09961-0.09766v-2.0215a0.099 0.099 0 0 0-0.09961-0.099609z" fill="#000005" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="m43.297 22a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m43.297 22a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="RL">
   <path d="m40.297 26.347v-1.0266h0.38103q0.10749 0 0.18535 0.0379 0.07855 0.0379 0.12058 0.10818 0.04272 0.06959 0.04272 0.16536 0 0.09577-0.04548 0.16605-0.04479 0.07028-0.1254 0.10818-0.08062 0.0379-0.18741 0.0379h-0.30248v-0.11024h0.30937q0.07097 0 0.12196-0.02411 0.05168-0.02481 0.07924-0.07028t0.02756-0.10749q0-0.0627-0.02825-0.10749-0.02756-0.04479-0.07924-0.0689-0.05099-0.0248-0.12265-0.0248h-0.25287v0.91639zm0.59738 0-0.24805-0.46164h0.14056l0.25218 0.46164z"/>
   <path d="m41.154 26.629v-0.66731h0.08062v0.59566h0.32156v0.07166z" baseline-shift="sub"/>
  </g>
  <path d="m50.35 22a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <path d="m50.35 22a0.297 0.297 0 0 1-0.297 0.297 0.297 0.297 0 0 1-0.297-0.297 0.297 0.297 0 0 1 0.297-0.297 0.297 0.297 0 0 1 0.297 0.297z" fill="#000005" stroke-width=".26458"/>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="CL">
   <path d="m47.399 26.391q-0.14194 0-0.24874-0.06752-0.1068-0.06821-0.16674-0.18741-0.05926-0.11989-0.05926-0.27423 0-0.15572 0.05926-0.27492 0.05926-0.11989 0.16605-0.18741 0.10749-0.06821 0.24942-0.06821 0.08062 0 0.1509 0.02412 0.07097 0.02412 0.12678 0.07028 0.0565 0.04548 0.09371 0.10955 0.03721 0.06408 0.05168 0.14469h-0.12678q-0.0124-0.05581-0.03927-0.09922t-0.06546-0.07304q-0.03858-0.03032-0.08751-0.04548-0.04823-0.01516-0.10404-0.01516-0.10818 0-0.18672 0.05305-0.07855 0.05237-0.12127 0.14607-0.04272 0.09302-0.04272 0.21566 0 0.12196 0.04272 0.21497 0.04272 0.09302 0.12127 0.14607 0.07855 0.05237 0.18672 0.05237 0.05581 0 0.10404-0.01516 0.04823-0.01516 0.08682-0.04479 0.03858-0.02963 0.06546-0.07235 0.02756-0.04341 0.04065-0.09922h0.12609q-0.01378 0.07993-0.05168 0.144-0.03721 0.06408-0.09371 0.10955-0.05581 0.04547-0.12678 0.06959-0.07028 0.02411-0.1509 0.02411z"/>
   <path d="m47.948 26.657v-0.66731h0.08062v0.59566h0.32156v0.07166z" baseline-shift="sub"/>
  </g>
  <path d="m36.354 21.875a0.099 0.099 0 0 0-0.09961 0.09961 0.099 0.099 0 0 0 0.09961 0.09766h16.646a0.099 0.099 0 0 0 0.09961-0.09766 0.099 0.099 0 0 0-0.09961-0.09961z" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" style="paint-order:stroke fill markers"/>
  <g transform="translate(39.543 -48.031)">
   <g transform="matrix(0 .83511 -.85711 0 51.549 43.532)" stroke-width=".23455">
    <path d="m32.299 43.129a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1348a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1348a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.102 44.264a0.11727 0.11727 0 0 0-0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719 0.11719h1.1973a0.11727 0.11727 0 0 0 0.11719-0.11719 0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.102 43.117a0.11727 0.11727 0 0 0-0.11719 0.11719v1.1465a0.11727 0.11727 0 0 0 0.11719 0.11719 0.11727 0.11727 0 0 0 0.11719-0.11719v-1.1465a0.11727 0.11727 0 0 0-0.11719-0.11719z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.611 42.559-0.5918 0.59375a0.11727 0.11727 0 0 0 0 0.16406 0.11727 0.11727 0 0 0 0.16406 0l0.59375-0.5918a0.11727 0.11727 0 0 0 0-0.16602 0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
    <path d="m31.611 42.559a0.11727 0.11727 0 0 0 0 0.16602l0.60547 0.60352a0.11727 0.11727 0 0 0 0.16602 0 0.11727 0.11727 0 0 0 0-0.16406l-0.60547-0.60547a0.11727 0.11727 0 0 0-0.16602 0z" stop-color="#000000" style="paint-order:stroke fill markers"/>
   </g>
  </g>
  <g stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vout">
   <path d="m55.69 22.444-0.37896-1.0266h0.13091l0.22186 0.61874q0.01791 0.0503 0.04548 0.13505 0.02825 0.08406 0.07028 0.21222h-0.03445q0.04065-0.12816 0.0689-0.21222 0.02825-0.08475 0.04548-0.13505l0.21635-0.61874h0.12954l-0.37483 1.0266z"/>
   <path d="m56.471 22.737q-0.06539 0-0.1151-0.03135-0.04926-0.0318-0.07703-0.08733-0.02732-0.05554-0.02732-0.12764 0-0.07255 0.02732-0.12854 0.02777-0.05598 0.07703-0.08778 0.04971-0.0318 0.1151-0.0318 0.06584 0 0.1151 0.0318t0.07658 0.08778q0.02777 0.05598 0.02777 0.12854 0 0.07211-0.02777 0.12764-0.02732 0.05553-0.07658 0.08733-0.04926 0.03135-0.1151 0.03135zm0-0.06897q0.04479 0 0.07658-0.02195 0.0318-0.02195 0.04882-0.0618 0.01702-0.04031 0.01702-0.0936 0-0.05419-0.01702-0.09405-0.01702-0.04031-0.04882-0.0627t-0.07658-0.02239q-0.04434 0-0.07658 0.02239-0.0318 0.02194-0.04882 0.06225t-0.01702 0.0945q0 0.05374 0.01702 0.0936t0.04882 0.0618q0.0318 0.02195 0.07658 0.02195zm0.4819 0.06718q-0.04747 0-0.08733-0.0206-0.03941-0.02105-0.06315-0.0627-0.02329-0.0421-0.02329-0.1048v-0.2938h0.07614v0.28842q0 0.06136 0.02956 0.09271 0.02956 0.0309 0.08241 0.0309 0.03449 0 0.0627-0.01388t0.04479-0.04389q0.01702-0.03001 0.01702-0.07748v-0.27678h0.07614v0.47294h-0.07435v-0.11466h0.0215q-0.02329 0.0636-0.06494 0.0936-0.0412 0.03001-0.09719 0.03001zm0.5343-0.4819v0.06539h-0.25618v-0.06539zm-0.17198-0.12898h0.07614v0.48727q0 0.02732 0.0112 0.03852 0.01164 0.01075 0.04076 0.01075 0.0103 0 0.02194 0 0.01209 0 0.02195 0v0.06539q-0.01164 0-0.02553 0-0.01388 0-0.02553 0-0.06091 0-0.09092-0.02642-0.03001-0.02687-0.03001-0.08017z" baseline-shift="sub"/>
  </g>
  <g fill="#4fbc43" stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Iq">
   <path d="m38.979 23.561v1.0266h-0.12402v-1.0266z"/>
   <path d="m39.543 25.057h-0.07614v-0.25886h-8.96e-4q-0.01702 0.02732-0.03986 0.04523t-0.05016 0.02642q-0.02687 9e-3 -0.05777 9e-3 -0.06136 0-0.10794-0.0309-0.04613-0.03135-0.07166-0.08644-0.02553-0.05553-0.02553-0.12809 0-0.073 0.02553-0.12809 0.02553-0.05553 0.07166-0.08644 0.04658-0.0309 0.10794-0.0309 0.0309 0 0.05912 9e-3 0.02866 0.0085 0.05195 0.02598 0.02329 0.01747 0.03852 0.04389h8.96e-4v-0.06987h0.07435zm-0.21318-0.24677q0.04389 0 0.07614-0.02194 0.03225-0.02195 0.04971-0.06181 0.01747-0.03986 0.01747-0.09315 0-0.05374-0.01747-0.0936t-0.04971-0.0618q-0.03225-0.02195-0.07614-0.02195-0.04075 0-0.07255 0.02015-0.03135 0.02015-0.04926 0.05957-0.01792 0.03941-0.01792 0.09763 0 0.05777 0.01792 0.09719 0.01791 0.03941 0.04926 0.05956 0.0318 0.02015 0.07255 0.02015z" baseline-shift="sub"/>
  </g>
  <g fill="#4fbc43" stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="IL">
   <path d="m46.012 23.562v1.0266h-0.12402v-1.0266z"/>
   <path d="m46.18 24.871v-0.66732h0.08062v0.59566h0.32156v0.07166z" baseline-shift="sub"/>
  </g>
  <g>
   <path d="m38.521 26.296-0.33264 0.91476-0.33264-0.91476c0.19376 0.16632 0.47069 0.16632 0.66528 0z" fill="#4fbc43" fill-rule="evenodd" stop-color="#000000"/>
   <path d="m37.242 23.486a0.099 0.099 0 0 0-0.13867 0.0098 0.099 0.099 0 0 0 0.0078 0.13867c0.50577 0.4505 0.74029 0.66214 0.85742 0.99805 0.11713 0.33591 0.12109 0.83008 0.12109 1.8301a0.099 0.099 0 0 0 0.09766 0.09766 0.099 0.099 0 0 0 0.09961-0.09766c0-1 0.0029-1.5071-0.13281-1.8965-0.13576-0.38934-0.40634-0.62958-0.91211-1.0801z" fill="#4fbc43" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
   <path d="m45.639 26.395-0.33264 0.91476-0.33264-0.91476c0.19376 0.16632 0.47069 0.16632 0.66528 0z" fill="#4fbc43" fill-rule="evenodd" stop-color="#000000"/>
   <path d="m44.361 23.586a0.099 0.099 0 0 0-0.14062 0.0098 0.099 0.099 0 0 0 0.0078 0.13867c0.50577 0.4505 0.74029 0.66214 0.85742 0.99805 0.11713 0.33591 0.12109 0.83008 0.12109 1.8301a0.099 0.099 0 0 0 0.09961 0.09766 0.099 0.099 0 0 0 0.09766-0.09766c0-1 0.0049-1.5071-0.13086-1.8965-0.13576-0.38934-0.40634-0.62958-0.91211-1.0801z" fill="#4fbc43" stop-color="#000000" stroke-linecap="round" stroke-linejoin="round" style="paint-order:markers stroke fill"/>
  </g>
  <g fill="#438cbc" stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vfb">
   <path d="m28.083 23.827-0.37896-1.0266h0.13091l0.22186 0.61874q0.01792 0.0503 0.04547 0.13505 0.02825 0.08406 0.07028 0.21222h-0.03445q0.04065-0.12816 0.0689-0.21222 0.02825-0.08475 0.04547-0.13505l0.21635-0.61874h0.12954l-0.37483 1.0266z"/>
   <path d="m28.875 23.636v0.06539h-0.25618v-0.06539zm-0.17198 0.47294v-0.55714q0-0.03404 0.01523-0.05867t0.043-0.03807q0.02821-0.01344 0.06628-0.01344 0.01568 0 0.02956 0t0.01791 0v0.06539q-4e-3 0-0.01836 0-0.01388 0-0.02194 0-0.03001 0-0.043 0.01299-0.01254 0.01299-0.01254 0.04344v0.5455zm0.47115 9e-3q-0.03046 0-0.05822-9e-3 -0.02777-0.0085-0.05106-0.02642-0.02329-0.01791-0.04031-0.04523h-8.96e-4v0.07166h-0.07435v-0.66731h0.07614v0.26424h8.96e-4q0.01523-0.02642 0.03807-0.04389t0.05106-0.02598q0.02821-9e-3 0.05867-9e-3 0.0618 0 0.10794 0.0309 0.04613 0.0309 0.07166 0.08644 0.02553 0.05509 0.02553 0.12809 0 0.07255-0.02553 0.12809-0.02553 0.05509-0.07166 0.08644-0.04613 0.0309-0.10794 0.0309zm-0.01164-0.06852q0.0412 0 0.07255-0.02015t0.04926-0.05957q0.01792-0.03941 0.01792-0.09719 0-0.05822-0.01792-0.09763-0.01791-0.03941-0.04926-0.05957-0.03135-0.02015-0.07255-0.02015-0.04389 0-0.07614 0.02194-0.03225 0.02195-0.04971 0.06181-0.01747 0.03986-0.01747 0.0936 0 0.0533 0.01747 0.09315 0.01747 0.03986 0.04971 0.0618 0.03225 0.02195 0.07614 0.02195z" baseline-shift="sub"/>
  </g>
  <g fill="#438cbc" stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vc">
   <path d="m33.494 16.927-0.37896-1.0266h0.13091l0.22186 0.61874q0.01792 0.0503 0.04548 0.13505 0.02825 0.08406 0.07028 0.21222h-0.03445q0.04065-0.12816 0.0689-0.21222 0.02825-0.08475 0.04548-0.13505l0.21635-0.61874h0.12954l-0.37483 1.0266z"/>
   <path d="m34.275 17.22q-0.06539 0-0.1151-0.03135-0.04926-0.0318-0.07703-0.08733-0.02732-0.05553-0.02732-0.12764 0-0.07255 0.02732-0.12854 0.02777-0.05598 0.07703-0.08778 0.04971-0.0318 0.1151-0.0318 0.04031 0 0.07435 0.01254 0.03448 0.01209 0.06046 0.03449 0.02642 0.02194 0.043 0.05195 0.01657 0.03001 0.0215 0.06584h-0.07703q-4e-3 -0.02105-0.01388-0.03852-0.0099-0.01747-0.02553-0.03001-0.01523-0.01299-0.03583-0.02015-0.0206-0.0072-0.04702-0.0072-0.04434 0-0.07659 0.02239-0.0318 0.02194-0.04882 0.06225t-0.01702 0.0945q0 0.05374 0.01702 0.0936t0.04882 0.0618q0.0318 0.02195 0.07659 0.02195 0.02642 0 0.04658-0.0067 0.02015-0.0067 0.03449-0.01926 0.01478-0.01299 0.02463-0.03045 0.0099-0.01791 0.01523-0.03941h0.07838q-0.0049 0.03493-0.0215 0.06494-0.01657 0.03001-0.043 0.0524-0.02642 0.02239-0.06091 0.03493-0.03404 0.01254-0.0739 0.01254z" baseline-shift="sub"/>
  </g>
  <g fill="#438cbc" stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="Vref">
   <path d="m14.905 17.39-0.37896-1.0266h0.13091l0.22186 0.61874q0.01792 0.0503 0.04547 0.13505 0.02825 0.08406 0.07028 0.21222h-0.03445q0.04065-0.12816 0.0689-0.21222 0.02825-0.08475 0.04548-0.13505l0.21635-0.61874h0.12954l-0.37483 1.0266z"/>
   <path d="m15.491 17.673v-0.47294h0.07255v0.07435h0.0018q0.01299-0.03673 0.0412-0.05912 0.02822-0.02239 0.07255-0.02239 0.0103 0 0.01881 8.95e-4 9e-3 8.96e-4 0.01344 0.0018v0.07614q-0.0045-0.0013-0.01747-0.0031-0.01254-0.0022-0.02911-0.0022-0.02598 0-0.04837 0.01209t-0.03583 0.03762-0.01344 0.06583v0.29111zm0.4819 0.01075q-0.06942 0-0.11868-0.0318-0.04882-0.0318-0.07479-0.08733-0.02598-0.05598-0.02598-0.12719 0-0.0721 0.02732-0.12809 0.02732-0.05598 0.07569-0.08778 0.04837-0.03225 0.11107-0.03225 0.04926 0 0.08868 0.01791 0.03986 0.01791 0.06808 0.05106 0.02821 0.03314 0.04299 0.07882 0.01523 0.04523 0.01523 0.10032v0.02105h-0.38874v-0.06539h0.3462l-0.03269 0.02284q0-0.04837-0.01747-0.08375-0.01702-0.03583-0.04837-0.05509-0.03135-0.01971-0.0739-0.01971-0.0421 0-0.07345 0.01971-0.0309 0.01926-0.04837 0.05509-0.01702 0.03538-0.01702 0.08375v0.03225q0 0.04882 0.01657 0.08644 0.01702 0.03762 0.04927 0.05912 0.03225 0.02105 0.07837 0.02105 0.03359 0 0.05912-0.0103 0.02553-0.01075 0.0421-0.02956 0.01702-0.01881 0.02419-0.04344h0.07614q-9e-3 0.04523-0.03717 0.07972-0.02822 0.03404-0.07076 0.05329-0.0421 0.01926-0.0936 0.01926zm0.50295-0.48369v0.06539h-0.25618v-0.06539zm-0.17198 0.47294v-0.55714q0-0.03404 0.01523-0.05867t0.04299-0.03807q0.02822-0.01344 0.06628-0.01344 0.01567 0 0.02956 0 0.01388 0 0.01791 0v0.06539q-4e-3 0-0.01836 0-0.01388 0-0.02195 0-0.03001 0-0.04299 0.01299-0.01254 0.01299-0.01254 0.04344v0.5455z" baseline-shift="sub"/>
  </g>
  <g fill="#438cbc" stroke-linecap="round" stroke-linejoin="round" stroke-width=".198" aria-label="VE">
   <path d="m26.666 16.927-0.37896-1.0266h0.13091l0.22186 0.61874q0.01791 0.0503 0.04548 0.13505 0.02825 0.08406 0.07028 0.21222h-0.03445q0.04065-0.12816 0.0689-0.21222 0.02825-0.08475 0.04548-0.13505l0.21635-0.61874h0.12954l-0.37483 1.0266z"/>
   <path d="m27.261 17.209v-0.66731h0.43398v0.07166h-0.35336v0.21811h0.32739v0.07166h-0.32739v0.23423h0.35336v0.07166z" baseline-shift="sub"/>
  </g>
 </g>
 <script id="JessyInk" ns1:version="1.5.5">// Copyright 2008, 2009 Hannes Hochreiner
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.

// Set onload event handler.
window.onload = jessyInkInit;

// Creating a namespace dictionary. The standard Inkscape namespaces are taken from inkex.py.
var NSS = new Object();
NSS['sodipodi']='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd';
NSS['cc']='http://web.resource.org/cc/';
NSS['svg']='http://www.w3.org/2000/svg';
NSS['dc']='http://purl.org/dc/elements/1.1/';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['inkscape']='http://www.inkscape.org/namespaces/inkscape';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['jessyink']='https://launchpad.net/jessyink';

// Keycodes.
var LEFT_KEY = 37; // cursor left keycode
var UP_KEY = 38; // cursor up keycode
var RIGHT_KEY = 39; // cursor right keycode
var DOWN_KEY = 40; // cursor down keycode
var PAGE_UP_KEY = 33; // page up keycode
var PAGE_DOWN_KEY = 34; // page down keycode
var HOME_KEY = 36; // home keycode
var END_KEY = 35; // end keycode
var ENTER_KEY = 13; // next slide
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

// Presentation modes.
var SLIDE_MODE = 1;
var INDEX_MODE = 2;
var DRAWING_MODE = 3;

// Mouse handler actions.
var MOUSE_UP = 1;
var MOUSE_DOWN = 2;
var MOUSE_MOVE = 3;
var MOUSE_WHEEL = 4;

// Parameters.
var ROOT_NODE = document.getElementsByTagNameNS(NSS["svg"], "svg")[0];
var HEIGHT = 0;
var WIDTH = 0;
var INDEX_COLUMNS_DEFAULT = 4;
var INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
var INDEX_OFFSET = 0;
var STATE_START = -1;
var STATE_END = -2;
var BACKGROUND_COLOR = null;
var slides = new Array();

// Initialisation.
var currentMode = SLIDE_MODE;
var masterSlide = null;
var activeSlide = 0;
var activeEffect = 0;
var timeStep = 30; // 40 ms equal 25 frames per second.
var lastFrameTime = null;
var processingEffect = false;
var transCounter = 0;
var effectArray = 0;
var defaultTransitionInDict = new Object();
defaultTransitionInDict["name"] = "appear";
var defaultTransitionOutDict = new Object();
defaultTransitionOutDict["name"] = "appear";
var jessyInkInitialised = false;

// Initialise char and key code dictionaries.
var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

// Initialise mouse handler dictionary.
var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();

var progress_bar_visible = false;
var timer_elapsed = 0;
var timer_start = timer_elapsed;
var timer_duration = 15; // 15 minutes

var history_counter = 0;
var history_original_elements = new Array();
var history_presentation_elements = new Array();

var mouse_original_path = null;
var mouse_presentation_path = null;
var mouse_last_x = -1;
var mouse_last_y = -1;
var mouse_min_dist_sqr = 3 * 3;
var path_colour = "red";
var path_width_default = 3;
var path_width = path_width_default;
var path_paint_width = path_width;

var number_of_added_slides = 0;

/** Initialisation function.
 *  The whole presentation is set-up in this function.
 */
function jessyInkInit()
{
    // Make sure we only execute this code once. Double execution can occur if the onload event handler is set
    // in the main svg tag as well (as was recommended in earlier versions). Executing this function twice does
    // not lead to any problems, but it takes more time.
    if (jessyInkInitialised)
        return;

    // Making the presentation scalable.
    var VIEWBOX = ROOT_NODE.getAttribute("viewBox");

    if (VIEWBOX)
    {
        WIDTH = ROOT_NODE.viewBox.animVal.width;
        HEIGHT = ROOT_NODE.viewBox.animVal.height;
    }
    else
    {
        HEIGHT = parseFloat(ROOT_NODE.getAttribute("height"));
        WIDTH = parseFloat(ROOT_NODE.getAttribute("width"));
        ROOT_NODE.setAttribute("viewBox", "0 0 " + WIDTH + " " + HEIGHT);
    }

    ROOT_NODE.setAttribute("width", "100%");
    ROOT_NODE.setAttribute("height", "100%");

    // Setting the background color.
    var namedViews = document.getElementsByTagNameNS(NSS["sodipodi"], "namedview");

    for (var counter = 0; counter &lt; namedViews.length; counter++)
    {
        if (namedViews[counter].hasAttribute("id") &amp;&amp; namedViews[counter].hasAttribute("pagecolor"))
        {
            if (namedViews[counter].getAttribute("id") == "base")
            {
                BACKGROUND_COLOR = namedViews[counter].getAttribute("pagecolor");
                var newAttribute = "background-color:" + BACKGROUND_COLOR + ";";

                if (ROOT_NODE.hasAttribute("style"))
                    newAttribute += ROOT_NODE.getAttribute("style");

                ROOT_NODE.setAttribute("style", newAttribute);
            }
        }
    }

    // Defining clip-path.
    var defsNodes = document.getElementsByTagNameNS(NSS["svg"], "defs");

    if (defsNodes.length &gt; 0)
    {
        var existingClipPath = document.getElementById("jessyInkSlideClipPath");

        if (!existingClipPath)
        {
            var rectNode = document.createElementNS(NSS["svg"], "rect");
            var clipPath = document.createElementNS(NSS["svg"], "clipPath");

            rectNode.setAttribute("x", 0);
            rectNode.setAttribute("y", 0);
            rectNode.setAttribute("width", WIDTH);
            rectNode.setAttribute("height", HEIGHT);

            clipPath.setAttribute("id", "jessyInkSlideClipPath");
            clipPath.setAttribute("clipPathUnits", "userSpaceOnUse");

            clipPath.appendChild(rectNode);
            defsNodes[0].appendChild(clipPath);
        }
    }

    // Making a list of the slide and finding the master slide.
    var nodes = document.getElementsByTagNameNS(NSS["svg"], "g");
    var tempSlides = new Array();
    var existingJessyInkPresentationLayer = null;

    for (var counter = 0; counter &lt; nodes.length; counter++)
    {
        if (nodes[counter].getAttributeNS(NSS["inkscape"], "groupmode") &amp;&amp; (nodes[counter].getAttributeNS(NSS["inkscape"], "groupmode") == "layer"))
        {
            if (nodes[counter].getAttributeNS(NSS["inkscape"], "label") &amp;&amp; nodes[counter].getAttributeNS(NSS["jessyink"], "masterSlide") == "masterSlide")
                masterSlide = nodes[counter];
            else if (nodes[counter].getAttributeNS(NSS["inkscape"], "label") &amp;&amp; nodes[counter].getAttributeNS(NSS["jessyink"], "presentationLayer") == "presentationLayer")
                existingJessyInkPresentationLayer = nodes[counter];
            else
                tempSlides.push(nodes[counter].getAttribute("id"));
        }
        else if (nodes[counter].getAttributeNS(NSS['jessyink'], 'element'))
        {
            handleElement(nodes[counter]);
        }
    }

    // Hide master slide set default transitions.
    if (masterSlide)
    {
        masterSlide.style.display = "none";

        if (masterSlide.hasAttributeNS(NSS["jessyink"], "transitionIn"))
            defaultTransitionInDict = propStrToDict(masterSlide.getAttributeNS(NSS["jessyink"], "transitionIn"));

        if (masterSlide.hasAttributeNS(NSS["jessyink"], "transitionOut"))
            defaultTransitionOutDict = propStrToDict(masterSlide.getAttributeNS(NSS["jessyink"], "transitionOut"));
    }

    if (existingJessyInkPresentationLayer != null)
    {
        existingJessyInkPresentationLayer.parentNode.removeChild(existingJessyInkPresentationLayer);
    }

    // Set start slide.
    var hashObj = new LocationHash(window.location.hash);

    activeSlide = hashObj.slideNumber;
    activeEffect = hashObj.effectNumber;

    if (activeSlide &lt; 0)
        activeSlide = 0;
    else if (activeSlide &gt;= tempSlides.length)
        activeSlide = tempSlides.length - 1;

    var originalNode = document.getElementById(tempSlides[counter]);

    var JessyInkPresentationLayer = document.createElementNS(NSS["svg"], "g");
    JessyInkPresentationLayer.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
    JessyInkPresentationLayer.setAttributeNS(NSS["inkscape"], "label", "JessyInk Presentation Layer");
    JessyInkPresentationLayer.setAttributeNS(NSS["jessyink"], "presentationLayer", "presentationLayer");
    JessyInkPresentationLayer.setAttribute("id", "jessyink_presentation_layer");
    JessyInkPresentationLayer.style.display = "inherit";
    ROOT_NODE.appendChild(JessyInkPresentationLayer);

    // Gathering all the information about the transitions and effects of the slides, set the background
    // from the master slide and substitute the auto-texts.
    for (var counter = 0; counter &lt; tempSlides.length; counter++)
    {
        var originalNode = document.getElementById(tempSlides[counter]);
        originalNode.style.display = "none";
        var node = suffixNodeIds(originalNode.cloneNode(true), "_" + counter);
        JessyInkPresentationLayer.appendChild(node);
        slides[counter] = new Object();
        slides[counter]["original_element"] = originalNode;
        slides[counter]["element"] = node;

        // Set build in transition.
        slides[counter]["transitionIn"] = new Object();

        var dict;

        if (node.hasAttributeNS(NSS["jessyink"], "transitionIn"))
            dict = propStrToDict(node.getAttributeNS(NSS["jessyink"], "transitionIn"));
        else
            dict = defaultTransitionInDict;

        slides[counter]["transitionIn"]["name"] = dict["name"];
        slides[counter]["transitionIn"]["options"] = new Object();

        for (key in dict)
            if (key != "name")
                slides[counter]["transitionIn"]["options"][key] = dict[key];

        // Set build out transition.
        slides[counter]["transitionOut"] = new Object();

        if (node.hasAttributeNS(NSS["jessyink"], "transitionOut"))
            dict = propStrToDict(node.getAttributeNS(NSS["jessyink"], "transitionOut"));
        else
            dict = defaultTransitionOutDict;

        slides[counter]["transitionOut"]["name"] = dict["name"];
        slides[counter]["transitionOut"]["options"] = new Object();

        for (key in dict)
            if (key != "name")
                slides[counter]["transitionOut"]["options"][key] = dict[key];

        // Copy master slide content.
        if (masterSlide)
        {
            var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), "_" + counter);
            clonedNode.removeAttributeNS(NSS["inkscape"], "groupmode");
            clonedNode.removeAttributeNS(NSS["inkscape"], "label");
            clonedNode.style.display = "inherit";

            node.insertBefore(clonedNode, node.firstChild);
        }

        // Setting clip path.
        node.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");

        // Substitute auto texts.
        substituteAutoTexts(node, node.getAttributeNS(NSS["inkscape"], "label"), counter + 1, tempSlides.length);

        node.removeAttributeNS(NSS["inkscape"], "groupmode");
        node.removeAttributeNS(NSS["inkscape"], "label");

        // Set effects.
        var tempEffects = new Array();
        var groups = new Object();

        for (var IOCounter = 0; IOCounter &lt;= 1; IOCounter++)
        {
            var propName = "";
            var dir = 0;

            if (IOCounter == 0)
            {
                propName = "effectIn";
                dir = 1;
            }
            else if (IOCounter == 1)
            {
                propName = "effectOut";
                dir = -1;
            }

            var effects = getElementsByPropertyNS(node, NSS["jessyink"], propName);

            for (var effectCounter = 0; effectCounter &lt; effects.length; effectCounter++)
            {
                var element = document.getElementById(effects[effectCounter]);
                var dict = propStrToDict(element.getAttributeNS(NSS["jessyink"], propName));

                // Put every element that has an effect associated with it, into its own group.
                // Unless of course, we already put it into its own group.
                if (!(groups[element.id]))
                {
                    var newGroup = document.createElementNS(NSS["svg"], "g");

                    element.parentNode.insertBefore(newGroup, element);
                    newGroup.appendChild(element.parentNode.removeChild(element));
                    groups[element.id] = newGroup;
                }

                var effectDict = new Object();

                effectDict["effect"] = dict["name"];
                effectDict["dir"] = dir;
                effectDict["element"] = groups[element.id];

                for (var option in dict)
                {
                    if ((option != "name") &amp;&amp; (option != "order"))
                    {
                        if (!effectDict["options"])
                            effectDict["options"] = new Object();

                        effectDict["options"][option] = dict[option];
                    }
                }

                if (!tempEffects[dict["order"]])
                    tempEffects[dict["order"]] = new Array();

                tempEffects[dict["order"]][tempEffects[dict["order"]].length] = effectDict;
            }
        }

        // Make invisible, but keep in rendering tree to ensure that bounding box can be calculated.
        node.setAttribute("opacity",0);
        node.style.display = "inherit";

        // Create a transform group.
        var transformGroup = document.createElementNS(NSS["svg"], "g");

        // Add content to transform group.
        while (node.firstChild)
            transformGroup.appendChild(node.firstChild);

        // Transfer the transform attribute from the node to the transform group.
        if (node.getAttribute("transform"))
        {
            transformGroup.setAttribute("transform", node.getAttribute("transform"));
            node.removeAttribute("transform");
        }

        // Create a view group.
        var viewGroup = document.createElementNS(NSS["svg"], "g");

        viewGroup.appendChild(transformGroup);
        slides[counter]["viewGroup"] = node.appendChild(viewGroup);

        // Insert background.
        if (BACKGROUND_COLOR != null)
        {
            var rectNode = document.createElementNS(NSS["svg"], "rect");

            rectNode.setAttribute("x", 0);
            rectNode.setAttribute("y", 0);
            rectNode.setAttribute("width", WIDTH);
            rectNode.setAttribute("height", HEIGHT);
            rectNode.setAttribute("id", "jessyInkBackground" + counter);
            rectNode.setAttribute("fill", BACKGROUND_COLOR);

            slides[counter]["viewGroup"].insertBefore(rectNode, slides[counter]["viewGroup"].firstChild);
        }

        // Set views.
        var tempViews = new Array();
        var views = getElementsByPropertyNS(node, NSS["jessyink"], "view");
        var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

        // Set initial view even if there are no other views.
        slides[counter]["viewGroup"].setAttribute("transform", matrixOld.toAttribute());
        slides[counter].initialView = matrixOld.toAttribute();

        for (var viewCounter = 0; viewCounter &lt; views.length; viewCounter++)
        {
            var element = document.getElementById(views[viewCounter]);
            var dict = propStrToDict(element.getAttributeNS(NSS["jessyink"], "view"));

            if (dict["order"] == 0)
            {
                matrixOld = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());
                slides[counter].initialView = matrixOld.toAttribute();
            }
            else
            {
                var effectDict = new Object();

                effectDict["effect"] = dict["name"];
                effectDict["dir"] = 1;
                effectDict["element"] = slides[counter]["viewGroup"];
                effectDict["order"] = dict["order"];

                for (var option in dict)
                {
                    if ((option != "name") &amp;&amp; (option != "order"))
                    {
                        if (!effectDict["options"])
                            effectDict["options"] = new Object();

                        effectDict["options"][option] = dict[option];
                    }
                }

                effectDict["options"]["matrixNew"] = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());

                tempViews[dict["order"]] = effectDict;
            }

            // Remove element.
            element.parentNode.removeChild(element);
        }

        // Consolidate view array and append it to the effect array.
        if (tempViews.length &gt; 0)
        {
            for (var viewCounter = 0; viewCounter &lt; tempViews.length; viewCounter++)
            {
                if (tempViews[viewCounter])
                {
                    tempViews[viewCounter]["options"]["matrixOld"] = matrixOld;
                    matrixOld = tempViews[viewCounter]["options"]["matrixNew"];

                    if (!tempEffects[tempViews[viewCounter]["order"]])
                        tempEffects[tempViews[viewCounter]["order"]] = new Array();

                    tempEffects[tempViews[viewCounter]["order"]][tempEffects[tempViews[viewCounter]["order"]].length] = tempViews[viewCounter];
                }
            }
        }

        // Set consolidated effect array.
        if (tempEffects.length &gt; 0)
        {
            slides[counter]["effects"] = new Array();

            for (var effectCounter = 0; effectCounter &lt; tempEffects.length; effectCounter++)
            {
                if (tempEffects[effectCounter])
                    slides[counter]["effects"][slides[counter]["effects"].length] = tempEffects[effectCounter];
            }
        }

        node.setAttribute("onmouseover", "if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != " + counter + ")) { indexSetActiveSlide(" + counter + "); };");

        // Set visibility for initial state.
        if (counter == activeSlide)
        {
            node.style.display = "inherit";
            node.setAttribute("opacity",1);
        }
        else
        {
            node.style.display = "none";
            node.setAttribute("opacity",0);
        }
    }

    // Set key handler.
    var jessyInkObjects = document.getElementsByTagNameNS(NSS["svg"], "g");

    for (var counter = 0; counter &lt; jessyInkObjects.length; counter++)
    {
        var elem = jessyInkObjects[counter];

        if (elem.getAttributeNS(NSS["jessyink"], "customKeyBindings"))
        {
            if (elem.getCustomKeyBindings != undefined)
                keyCodeDictionary = elem.getCustomKeyBindings();

            if (elem.getCustomCharBindings != undefined)
                charCodeDictionary = elem.getCustomCharBindings();
        }
    }

    // Set mouse handler.
    var jessyInkMouseHandler = document.getElementsByTagNameNS(NSS["jessyink"], "mousehandler");

    for (var counter = 0; counter &lt; jessyInkMouseHandler.length; counter++)
    {
        var elem = jessyInkMouseHandler[counter];

        if (elem.getMouseHandler != undefined)
        {
            var tempDict = elem.getMouseHandler();

            for (mode in tempDict)
            {
                if (!mouseHandlerDictionary[mode])
                    mouseHandlerDictionary[mode] = new Object();

                for (handler in tempDict[mode])
                    mouseHandlerDictionary[mode][handler] = tempDict[mode][handler];
            }
        }
    }

    // Check effect number.
    if ((activeEffect &lt; 0) || (!slides[activeSlide].effects))
    {
        activeEffect = 0;
    }
    else if (activeEffect &gt; slides[activeSlide].effects.length)
    {
        activeEffect = slides[activeSlide].effects.length;
    }

    createProgressBar(JessyInkPresentationLayer);
    hideProgressBar();
    setProgressBarValue(activeSlide);
    setTimeIndicatorValue(0);
    setInterval("updateTimer()", 1000);
    setSlideToState(activeSlide, activeEffect);
    jessyInkInitialised = true;
}

/** Function to substitute the auto-texts.
 *
 *  @param node the node
 *  @param slideName name of the slide the node is on
 *  @param slideNumber number of the slide the node is on
 *  @param numberOfSlides number of slides in the presentation
 */
function substituteAutoTexts(node, slideName, slideNumber, numberOfSlides)
{
    var texts = node.getElementsByTagNameNS(NSS["svg"], "tspan");

    for (var textCounter = 0; textCounter &lt; texts.length; textCounter++)
    {
        if (texts[textCounter].getAttributeNS(NSS["jessyink"], "autoText") == "slideNumber")
            texts[textCounter].firstChild.nodeValue = slideNumber;
        else if (texts[textCounter].getAttributeNS(NSS["jessyink"], "autoText") == "numberOfSlides")
            texts[textCounter].firstChild.nodeValue = numberOfSlides;
        else if (texts[textCounter].getAttributeNS(NSS["jessyink"], "autoText") == "slideTitle")
            texts[textCounter].firstChild.nodeValue = slideName;
    }
}

/** Convenience function to get an element depending on whether it has a property with a particular name.
 *    This function emulates some dearly missed XPath functionality.
 *
 *  @param node the node
 *  @param namespace namespace of the attribute
 *  @param name attribute name
 */
function getElementsByPropertyNS(node, namespace, name)
{
    var elems = new Array();

    if (node.getAttributeNS(namespace, name))
        elems.push(node.getAttribute("id"));

    for (var counter = 0; counter &lt; node.childNodes.length; counter++)
    {
        if (node.childNodes[counter].nodeType == 1)
            elems = elems.concat(getElementsByPropertyNS(node.childNodes[counter], namespace, name));
    }

    return elems;
}

/** Function to dispatch the next effect, if there is none left, change the slide.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function dispatchEffects(dir)
{
    if (slides[activeSlide]["effects"] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide]["effects"].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (dir == 1)
        {
            effectArray = slides[activeSlide]["effects"][activeEffect];
            activeEffect += dir;
        }
        else if (dir == -1)
        {
            activeEffect += dir;
            effectArray = slides[activeSlide]["effects"][activeEffect];
        }

        transCounter = 0;
        startTime = (new Date()).getTime();
        lastFrameTime = null;
        effect(dir);
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to skip effects and directly either put the slide into start or end state or change slides.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function skipEffects(dir)
{
    if (slides[activeSlide]["effects"] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide]["effects"].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (slides[activeSlide]["effects"] &amp;&amp; (dir == 1))
            activeEffect = slides[activeSlide]["effects"].length;
        else
            activeEffect = 0;

        if (dir == 1)
            setSlideToState(activeSlide, STATE_END);
        else
            setSlideToState(activeSlide, STATE_START);

        processingEffect = false;
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to change between slides.
 *
 *  @param dir direction (1 = forwards, -1 = backwards)
 */
function changeSlide(dir)
{
    processingEffect = true;
    effectArray = new Array();

    effectArray[0] = new Object();
    if (dir == 1)
    {
        effectArray[0]["effect"] = slides[activeSlide]["transitionOut"]["name"];
        effectArray[0]["options"] = slides[activeSlide]["transitionOut"]["options"];
        effectArray[0]["dir"] = -1;
    }
    else if (dir == -1)
    {
        effectArray[0]["effect"] = slides[activeSlide]["transitionIn"]["name"];
        effectArray[0]["options"] = slides[activeSlide]["transitionIn"]["options"];
        effectArray[0]["dir"] = 1;
    }
    effectArray[0]["element"] = slides[activeSlide]["element"];

    activeSlide += dir;
    setProgressBarValue(activeSlide);

    effectArray[1] = new Object();

    if (dir == 1)
    {
        effectArray[1]["effect"] = slides[activeSlide]["transitionIn"]["name"];
        effectArray[1]["options"] = slides[activeSlide]["transitionIn"]["options"];
        effectArray[1]["dir"] = 1;
    }
    else if (dir == -1)
    {
        effectArray[1]["effect"] = slides[activeSlide]["transitionOut"]["name"];
        effectArray[1]["options"] = slides[activeSlide]["transitionOut"]["options"];
        effectArray[1]["dir"] = -1;
    }

    effectArray[1]["element"] = slides[activeSlide]["element"];

    if (slides[activeSlide]["effects"] &amp;&amp; (dir == -1))
        activeEffect = slides[activeSlide]["effects"].length;
    else
        activeEffect = 0;

    if (dir == -1)
        setSlideToState(activeSlide, STATE_END);
    else
        setSlideToState(activeSlide, STATE_START);

    transCounter = 0;
    startTime = (new Date()).getTime();
    lastFrameTime = null;
    effect(dir);
}

/** Function to toggle between index and slide mode.
*/
function toggleSlideIndex()
{
    var suspendHandle = ROOT_NODE.suspendRedraw(500);

    if (currentMode == SLIDE_MODE)
    {
        hideProgressBar();
        INDEX_OFFSET = -1;
        indexSetPageSlide(activeSlide);
        currentMode = INDEX_MODE;
    }
    else if (currentMode == INDEX_MODE)
    {
        for (var counter = 0; counter &lt; slides.length; counter++)
        {
            slides[counter]["element"].setAttribute("transform","scale(1)");

            if (counter == activeSlide)
            {
                slides[counter]["element"].style.display = "inherit";
                slides[counter]["element"].setAttribute("opacity",1);
                activeEffect = 0;
            }
            else
            {
                slides[counter]["element"].setAttribute("opacity",0);
                slides[counter]["element"].style.display = "none";
            }
        }
        currentMode = SLIDE_MODE;
        setSlideToState(activeSlide, STATE_START);
        setProgressBarValue(activeSlide);

        if (progress_bar_visible)
        {
            showProgressBar();
        }
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to run an effect.
 *
 *  @param dir direction in which to play the effect (1 = forwards, -1 = backwards)
 */
function effect(dir)
{
    var done = true;

    var suspendHandle = ROOT_NODE.suspendRedraw(200);

    for (var counter = 0; counter &lt; effectArray.length; counter++)
    {
        if (effectArray[counter]["effect"] == "fade")
            done &amp;= fade(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
        else if (effectArray[counter]["effect"] == "appear")
            done &amp;= appear(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
        else if (effectArray[counter]["effect"] == "pop")
            done &amp;= pop(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
        else if (effectArray[counter]["effect"] == "view")
            done &amp;= view(parseInt(effectArray[counter]["dir"]) * dir, effectArray[counter]["element"], transCounter, effectArray[counter]["options"]);
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();

    if (!done)
    {
        var currentTime = (new Date()).getTime();
        var timeDiff = 1;

        transCounter = currentTime - startTime;

        if (lastFrameTime != null)
        {
            timeDiff = timeStep - (currentTime - lastFrameTime);

            if (timeDiff &lt;= 0)
                timeDiff = 1;
        }

        lastFrameTime = currentTime;

        window.setTimeout("effect(" + dir + ")", timeDiff);
    }
    else
    {
        window.location.hash = (activeSlide + 1) + '_' + activeEffect;
        processingEffect = false;
    }
}

/** Function to display the index sheet.
 *
 *  @param offsetNumber offset number
 */
function displayIndex(offsetNumber)
{
    var offsetX = 0;
    var offsetY = 0;

    if (offsetNumber &lt; 0)
        offsetNumber = 0;
    else if (offsetNumber &gt;= slides.length)
        offsetNumber = slides.length - 1;

    for (var counter = 0; counter &lt; slides.length; counter++)
    {
        if ((counter &lt; offsetNumber) || (counter &gt; offsetNumber + INDEX_COLUMNS * INDEX_COLUMNS - 1))
        {
            slides[counter]["element"].setAttribute("opacity",0);
            slides[counter]["element"].style.display = "none";
        }
        else
        {
            offsetX = ((counter - offsetNumber) % INDEX_COLUMNS) * WIDTH;
            offsetY = Math.floor((counter - offsetNumber) / INDEX_COLUMNS) * HEIGHT;

            slides[counter]["element"].setAttribute("transform","scale("+1/INDEX_COLUMNS+") translate("+offsetX+","+offsetY+")");
            slides[counter]["element"].style.display = "inherit";
            slides[counter]["element"].setAttribute("opacity",0.5);
        }

        setSlideToState(counter, STATE_END);
    }

    //do we need to save the current offset?
    if (INDEX_OFFSET != offsetNumber)
        INDEX_OFFSET = offsetNumber;
}

/** Function to set the active slide in the slide view.
 *
 *  @param nbr index of the active slide
 */
function slideSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide]["element"].setAttribute("opacity",0);
    slides[activeSlide]["element"].style.display = "none";

    activeSlide = parseInt(nbr);

    setSlideToState(activeSlide, STATE_START);
    slides[activeSlide]["element"].style.display = "inherit";
    slides[activeSlide]["element"].setAttribute("opacity",1);

    activeEffect = 0;
    setProgressBarValue(nbr);
}

/** Function to set the active slide in the index view.
 *
 *  @param nbr index of the active slide
 */
function indexSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide]["element"].setAttribute("opacity",0.5);

    activeSlide = parseInt(nbr);
    window.location.hash = (activeSlide + 1) + '_0';

    slides[activeSlide]["element"].setAttribute("opacity",1);
}

/** Function to set the page and active slide in index view.
 *
 *  @param nbr index of the active slide
 *
 *  NOTE: To force a redraw,
 *  set INDEX_OFFSET to -1 before calling indexSetPageSlide().
 *
 *  This is necessary for zooming (otherwise the index might not
 *  get redrawn) and when switching to index mode.
 *
 *  INDEX_OFFSET = -1
 *  indexSetPageSlide(activeSlide);
 */
function indexSetPageSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    //calculate the offset
    var offset = nbr - nbr % (INDEX_COLUMNS * INDEX_COLUMNS);

    if (offset &lt; 0)
        offset = 0;

    //if different from kept offset, then record and change the page
    if (offset != INDEX_OFFSET)
    {
        INDEX_OFFSET = offset;
        displayIndex(INDEX_OFFSET);
    }

    //set the active slide
    indexSetActiveSlide(nbr);
}

/** Event handler for key press.
 *
 *  @param e the event
 */
function keydown(e)
{
    if (!e)
        e = window.event;

    code = e.keyCode || e.charCode;

    if (!processingEffect &amp;&amp; keyCodeDictionary[currentMode] &amp;&amp; keyCodeDictionary[currentMode][code])
        return keyCodeDictionary[currentMode][code]();
    else
        document.onkeypress = keypress;
}
// Set event handler for key down.
document.onkeydown = keydown;

/** Event handler for key press.
 *
 *  @param e the event
 */
function keypress(e)
{
    document.onkeypress = null;

    if (!e)
        e = window.event;

    str = String.fromCharCode(e.keyCode || e.charCode);

    if (!processingEffect &amp;&amp; charCodeDictionary[currentMode] &amp;&amp; charCodeDictionary[currentMode][str])
        return charCodeDictionary[currentMode][str]();
}

/** Function to supply the default char code dictionary.
 *
 * @returns default char code dictionary
 */
function getDefaultCharCodeDictionary()
{
    var charCodeDict = new Object();

    charCodeDict[SLIDE_MODE] = new Object();
    charCodeDict[INDEX_MODE] = new Object();
    charCodeDict[DRAWING_MODE] = new Object();

    charCodeDict[SLIDE_MODE]["i"] = function () { return toggleSlideIndex(); };
    charCodeDict[SLIDE_MODE]["d"] = function () { return slideSwitchToDrawingMode(); };
    charCodeDict[SLIDE_MODE]["D"] = function () { return slideQueryDuration(); };
    charCodeDict[SLIDE_MODE]["n"] = function () { return slideAddSlide(activeSlide); };
    charCodeDict[SLIDE_MODE]["p"] = function () { return slideToggleProgressBarVisibility(); };
    charCodeDict[SLIDE_MODE]["t"] = function () { return slideResetTimer(); };
    charCodeDict[SLIDE_MODE]["e"] = function () { return slideUpdateExportLayer(); };

    charCodeDict[DRAWING_MODE]["d"] = function () { return drawingSwitchToSlideMode(); };
    charCodeDict[DRAWING_MODE]["0"] = function () { return drawingResetPathWidth(); };
    charCodeDict[DRAWING_MODE]["1"] = function () { return drawingSetPathWidth(1.0); };
    charCodeDict[DRAWING_MODE]["3"] = function () { return drawingSetPathWidth(3.0); };
    charCodeDict[DRAWING_MODE]["5"] = function () { return drawingSetPathWidth(5.0); };
    charCodeDict[DRAWING_MODE]["7"] = function () { return drawingSetPathWidth(7.0); };
    charCodeDict[DRAWING_MODE]["9"] = function () { return drawingSetPathWidth(9.0); };
    charCodeDict[DRAWING_MODE]["b"] = function () { return drawingSetPathColour("blue"); };
    charCodeDict[DRAWING_MODE]["c"] = function () { return drawingSetPathColour("cyan"); };
    charCodeDict[DRAWING_MODE]["g"] = function () { return drawingSetPathColour("green"); };
    charCodeDict[DRAWING_MODE]["k"] = function () { return drawingSetPathColour("black"); };
    charCodeDict[DRAWING_MODE]["m"] = function () { return drawingSetPathColour("magenta"); };
    charCodeDict[DRAWING_MODE]["o"] = function () { return drawingSetPathColour("orange"); };
    charCodeDict[DRAWING_MODE]["r"] = function () { return drawingSetPathColour("red"); };
    charCodeDict[DRAWING_MODE]["w"] = function () { return drawingSetPathColour("white"); };
    charCodeDict[DRAWING_MODE]["y"] = function () { return drawingSetPathColour("yellow"); };
    charCodeDict[DRAWING_MODE]["z"] = function () { return drawingUndo(); };

    charCodeDict[INDEX_MODE]["i"] = function () { return toggleSlideIndex(); };
    charCodeDict[INDEX_MODE]["-"] = function () { return indexDecreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE]["="] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE]["+"] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE]["0"] = function () { return indexResetNumberOfColumns(); };

    return charCodeDict;
}

/** Function to supply the default key code dictionary.
 *
 * @returns default key code dictionary
 */
function getDefaultKeyCodeDictionary()
{
    var keyCodeDict = new Object();

    keyCodeDict[SLIDE_MODE] = new Object();
    keyCodeDict[INDEX_MODE] = new Object();
    keyCodeDict[DRAWING_MODE] = new Object();

    keyCodeDict[SLIDE_MODE][LEFT_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][RIGHT_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][UP_KEY] = function() { return skipEffects(-1); };
    keyCodeDict[SLIDE_MODE][DOWN_KEY] = function() { return skipEffects(1); };
    keyCodeDict[SLIDE_MODE][PAGE_UP_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][HOME_KEY] = function() { return slideSetActiveSlide(0); };
    keyCodeDict[SLIDE_MODE][END_KEY] = function() { return slideSetActiveSlide(slides.length - 1); };
    keyCodeDict[SLIDE_MODE][SPACE_KEY] = function() { return dispatchEffects(1); };

    keyCodeDict[INDEX_MODE][LEFT_KEY] = function() { return indexSetPageSlide(activeSlide - 1); };
    keyCodeDict[INDEX_MODE][RIGHT_KEY] = function() { return indexSetPageSlide(activeSlide + 1); };
    keyCodeDict[INDEX_MODE][UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][HOME_KEY] = function() { return indexSetPageSlide(0); };
    keyCodeDict[INDEX_MODE][END_KEY] = function() { return indexSetPageSlide(slides.length - 1); };
    keyCodeDict[INDEX_MODE][ENTER_KEY] = function() { return toggleSlideIndex(); };

    keyCodeDict[DRAWING_MODE][ESCAPE_KEY] = function () { return drawingSwitchToSlideMode(); };

    return keyCodeDict;
}

/** Function to handle all mouse events.
 *
 *    @param    evnt    event
 *    @param    action    type of event (e.g. mouse up, mouse wheel)
 */
function mouseHandlerDispatch(evnt, action)
{
    if (!evnt)
        evnt = window.event;

    var retVal = true;

    if (!processingEffect &amp;&amp; mouseHandlerDictionary[currentMode] &amp;&amp; mouseHandlerDictionary[currentMode][action])
    {
        var subRetVal = mouseHandlerDictionary[currentMode][action](evnt);

        if (subRetVal != null &amp;&amp; subRetVal != undefined)
            retVal = subRetVal;
    }

    if (evnt.preventDefault &amp;&amp; !retVal)
        evnt.preventDefault();

    evnt.returnValue = retVal;

    return retVal;
}

// Set mouse event handler.
document.onmousedown = function(e) { return mouseHandlerDispatch(e, MOUSE_DOWN); };
document.onmouseup = function(e) { return mouseHandlerDispatch(e, MOUSE_UP); };
document.onmousemove = function(e) { return mouseHandlerDispatch(e, MOUSE_MOVE); };

// Moz
if (window.addEventListener)
{
    window.addEventListener('DOMMouseScroll', function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); }, false);
}

// Opera Safari OK - may not work in IE
window.onmousewheel = function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); };

/** Function to supply the default mouse handler dictionary.
 *
 * @returns default mouse handler dictionary
 */
function getDefaultMouseHandlerDictionary()
{
    var mouseHandlerDict = new Object();

    mouseHandlerDict[SLIDE_MODE] = new Object();
    mouseHandlerDict[INDEX_MODE] = new Object();
    mouseHandlerDict[DRAWING_MODE] = new Object();

    mouseHandlerDict[SLIDE_MODE][MOUSE_DOWN] = function(evnt) { return dispatchEffects(1); };
    mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL] = function(evnt) { return slideMousewheel(evnt); };

    mouseHandlerDict[INDEX_MODE][MOUSE_DOWN] = function(evnt) { return toggleSlideIndex(); };

    mouseHandlerDict[DRAWING_MODE][MOUSE_DOWN] = function(evnt) { return drawingMousedown(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_UP] = function(evnt) { return drawingMouseup(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_MOVE] = function(evnt) { return drawingMousemove(evnt); };

    return mouseHandlerDict;
}

/** Function to switch from slide mode to drawing mode.
*/
function slideSwitchToDrawingMode()
{
    currentMode = DRAWING_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute("style"))
        tempDict = propStrToDict(ROOT_NODE.getAttribute("style"));
    else
        tempDict = new Object();

    tempDict["cursor"] = "crosshair";
    ROOT_NODE.setAttribute("style", dictToPropStr(tempDict));
}

/** Function to switch from drawing mode to slide mode.
*/
function drawingSwitchToSlideMode()
{
    currentMode = SLIDE_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute("style"))
        tempDict = propStrToDict(ROOT_NODE.getAttribute("style"));
    else
        tempDict = new Object();

    tempDict["cursor"] = "auto";
    ROOT_NODE.setAttribute("style", dictToPropStr(tempDict));
}

/** Function to decrease the number of columns in index mode.
*/
function indexDecreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &gt;= 3)
    {
        INDEX_COLUMNS -= 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to increase the number of columns in index mode.
*/
function indexIncreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &lt; 7)
    {
        INDEX_COLUMNS += 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset the number of columns in index mode.
*/
function indexResetNumberOfColumns()
{
    if (INDEX_COLUMNS != INDEX_COLUMNS_DEFAULT)
    {
        INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset path width in drawing mode.
*/
function drawingResetPathWidth()
{
    path_width = path_width_default;
    set_path_paint_width();
}

/** Function to set path width in drawing mode.
 *
 * @param width new path width
 */
function drawingSetPathWidth(width)
{
    path_width = width;
    set_path_paint_width();
}

/** Function to set path colour in drawing mode.
 *
 * @param colour new path colour
 */
function drawingSetPathColour(colour)
{
    path_colour = colour;
}

/** Function to query the duration of the presentation from the user in slide mode.
*/
function slideQueryDuration()
{
    var new_duration = prompt("Length of presentation in minutes?", timer_duration);

    if ((new_duration != null) &amp;&amp; (new_duration != ''))
    {
        timer_duration = new_duration;
    }

    updateTimer();
}

/** Function to add new slide in slide mode.
 *
 * @param afterSlide after which slide to insert the new one
 */
function slideAddSlide(afterSlide)
{
    addSlide(afterSlide);
    slideSetActiveSlide(afterSlide + 1);
    updateTimer();
}

/** Function to toggle the visibility of the progress bar in slide mode.
*/
function slideToggleProgressBarVisibility()
{
    if (progress_bar_visible)
    {
        progress_bar_visible = false;
        hideProgressBar();
    }
    else
    {
        progress_bar_visible = true;
        showProgressBar();
    }
}

/** Function to reset the timer in slide mode.
*/
function slideResetTimer()
{
    timer_start = timer_elapsed;
    updateTimer();
}

/** Convenience function to pad a string with zero in front up to a certain length.
 */
function padString(str, len)
{
    var outStr = str;

    while (outStr.length &lt; len)
    {
        outStr = '0' + outStr;
    }

    return outStr;
}

/** Function to update the export layer.
 */
function slideUpdateExportLayer()
{
    // Suspend redraw since we are going to mess with the slides.
    var suspendHandle = ROOT_NODE.suspendRedraw(2000);

    var tmpActiveSlide = activeSlide;
    var tmpActiveEffect = activeEffect;
    var exportedLayers = new Array();

    for (var counterSlides = 0; counterSlides &lt; slides.length; counterSlides++)
    {
        var exportNode;

        setSlideToState(counterSlides, STATE_START);

        var maxEffect = 0;

        if (slides[counterSlides].effects)
        {
            maxEffect = slides[counterSlides].effects.length;
        }

        exportNode = slides[counterSlides].element.cloneNode(true);
        exportNode.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
        exportNode.setAttributeNS(NSS["inkscape"], "label", "slide_" + padString((counterSlides + 1).toString(), slides.length.toString().length) + "_effect_" + padString("0", maxEffect.toString().length));

        exportedLayers.push(exportNode);

        if (slides[counterSlides]["effects"])
        {
            for (var counter = 0; counter &lt; slides[counterSlides]["effects"].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[counterSlides]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[counterSlides]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(parseInt(effect["dir"]), effect["element"], STATE_END, effect["options"]);
                }

                var layerName = "slide_" + padString((counterSlides + 1).toString(), slides.length.toString().length) + "_effect_" + padString((counter + 1).toString(), maxEffect.toString().length);
                exportNode = slides[counterSlides].element.cloneNode(true);
                exportNode.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
                exportNode.setAttributeNS(NSS["inkscape"], "label", layerName);
                exportNode.setAttribute("id", layerName);

                exportedLayers.push(exportNode);
            }
        }
    }

    activeSlide = tmpActiveSlide;
    activeEffect = tmpActiveEffect;
    setSlideToState(activeSlide, activeEffect);

    // Copy image.
    var newDoc = document.documentElement.cloneNode(true);

    // Delete viewbox form new imag and set width and height.
    newDoc.removeAttribute('viewbox');
    newDoc.setAttribute('width', WIDTH);
    newDoc.setAttribute('height', HEIGHT);

    // Delete all layers and script elements.
    var nodesToBeRemoved = new Array();

    for (var childCounter = 0; childCounter &lt;  newDoc.childNodes.length; childCounter++)
    {
        var child = newDoc.childNodes[childCounter];

        if (child.nodeType == 1)
        {
            if ((child.nodeName.toUpperCase() == 'G') || (child.nodeName.toUpperCase() == 'SCRIPT'))
            {
                nodesToBeRemoved.push(child);
            }
        }
    }

    for (var ndCounter = 0; ndCounter &lt; nodesToBeRemoved.length; ndCounter++)
    {
        var nd = nodesToBeRemoved[ndCounter];

        // Before removing the node, check whether it contains any definitions.
        var defs = nd.getElementsByTagNameNS(NSS["svg"], "defs");

        for (var defsCounter = 0; defsCounter &lt; defs.length; defsCounter++)
        {
            if (defs[defsCounter].id)
            {
                newDoc.appendChild(defs[defsCounter].cloneNode(true));
            }
        }

        // Remove node.
        nd.parentNode.removeChild(nd);
    }

    // Set current layer.
    if (exportedLayers[0])
    {
        var namedView;

        for (var nodeCounter = 0; nodeCounter &lt; newDoc.childNodes.length; nodeCounter++)
        {
            if ((newDoc.childNodes[nodeCounter].nodeType == 1) &amp;&amp; (newDoc.childNodes[nodeCounter].getAttribute('id') == 'base'))
            {
                namedView = newDoc.childNodes[nodeCounter];
            }
        }

        if (namedView)
        {
            namedView.setAttributeNS(NSS['inkscape'], 'current-layer', exportedLayers[0].getAttributeNS(NSS['inkscape'], 'label'));
        }
    }

    // Add exported layers.
    while (exportedLayers.length &gt; 0)
    {
        var nd = exportedLayers.pop();

        nd.setAttribute("opacity",1);
        nd.style.display = "inherit";

        newDoc.appendChild(nd);
    }

    // Serialise the new document.
  window.location = 'data:application/svg+xml;base64;charset=utf-8,' + window.btoa(unescape(encodeURIComponent((new XMLSerializer()).serializeToString(newDoc))));

    // Unsuspend redraw.
    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to undo last drawing operation.
*/
function drawingUndo()
{
    mouse_presentation_path = null;
    mouse_original_path = null;

    if (history_presentation_elements.length &gt; 0)
    {
        var p = history_presentation_elements.pop();
        var parent = p.parentNode.removeChild(p);

        p = history_original_elements.pop();
        parent = p.parentNode.removeChild(p);
    }
}

/** Event handler for mouse down in drawing mode.
 *
 *  @param e the event
 */
function drawingMousedown(e)
{
    var value = 0;

    if (e.button)
        value = e.button;
    else if (e.which)
        value = e.which;

    if (value == 1)
    {
        history_counter++;

        var p = calcCoord(e);

        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
        mouse_original_path = document.createElementNS(NSS["svg"], "path");
        mouse_original_path.setAttribute("stroke", path_colour);
        mouse_original_path.setAttribute("stroke-width", path_paint_width);
        mouse_original_path.setAttribute("fill", "none");
        mouse_original_path.setAttribute("id", "path " + Date());
        mouse_original_path.setAttribute("d", "M" + p.x + "," + p.y);
        slides[activeSlide]["original_element"].appendChild(mouse_original_path);
        history_original_elements.push(mouse_original_path);

        mouse_presentation_path = document.createElementNS(NSS["svg"], "path");
        mouse_presentation_path.setAttribute("stroke", path_colour);
        mouse_presentation_path.setAttribute("stroke-width", path_paint_width);
        mouse_presentation_path.setAttribute("fill", "none");
        mouse_presentation_path.setAttribute("id", "path " + Date() + " presentation copy");
        mouse_presentation_path.setAttribute("d", "M" + p.x + "," + p.y);

        if (slides[activeSlide]["viewGroup"])
            slides[activeSlide]["viewGroup"].appendChild(mouse_presentation_path);
        else
            slides[activeSlide]["element"].appendChild(mouse_presentation_path);

        history_presentation_elements.push(mouse_presentation_path);

        return false;
    }

    return true;
}

/** Event handler for mouse up in drawing mode.
 *
 *  @param e the event
 */
function drawingMouseup(e)
{
    if(!e)
        e = window.event;

    if (mouse_presentation_path != null)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute("d");
        d += " L" + p.x + "," + p.y;
        mouse_presentation_path.setAttribute("d", d);
        mouse_presentation_path = null;
        mouse_original_path.setAttribute("d", d);
        mouse_original_path = null;

        return false;
    }

    return true;
}

/** Event handler for mouse move in drawing mode.
 *
 *  @param e the event
 */
function drawingMousemove(e)
{
    if(!e)
        e = window.event;

    var dist = (mouse_last_x - e.clientX) * (mouse_last_x - e.clientX) + (mouse_last_y - e.clientY) * (mouse_last_y - e.clientY);

    if (mouse_presentation_path == null)
    {
        return true;
    }

    if (dist &gt;= mouse_min_dist_sqr)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute("d");
        d += " L" + p.x + "," + p.y;
        mouse_presentation_path.setAttribute("d", d);
        mouse_original_path.setAttribute("d", d);
        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
    }

    return false;
}

/** Event handler for mouse wheel events in slide mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function slideMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        skipEffects(-1);
    else if (delta &lt; 0)
        skipEffects(1);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Event handler for mouse wheel events in index mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function indexMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS);
    else if (delta &lt; 0)
        indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Function to set the path paint width.
*/
function set_path_paint_width()
{
    var svgPoint1 = document.documentElement.createSVGPoint();
    var svgPoint2 = document.documentElement.createSVGPoint();

    svgPoint1.x = 0.0;
    svgPoint1.y = 0.0;
    svgPoint2.x = 1.0;
    svgPoint2.y = 0.0;

    var matrix = slides[activeSlide]["element"].getTransformToElement(ROOT_NODE);

    if (slides[activeSlide]["viewGroup"])
        matrix = slides[activeSlide]["viewGroup"].getTransformToElement(ROOT_NODE);

    svgPoint1 = svgPoint1.matrixTransform(matrix);
    svgPoint2 = svgPoint2.matrixTransform(matrix);

    path_paint_width = path_width / Math.sqrt((svgPoint2.x - svgPoint1.x) * (svgPoint2.x - svgPoint1.x) + (svgPoint2.y - svgPoint1.y) * (svgPoint2.y - svgPoint1.y));
}

/** The view effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect); for the view effect the options need to contain the old and the new matrix.
 */
function view(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if (!options["matrixInitial"])
    {
        var tempString = slides[activeSlide]["viewGroup"].getAttribute("transform");

        if (tempString)
            options["matrixInitial"] = (new matrixSVG()).fromAttribute(tempString);
        else
            options["matrixInitial"] = (new matrixSVG()).fromSVGElements(1, 0, 0, 1, 0, 0);
    }

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options["length"])
            length = options["length"];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("transform", options["matrixInitial"].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("transform", options["matrixNew"].toAttribute());

            set_path_paint_width();

            options["matrixInitial"] = null;
            return true;
        }
        else
        {
            element.setAttribute("transform", options["matrixInitial"].mix(options["matrixNew"], fraction).toAttribute());
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("transform", options["matrixInitial"].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("transform", options["matrixOld"].toAttribute());
            set_path_paint_width();

            options["matrixInitial"] = null;
            return true;
        }
        else
        {
            element.setAttribute("transform", options["matrixInitial"].mix(options["matrixOld"], fraction).toAttribute());
        }
    }

    return false;
}

/** The fade effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function fade(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options["length"])
            length = options["length"];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = "none";
            element.setAttribute("opacity", 0);
        }
        else if (fraction &gt;= 1)
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", 1);
            return true;
        }
        else
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", fraction);
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", 1);
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("opacity", 0);
            element.style.display = "none";
            return true;
        }
        else
        {
            element.style.display = "inherit";
            element.setAttribute("opacity", 1 - fraction);
        }
    }
    return false;
}

/** The appear effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function appear(dir, element, time, options)
{
    if (dir == 1)
    {
        element.style.display = "inherit";
        element.setAttribute("opacity",1);
    }
    else if (dir == -1)
    {
        element.style.display = "none";
        element.setAttribute("opacity",0);
    }
    return true;
}

/** The pop effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function pop(dir, element, time, options)
{
    var length = 500;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options["length"])
            length = options["length"];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("opacity", 0);
            element.setAttribute("transform", "scale(0)");
            element.style.display = "none";
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("opacity", 1);
            element.removeAttribute("transform");
            element.style.display = "inherit";
            return true;
        }
        else
        {
            element.style.display = "inherit";
            var opacityFraction = fraction * 3;
            if (opacityFraction &gt; 1)
                opacityFraction = 1;
            element.setAttribute("opacity", opacityFraction);
            var offsetX = WIDTH * (1.0 - fraction) / 2.0;
            var offsetY = HEIGHT * (1.0 - fraction) / 2.0;
            element.setAttribute("transform", "translate(" + offsetX + "," + offsetY + ") scale(" + fraction + ")");
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute("opacity", 1);
            element.setAttribute("transform", "scale(1)");
            element.style.display = "inherit";
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute("opacity", 0);
            element.removeAttribute("transform");
            element.style.display = "none";
            return true;
        }
        else
        {
            element.setAttribute("opacity", 1 - fraction);
            element.setAttribute("transform", "scale(" + 1 - fraction + ")");
            element.style.display = "inherit";
        }
    }
    return false;
}

/** Function to set a slide either to the start or the end state.
 *
 *  @param slide the slide to use
 *  @param state the state into which the slide should be set
 */
function setSlideToState(slide, state)
{
    slides[slide]["viewGroup"].setAttribute("transform", slides[slide].initialView);

    if (slides[slide]["effects"])
    {
        if (state == STATE_END)
        {
            for (var counter = 0; counter &lt; slides[slide]["effects"].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[slide]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(effect["dir"], effect["element"], STATE_END, effect["options"]);
                }
            }
        }
        else if (state == STATE_START)
        {
            for (var counter = slides[slide]["effects"].length - 1; counter &gt;= 0; counter--)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[slide]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(parseInt(effect["dir"]) * -1, effect["element"], STATE_START, effect["options"]);
                }
            }
        }
        else
        {
            setSlideToState(slide, STATE_START);

            for (var counter = 0; counter &lt; slides[slide]["effects"].length &amp;&amp; counter &lt; state; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide]["effects"][counter].length; subCounter++)
                {
                    var effect = slides[slide]["effects"][counter][subCounter];
                    if (effect["effect"] == "fade")
                        fade(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "appear")
                        appear(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "pop")
                        pop(effect["dir"], effect["element"], STATE_END, effect["options"]);
                    else if (effect["effect"] == "view")
                        view(effect["dir"], effect["element"], STATE_END, effect["options"]);
                }
            }
        }
    }

    window.location.hash = (activeSlide + 1) + '_' + activeEffect;
}

/** Convenience function to translate a attribute string into a dictionary.
 *
 *    @param str the attribute string
 *  @return a dictionary
 *  @see dictToPropStr
 */
function propStrToDict(str)
{
    var list = str.split(";");
    var obj = new Object();

    for (var counter = 0; counter &lt; list.length; counter++)
    {
        var subStr = list[counter];
        var subList = subStr.split(":");
        if (subList.length == 2)
        {
            obj[subList[0]] = subList[1];
        }
    }

    return obj;
}

/** Convenience function to translate a dictionary into a string that can be used as an attribute.
 *
 *  @param dict the dictionary to convert
 *  @return a string that can be used as an attribute
 *  @see propStrToDict
 */
function dictToPropStr(dict)
{
    var str = "";

    for (var key in dict)
    {
        str += key + ":" + dict[key] + ";";
    }

    return str;
}

/** Sub-function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *    @param replace dictionary of replaced ids
 *  @see suffixNodeIds
 */
function suffixNoneIds_sub(node, suffix, replace)
{
    if (node.nodeType == 1)
    {
        if (node.getAttribute("id"))
        {
            var id = node.getAttribute("id")
                replace["#" + id] = id + suffix;
            node.setAttribute("id", id + suffix);
        }

        if ((node.nodeName == "use") &amp;&amp; (node.getAttributeNS(NSS["xlink"], "href")) &amp;&amp; (replace[node.getAttribute(NSS["xlink"], "href")]))
            node.setAttribute(NSS["xlink"], "href", node.getAttribute(NSS["xlink"], "href") + suffix);

        if (node.childNodes)
        {
            for (var counter = 0; counter &lt; node.childNodes.length; counter++)
                suffixNoneIds_sub(node.childNodes[counter], suffix, replace);
        }
    }
}

/** Function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *  @return the changed node
 *  @see suffixNodeIds_sub
 */
function suffixNodeIds(node, suffix)
{
    var replace = new Object();

    suffixNoneIds_sub(node, suffix, replace);

    return node;
}

/** Function to build a progress bar.
 *
 *  @param parent node to attach the progress bar to
 */
function createProgressBar(parent_node)
{
    var g = document.createElementNS(NSS["svg"], "g");
    g.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");
    g.setAttribute("id", "layer_progress_bar");
    g.setAttribute("style", "display: none;");

    var rect_progress_bar = document.createElementNS(NSS["svg"], "rect");
    rect_progress_bar.setAttribute("style", "marker: none; fill: rgb(128, 128, 128); stroke: none;");
    rect_progress_bar.setAttribute("id", "rect_progress_bar");
    rect_progress_bar.setAttribute("x", 0);
    rect_progress_bar.setAttribute("y", 0.99 * HEIGHT);
    rect_progress_bar.setAttribute("width", 0);
    rect_progress_bar.setAttribute("height", 0.01 * HEIGHT);
    g.appendChild(rect_progress_bar);

    var circle_timer_indicator = document.createElementNS(NSS["svg"], "circle");
    circle_timer_indicator.setAttribute("style", "marker: none; fill: rgb(255, 0, 0); stroke: none;");
    circle_timer_indicator.setAttribute("id", "circle_timer_indicator");
    circle_timer_indicator.setAttribute("cx", 0.005 * HEIGHT);
    circle_timer_indicator.setAttribute("cy", 0.995 * HEIGHT);
    circle_timer_indicator.setAttribute("r", 0.005 * HEIGHT);
    g.appendChild(circle_timer_indicator);

    parent_node.appendChild(g);
}

/** Function to hide the progress bar.
 *
 */
function hideProgressBar()
{
    var progress_bar = document.getElementById("layer_progress_bar");

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute("style", "display: none;");
}

/** Function to show the progress bar.
 *
 */
function showProgressBar()
{
    var progress_bar = document.getElementById("layer_progress_bar");

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute("style", "display: inherit;");
}

/** Set progress bar value.
 *
 *    @param value the current slide number
 *
 */
function setProgressBarValue(value)
{
    var rect_progress_bar = document.getElementById("rect_progress_bar");

    if (!rect_progress_bar)
    {
        return;
    }

    if (value &lt; 1)
    {
        // First slide, assumed to be the title of the presentation
        var x = 0;
        var w = 0.01 * HEIGHT;
    }
    else if (value &gt;= slides.length - 1)
    {
        // Last slide, assumed to be the end of the presentation
        var x = WIDTH - 0.01 * HEIGHT;
        var w = 0.01 * HEIGHT;
    }
    else
    {
        value -= 1;
        value /= (slides.length - 2);

        var x = WIDTH * value;
        var w = WIDTH / (slides.length - 2);
    }

    rect_progress_bar.setAttribute("x", x);
    rect_progress_bar.setAttribute("width", w);
}

/** Set time indicator.
 *
 *    @param value the percentage of time elapse so far between 0.0 and 1.0
 *
 */
function setTimeIndicatorValue(value)
{
    var circle_timer_indicator = document.getElementById("circle_timer_indicator");

    if (!circle_timer_indicator)
    {
        return;
    }

    if (value &lt; 0.0)
    {
        value = 0.0;
    }

    if (value &gt; 1.0)
    {
        value = 1.0;
    }

    var cx = (WIDTH - 0.01 * HEIGHT) * value + 0.005 * HEIGHT;
    circle_timer_indicator.setAttribute("cx", cx);
}

/** Update timer.
 *
 */
function updateTimer()
{
    timer_elapsed += 1;
    setTimeIndicatorValue((timer_elapsed - timer_start) / (60 * timer_duration));
}

/** Convert screen coordinates to document coordinates.
 *
 *  @param e event with screen coordinates
 *
 *  @return coordinates in SVG file coordinate system
 */
function calcCoord(e)
{
    var svgPoint = document.documentElement.createSVGPoint();
    svgPoint.x = e.clientX + window.pageXOffset;
    svgPoint.y = e.clientY + window.pageYOffset;

    var matrix = slides[activeSlide]["element"].getScreenCTM();

    if (slides[activeSlide]["viewGroup"])
        matrix = slides[activeSlide]["viewGroup"].getScreenCTM();

    svgPoint = svgPoint.matrixTransform(matrix.inverse());
    return svgPoint;
}

/** Add slide.
 *
 *    @param after_slide after which slide the new slide should be inserted into the presentation
 */
function addSlide(after_slide)
{
    number_of_added_slides++;

    var g = document.createElementNS(NSS["svg"], "g");
    g.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");
    g.setAttribute("id", "Whiteboard " + Date() + " presentation copy");
    g.setAttribute("style", "display: none;");

    var new_slide = new Object();
    new_slide["element"] = g;

    // Set build in transition.
    new_slide["transitionIn"] = new Object();
    var dict = defaultTransitionInDict;
    new_slide["transitionIn"]["name"] = dict["name"];
    new_slide["transitionIn"]["options"] = new Object();

    for (key in dict)
        if (key != "name")
            new_slide["transitionIn"]["options"][key] = dict[key];

    // Set build out transition.
    new_slide["transitionOut"] = new Object();
    dict = defaultTransitionOutDict;
    new_slide["transitionOut"]["name"] = dict["name"];
    new_slide["transitionOut"]["options"] = new Object();

    for (key in dict)
        if (key != "name")
            new_slide["transitionOut"]["options"][key] = dict[key];

    // Copy master slide content.
    if (masterSlide)
    {
        var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), "_" + Date() + " presentation_copy");
        clonedNode.removeAttributeNS(NSS["inkscape"], "groupmode");
        clonedNode.removeAttributeNS(NSS["inkscape"], "label");
        clonedNode.style.display = "inherit";

        g.appendChild(clonedNode);
    }

    // Substitute auto texts.
    substituteAutoTexts(g, "Whiteboard " + number_of_added_slides, "W" + number_of_added_slides, slides.length);

    g.setAttribute("onmouseover", "if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != " + (after_slide + 1) + ")) { indexSetActiveSlide(" + (after_slide + 1) + "); };");

    // Create a transform group.
    var transformGroup = document.createElementNS(NSS["svg"], "g");

    // Add content to transform group.
    while (g.firstChild)
        transformGroup.appendChild(g.firstChild);

    // Transfer the transform attribute from the node to the transform group.
    if (g.getAttribute("transform"))
    {
        transformGroup.setAttribute("transform", g.getAttribute("transform"));
        g.removeAttribute("transform");
    }

    // Create a view group.
    var viewGroup = document.createElementNS(NSS["svg"], "g");

    viewGroup.appendChild(transformGroup);
    new_slide["viewGroup"] = g.appendChild(viewGroup);

    // Insert background.
    if (BACKGROUND_COLOR != null)
    {
        var rectNode = document.createElementNS(NSS["svg"], "rect");

        rectNode.setAttribute("x", 0);
        rectNode.setAttribute("y", 0);
        rectNode.setAttribute("width", WIDTH);
        rectNode.setAttribute("height", HEIGHT);
        rectNode.setAttribute("id", "jessyInkBackground" + Date());
        rectNode.setAttribute("fill", BACKGROUND_COLOR);

        new_slide["viewGroup"].insertBefore(rectNode, new_slide["viewGroup"].firstChild);
    }

    // Set initial view even if there are no other views.
    var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

    new_slide["viewGroup"].setAttribute("transform", matrixOld.toAttribute());
    new_slide.initialView = matrixOld.toAttribute();

    // Insert slide
    var node = slides[after_slide]["element"];
    var next_node = node.nextSibling;
    var parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    g = document.createElementNS(NSS["svg"], "g");
    g.setAttributeNS(NSS["inkscape"], "groupmode", "layer");
    g.setAttributeNS(NSS["inkscape"], "label", "Whiteboard " + number_of_added_slides);
    g.setAttribute("clip-path", "url(#jessyInkSlideClipPath)");
    g.setAttribute("id", "Whiteboard " + Date());
    g.setAttribute("style", "display: none;");

    new_slide["original_element"] = g;

    node = slides[after_slide]["original_element"];
    next_node = node.nextSibling;
    parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    before_new_slide = slides.slice(0, after_slide + 1);
    after_new_slide = slides.slice(after_slide + 1);
    slides = before_new_slide.concat(new_slide, after_new_slide);

    //resetting the counter attributes on the slides that follow the new slide...
    for (var counter = after_slide+2; counter &lt; slides.length; counter++)
    {
        slides[counter]["element"].setAttribute("onmouseover", "if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != " + counter + ")) { indexSetActiveSlide(" + counter + "); };");
    }
}

/** Convenience function to obtain a transformation matrix from a point matrix.
 *
 *    @param mPoints Point matrix.
 *    @return A transformation matrix.
 */
function pointMatrixToTransformation(mPoints)
{
    mPointsOld = (new matrixSVG()).fromElements(0, WIDTH, WIDTH, 0, 0, HEIGHT, 1, 1, 1);

    return mPointsOld.mult(mPoints.inv());
}

/** Convenience function to obtain a matrix with three corners of a rectangle.
 *
 *    @param rect an svg rectangle
 *    @return a matrixSVG containing three corners of the rectangle
 */
function rectToMatrix(rect)
{
    rectWidth = rect.getBBox().width;
    rectHeight = rect.getBBox().height;
    rectX = rect.getBBox().x;
    rectY = rect.getBBox().y;
    rectXcorr = 0;
    rectYcorr = 0;

    scaleX = WIDTH / rectWidth;
    scaleY = HEIGHT / rectHeight;

    if (scaleX &gt; scaleY)
    {
        scaleX = scaleY;
        rectXcorr -= (WIDTH / scaleX - rectWidth) / 2;
        rectWidth = WIDTH / scaleX;
    }
    else
    {
        scaleY = scaleX;
        rectYcorr -= (HEIGHT / scaleY - rectHeight) / 2;
        rectHeight = HEIGHT / scaleY;
    }

    if (rect.transform.baseVal.numberOfItems &lt; 1)
    {
        mRectTrans = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);
    }
    else
    {
        mRectTrans = (new matrixSVG()).fromSVGMatrix(rect.transform.baseVal.consolidate().matrix);
    }

    newBasePoints = (new matrixSVG()).fromElements(rectX, rectX, rectX, rectY, rectY, rectY, 1, 1, 1);
    newVectors = (new matrixSVG()).fromElements(rectXcorr, rectXcorr + rectWidth, rectXcorr + rectWidth, rectYcorr, rectYcorr, rectYcorr + rectHeight, 0, 0, 0);

    return mRectTrans.mult(newBasePoints.add(newVectors));
}

/** Function to handle JessyInk elements.
 *
 *    @param    node    Element node.
 */
function handleElement(node)
{
    if (node.getAttributeNS(NSS['jessyink'], 'element') == 'core.video')
    {
        var url;
        var width;
        var height;
        var x;
        var y;
        var transform;

        var tspans = node.getElementsByTagNameNS("http://www.w3.org/2000/svg", "tspan");

        for (var tspanCounter = 0; tspanCounter &lt; tspans.length; tspanCounter++)
        {
            if (tspans[tspanCounter].getAttributeNS("https://launchpad.net/jessyink", "video") == "url")
            {
                url = tspans[tspanCounter].firstChild.nodeValue;
            }
        }

        var rects = node.getElementsByTagNameNS("http://www.w3.org/2000/svg", "rect");

        for (var rectCounter = 0; rectCounter &lt; rects.length; rectCounter++)
        {
            if (rects[rectCounter].getAttributeNS("https://launchpad.net/jessyink", "video") == "rect")
            {
                x = rects[rectCounter].getAttribute("x");
                y = rects[rectCounter].getAttribute("y");
                width = rects[rectCounter].getAttribute("width");
                height = rects[rectCounter].getAttribute("height");
                transform = rects[rectCounter].getAttribute("transform");
            }
        }

        for (var childCounter = 0; childCounter &lt; node.childNodes.length; childCounter++)
        {
            if (node.childNodes[childCounter].nodeType == 1)
            {
                if (node.childNodes[childCounter].style)
                {
                    node.childNodes[childCounter].style.display = 'none';
                }
                else
                {
                    node.childNodes[childCounter].setAttribute("style", "display: none;");
                }
            }
        }

        var foreignNode = document.createElementNS("http://www.w3.org/2000/svg", "foreignObject");
        foreignNode.setAttribute("x", x);
        foreignNode.setAttribute("y", y);
        foreignNode.setAttribute("width", width);
        foreignNode.setAttribute("height", height);
        foreignNode.setAttribute("transform", transform);

        var videoNode = document.createElementNS("http://www.w3.org/1999/xhtml", "video");
        videoNode.setAttribute("src", url);

        foreignNode.appendChild(videoNode);
        node.appendChild(foreignNode);
    }
}

/** Class processing the location hash.
 *
 *    @param str location hash
 */
function LocationHash(str)
{
    this.slideNumber = 0;
    this.effectNumber = 0;

    str = str.substr(1, str.length - 1);

    var parts = str.split('_');

    // Try to extract slide number.
    if (parts.length &gt;= 1)
    {
        try
        {
            var slideNumber = parseInt(parts[0]);

            if (!isNaN(slideNumber))
            {
                this.slideNumber = slideNumber - 1;
            }
        }
        catch (e)
        {
        }
    }

    // Try to extract effect number.
    if (parts.length &gt;= 2)
    {
        try
        {
            var effectNumber = parseInt(parts[1]);

            if (!isNaN(effectNumber))
            {
                this.effectNumber = effectNumber;
            }
        }
        catch (e)
        {
        }
    }
}

/** Class representing an svg matrix.
*/
function matrixSVG()
{
    this.e11 = 0; // a
    this.e12 = 0; // c
    this.e13 = 0; // e
    this.e21 = 0; // b
    this.e22 = 0; // d
    this.e23 = 0; // f
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 0;
}

/** Constructor function.
 *
 *    @param a element a (i.e. 1, 1) as described in the svg standard.
 *    @param b element b (i.e. 2, 1) as described in the svg standard.
 *    @param c element c (i.e. 1, 2) as described in the svg standard.
 *    @param d element d (i.e. 2, 2) as described in the svg standard.
 *    @param e element e (i.e. 1, 3) as described in the svg standard.
 *    @param f element f (i.e. 2, 3) as described in the svg standard.
 */
matrixSVG.prototype.fromSVGElements = function(a, b, c, d, e, f)
{
    this.e11 = a;
    this.e12 = c;
    this.e13 = e;
    this.e21 = b;
    this.e22 = d;
    this.e23 = f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param matrix an svg matrix as described in the svg standard.
 */
matrixSVG.prototype.fromSVGMatrix = function(m)
{
    this.e11 = m.a;
    this.e12 = m.c;
    this.e13 = m.e;
    this.e21 = m.b;
    this.e22 = m.d;
    this.e23 = m.f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param e11 element 1, 1 of the matrix.
 *    @param e12 element 1, 2 of the matrix.
 *    @param e13 element 1, 3 of the matrix.
 *    @param e21 element 2, 1 of the matrix.
 *    @param e22 element 2, 2 of the matrix.
 *    @param e23 element 2, 3 of the matrix.
 *    @param e31 element 3, 1 of the matrix.
 *    @param e32 element 3, 2 of the matrix.
 *    @param e33 element 3, 3 of the matrix.
 */
matrixSVG.prototype.fromElements = function(e11, e12, e13, e21, e22, e23, e31, e32, e33)
{
    this.e11 = e11;
    this.e12 = e12;
    this.e13 = e13;
    this.e21 = e21;
    this.e22 = e22;
    this.e23 = e23;
    this.e31 = e31;
    this.e32 = e32;
    this.e33 = e33;

    return this;
}

/** Constructor function.
 *
 *    @param attrString string value of the "transform" attribute (currently only "matrix" is accepted)
 */
matrixSVG.prototype.fromAttribute = function(attrString)
{
    str = attrString.substr(7, attrString.length - 8);

    str = str.trim();

    strArray = str.split(",");

    // Opera does not use commas to separate the values of the matrix, only spaces.
    if (strArray.length != 6)
        strArray = str.split(" ");

    this.e11 = parseFloat(strArray[0]);
    this.e21 = parseFloat(strArray[1]);
    this.e31 = 0;
    this.e12 = parseFloat(strArray[2]);
    this.e22 = parseFloat(strArray[3]);
    this.e32 = 0;
    this.e13 = parseFloat(strArray[4]);
    this.e23 = parseFloat(strArray[5]);
    this.e33 = 1;

    return this;
}

/** Output function
 *
 *    @return a string that can be used as the "transform" attribute.
 */
matrixSVG.prototype.toAttribute = function()
{
    return "matrix(" + this.e11 + ", " + this.e21 + ", " + this.e12 + ", " + this.e22 + ", " + this.e13 + ", " + this.e23 + ")";
}

/** Matrix nversion.
 *
 *    @return the inverse of the matrix
 */
matrixSVG.prototype.inv = function()
{
    out = new matrixSVG();

    det = this.e11 * (this.e33 * this.e22 - this.e32 * this.e23) - this.e21 * (this.e33 * this.e12 - this.e32 * this.e13) + this.e31 * (this.e23 * this.e12 - this.e22 * this.e13);

    out.e11 =  (this.e33 * this.e22 - this.e32 * this.e23) / det;
    out.e12 = -(this.e33 * this.e12 - this.e32 * this.e13) / det;
    out.e13 =  (this.e23 * this.e12 - this.e22 * this.e13) / det;
    out.e21 = -(this.e33 * this.e21 - this.e31 * this.e23) / det;
    out.e22 =  (this.e33 * this.e11 - this.e31 * this.e13) / det;
    out.e23 = -(this.e23 * this.e11 - this.e21 * this.e13) / det;
    out.e31 =  (this.e32 * this.e21 - this.e31 * this.e22) / det;
    out.e32 = -(this.e32 * this.e11 - this.e31 * this.e12) / det;
    out.e33 =  (this.e22 * this.e11 - this.e21 * this.e12) / det;

    return out;
}

/** Matrix multiplication.
 *
 *    @param op another svg matrix
 *    @return this * op
 */
matrixSVG.prototype.mult = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 * op.e11 + this.e12 * op.e21 + this.e13 * op.e31;
    out.e12 = this.e11 * op.e12 + this.e12 * op.e22 + this.e13 * op.e32;
    out.e13 = this.e11 * op.e13 + this.e12 * op.e23 + this.e13 * op.e33;
    out.e21 = this.e21 * op.e11 + this.e22 * op.e21 + this.e23 * op.e31;
    out.e22 = this.e21 * op.e12 + this.e22 * op.e22 + this.e23 * op.e32;
    out.e23 = this.e21 * op.e13 + this.e22 * op.e23 + this.e23 * op.e33;
    out.e31 = this.e31 * op.e11 + this.e32 * op.e21 + this.e33 * op.e31;
    out.e32 = this.e31 * op.e12 + this.e32 * op.e22 + this.e33 * op.e32;
    out.e33 = this.e31 * op.e13 + this.e32 * op.e23 + this.e33 * op.e33;

    return out;
}

/** Matrix addition.
 *
 *    @param op another svg matrix
 *    @return this + op
 */
matrixSVG.prototype.add = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 + op.e11;
    out.e12 = this.e12 + op.e12;
    out.e13 = this.e13 + op.e13;
    out.e21 = this.e21 + op.e21;
    out.e22 = this.e22 + op.e22;
    out.e23 = this.e23 + op.e23;
    out.e31 = this.e31 + op.e31;
    out.e32 = this.e32 + op.e32;
    out.e33 = this.e33 + op.e33;

    return out;
}

/** Matrix mixing.
 *
 *    @param op another svg matrix
 *    @parma contribOp contribution of the other matrix (0 &lt;= contribOp &lt;= 1)
 *    @return (1 - contribOp) * this + contribOp * op
 */
matrixSVG.prototype.mix = function(op, contribOp)
{
    contribThis = 1.0 - contribOp;
    out = new matrixSVG();

    out.e11 = contribThis * this.e11 + contribOp * op.e11;
    out.e12 = contribThis * this.e12 + contribOp * op.e12;
    out.e13 = contribThis * this.e13 + contribOp * op.e13;
    out.e21 = contribThis * this.e21 + contribOp * op.e21;
    out.e22 = contribThis * this.e22 + contribOp * op.e22;
    out.e23 = contribThis * this.e23 + contribOp * op.e23;
    out.e31 = contribThis * this.e31 + contribOp * op.e31;
    out.e32 = contribThis * this.e32 + contribOp * op.e32;
    out.e33 = contribThis * this.e33 + contribOp * op.e33;

    return out;
}

/** Trimming function for strings.
*/
String.prototype.trim = function()
{
    return this.replace(/^\s+|\s+$/g, '');
}

/** SVGElement.getTransformToElement polyfill */
SVGElement.prototype.getTransformToElement = SVGElement.prototype.getTransformToElement || function(elem) {
    return elem.getScreenCTM().inverse().multiply(this.getScreenCTM());
};</script>
</svg>
